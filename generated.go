// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package myeduate

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"myeduate/ent"
	"myeduate/ent/customtypes"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AuthParent struct {
		ID               func(childComplexity int) int
		ParentAddress    func(childComplexity int) int
		ParentEmail      func(childComplexity int) int
		ParentFirstName  func(childComplexity int) int
		ParentLastName   func(childComplexity int) int
		ParentMiddleName func(childComplexity int) int
		ParentMobile     func(childComplexity int) int
		ParentPin        func(childComplexity int) int
		ParentPlace      func(childComplexity int) int
		ParentState      func(childComplexity int) int
	}

	AuthStaff struct {
		ID              func(childComplexity int) int
		StaffAddress    func(childComplexity int) int
		StaffEmail      func(childComplexity int) int
		StaffFirstName  func(childComplexity int) int
		StaffLastName   func(childComplexity int) int
		StaffMiddleName func(childComplexity int) int
		StaffMobile     func(childComplexity int) int
		StaffPin        func(childComplexity int) int
		StaffPlace      func(childComplexity int) int
		StaffState      func(childComplexity int) int
	}

	CustData struct {
		CustomerName func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	InstData struct {
		ID       func(childComplexity int) int
		InstName func(childComplexity int) int
	}

	MsgChannelMessage struct {
		CreatedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		MsgActive       func(childComplexity int) int
		MsgContent      func(childComplexity int) int
		MsgDate         func(childComplexity int) int
		MsgExpiryDate   func(childComplexity int) int
		MsgIsExpiry     func(childComplexity int) int
		MsgIsIndividual func(childComplexity int) int
		MsgIsText       func(childComplexity int) int
		MsgMediaContent func(childComplexity int) int
		MsgMediaType    func(childComplexity int) int
		MsgRecvOrSent   func(childComplexity int) int
	}

	MsgChannelMessageConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MsgChannelMessageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MstCustomer struct {
		CustAddress       func(childComplexity int) int
		CustBanner1       func(childComplexity int) int
		CustBanner2       func(childComplexity int) int
		CustCode          func(childComplexity int) int
		CustContactPerson func(childComplexity int) int
		CustEmail         func(childComplexity int) int
		CustIsActive      func(childComplexity int) int
		CustLogoURL       func(childComplexity int) int
		CustMobile        func(childComplexity int) int
		CustName          func(childComplexity int) int
		CustNumInst       func(childComplexity int) int
		CustPhone         func(childComplexity int) int
		CustPin           func(childComplexity int) int
		CustPlace         func(childComplexity int) int
		CustState         func(childComplexity int) int
		CustStatus        func(childComplexity int) int
		CustTimeZone      func(childComplexity int) int
		CustURL           func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	MstCustomerConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MstCustomerEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MstInst struct {
		ID                func(childComplexity int) int
		InstAddress       func(childComplexity int) int
		InstBanner1       func(childComplexity int) int
		InstBanner2       func(childComplexity int) int
		InstCode          func(childComplexity int) int
		InstContactPerson func(childComplexity int) int
		InstEmail         func(childComplexity int) int
		InstIsActive      func(childComplexity int) int
		InstLogoURL       func(childComplexity int) int
		InstMobile        func(childComplexity int) int
		InstName          func(childComplexity int) int
		InstPhone         func(childComplexity int) int
		InstPin           func(childComplexity int) int
		InstPlace         func(childComplexity int) int
		InstShortName     func(childComplexity int) int
		InstState         func(childComplexity int) int
		InstStatus        func(childComplexity int) int
		InstTimeZone      func(childComplexity int) int
		InstURL           func(childComplexity int) int
	}

	MstInstConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MstInstEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MstStudent struct {
		ID            func(childComplexity int) int
		StdFirstName  func(childComplexity int) int
		StdLastName   func(childComplexity int) int
		StdMiddleName func(childComplexity int) int
		StdRegNo      func(childComplexity int) int
		StdSex        func(childComplexity int) int
		StdStatus     func(childComplexity int) int
		StdStudying   func(childComplexity int) int
	}

	Mutation struct {
		AddAuthParentUser func(childComplexity int, token string, input ent.CreateAuthParentInput) int
		AddAuthStaffUser  func(childComplexity int, token string, input ent.CreateAuthStaffInput) int
		AddChannelMessage func(childComplexity int, token string, input ent.CreateMsgChannelMessageInput) int
		AddCustomer       func(childComplexity int, token string, input ent.CreateMstCustomerInput) int
		AddInst           func(childComplexity int, token string, input ent.CreateMstInstInput) int
		AddStudent        func(childComplexity int, token string, input ent.CreateMstStudentInput) int
		UpdateCustomer    func(childComplexity int, token string, id int, input ent.UpdateMstCustomerInput) int
		UpdateInst        func(childComplexity int, token string, id int, input ent.UpdateMstInstInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Query struct {
		GetAuthParentUserNamesByIds func(childComplexity int, token string, id []int) int
		GetAuthStaffUserIds         func(childComplexity int, token string, id []int) int
		GetChannelMessages          func(childComplexity int, token string) int
		GetCustomerByID             func(childComplexity int, token string, id int) int
		GetCustomerIdsByNames       func(childComplexity int, token string, custNames []string) int
		GetInstByID                 func(childComplexity int, token string, id int) int
		GetInstIdsByNames           func(childComplexity int, token string, instNames []string) int
		GetStudentNamesByIds        func(childComplexity int, token string, id []int) int
		ListCustomers               func(childComplexity int, token string, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.MstCustomerOrder) int
		ListInsts                   func(childComplexity int, token string, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.MstInstOrder) int
		ListInstsByCustID           func(childComplexity int, token string, customerID int, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.MstInstOrder) int
		Node                        func(childComplexity int, token string, id int) int
		Nodes                       func(childComplexity int, token string, ids []int) int
	}

	Subscription struct {
		GetChannelMessagesBySubscription func(childComplexity int, token string) int
	}

	UserNamesById struct {
		FirstName  func(childComplexity int) int
		ID         func(childComplexity int) int
		LastName   func(childComplexity int) int
		MiddleName func(childComplexity int) int
	}
}

type MutationResolver interface {
	AddAuthParentUser(ctx context.Context, token string, input ent.CreateAuthParentInput) (*ent.AuthParent, error)
	AddAuthStaffUser(ctx context.Context, token string, input ent.CreateAuthStaffInput) (*ent.AuthStaff, error)
	AddChannelMessage(ctx context.Context, token string, input ent.CreateMsgChannelMessageInput) (*ent.MsgChannelMessage, error)
	AddCustomer(ctx context.Context, token string, input ent.CreateMstCustomerInput) (*ent.MstCustomer, error)
	UpdateCustomer(ctx context.Context, token string, id int, input ent.UpdateMstCustomerInput) (*ent.MstCustomer, error)
	AddInst(ctx context.Context, token string, input ent.CreateMstInstInput) (*ent.MstInst, error)
	UpdateInst(ctx context.Context, token string, id int, input ent.UpdateMstInstInput) (*ent.MstInst, error)
	AddStudent(ctx context.Context, token string, input ent.CreateMstStudentInput) (*ent.MstStudent, error)
}
type QueryResolver interface {
	GetAuthParentUserNamesByIds(ctx context.Context, token string, id []int) ([]*UserNamesByID, error)
	GetAuthStaffUserIds(ctx context.Context, token string, id []int) ([]*UserNamesByID, error)
	Node(ctx context.Context, token string, id int) (ent.Noder, error)
	Nodes(ctx context.Context, token string, ids []int) ([]ent.Noder, error)
	GetChannelMessages(ctx context.Context, token string) ([]*ent.MsgChannelMessage, error)
	ListCustomers(ctx context.Context, token string, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.MstCustomerOrder) (*ent.MstCustomerConnection, error)
	GetCustomerByID(ctx context.Context, token string, id int) (*ent.MstCustomer, error)
	GetCustomerIdsByNames(ctx context.Context, token string, custNames []string) ([]*CustData, error)
	ListInsts(ctx context.Context, token string, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.MstInstOrder) (*ent.MstInstConnection, error)
	ListInstsByCustID(ctx context.Context, token string, customerID int, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.MstInstOrder) (*ent.MstInstConnection, error)
	GetInstByID(ctx context.Context, token string, id int) (*ent.MstInst, error)
	GetInstIdsByNames(ctx context.Context, token string, instNames []string) ([]*InstData, error)
	GetStudentNamesByIds(ctx context.Context, token string, id []int) ([]*UserNamesByID, error)
}
type SubscriptionResolver interface {
	GetChannelMessagesBySubscription(ctx context.Context, token string) (<-chan []*ent.MsgChannelMessage, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AuthParent.id":
		if e.complexity.AuthParent.ID == nil {
			break
		}

		return e.complexity.AuthParent.ID(childComplexity), true

	case "AuthParent.parent_address":
		if e.complexity.AuthParent.ParentAddress == nil {
			break
		}

		return e.complexity.AuthParent.ParentAddress(childComplexity), true

	case "AuthParent.parent_email":
		if e.complexity.AuthParent.ParentEmail == nil {
			break
		}

		return e.complexity.AuthParent.ParentEmail(childComplexity), true

	case "AuthParent.parent_first_name":
		if e.complexity.AuthParent.ParentFirstName == nil {
			break
		}

		return e.complexity.AuthParent.ParentFirstName(childComplexity), true

	case "AuthParent.parent_last_name":
		if e.complexity.AuthParent.ParentLastName == nil {
			break
		}

		return e.complexity.AuthParent.ParentLastName(childComplexity), true

	case "AuthParent.parent_middle_name":
		if e.complexity.AuthParent.ParentMiddleName == nil {
			break
		}

		return e.complexity.AuthParent.ParentMiddleName(childComplexity), true

	case "AuthParent.parent_mobile":
		if e.complexity.AuthParent.ParentMobile == nil {
			break
		}

		return e.complexity.AuthParent.ParentMobile(childComplexity), true

	case "AuthParent.parent_pin":
		if e.complexity.AuthParent.ParentPin == nil {
			break
		}

		return e.complexity.AuthParent.ParentPin(childComplexity), true

	case "AuthParent.parent_place":
		if e.complexity.AuthParent.ParentPlace == nil {
			break
		}

		return e.complexity.AuthParent.ParentPlace(childComplexity), true

	case "AuthParent.parent_state":
		if e.complexity.AuthParent.ParentState == nil {
			break
		}

		return e.complexity.AuthParent.ParentState(childComplexity), true

	case "AuthStaff.id":
		if e.complexity.AuthStaff.ID == nil {
			break
		}

		return e.complexity.AuthStaff.ID(childComplexity), true

	case "AuthStaff.staff_address":
		if e.complexity.AuthStaff.StaffAddress == nil {
			break
		}

		return e.complexity.AuthStaff.StaffAddress(childComplexity), true

	case "AuthStaff.staff_email":
		if e.complexity.AuthStaff.StaffEmail == nil {
			break
		}

		return e.complexity.AuthStaff.StaffEmail(childComplexity), true

	case "AuthStaff.staff_first_name":
		if e.complexity.AuthStaff.StaffFirstName == nil {
			break
		}

		return e.complexity.AuthStaff.StaffFirstName(childComplexity), true

	case "AuthStaff.staff_last_name":
		if e.complexity.AuthStaff.StaffLastName == nil {
			break
		}

		return e.complexity.AuthStaff.StaffLastName(childComplexity), true

	case "AuthStaff.staff_middle_name":
		if e.complexity.AuthStaff.StaffMiddleName == nil {
			break
		}

		return e.complexity.AuthStaff.StaffMiddleName(childComplexity), true

	case "AuthStaff.staff_mobile":
		if e.complexity.AuthStaff.StaffMobile == nil {
			break
		}

		return e.complexity.AuthStaff.StaffMobile(childComplexity), true

	case "AuthStaff.staff_pin":
		if e.complexity.AuthStaff.StaffPin == nil {
			break
		}

		return e.complexity.AuthStaff.StaffPin(childComplexity), true

	case "AuthStaff.staff_place":
		if e.complexity.AuthStaff.StaffPlace == nil {
			break
		}

		return e.complexity.AuthStaff.StaffPlace(childComplexity), true

	case "AuthStaff.staff_state":
		if e.complexity.AuthStaff.StaffState == nil {
			break
		}

		return e.complexity.AuthStaff.StaffState(childComplexity), true

	case "CustData.customer_name":
		if e.complexity.CustData.CustomerName == nil {
			break
		}

		return e.complexity.CustData.CustomerName(childComplexity), true

	case "CustData.id":
		if e.complexity.CustData.ID == nil {
			break
		}

		return e.complexity.CustData.ID(childComplexity), true

	case "InstData.id":
		if e.complexity.InstData.ID == nil {
			break
		}

		return e.complexity.InstData.ID(childComplexity), true

	case "InstData.Inst_name":
		if e.complexity.InstData.InstName == nil {
			break
		}

		return e.complexity.InstData.InstName(childComplexity), true

	case "MsgChannelMessage.created_at":
		if e.complexity.MsgChannelMessage.CreatedAt == nil {
			break
		}

		return e.complexity.MsgChannelMessage.CreatedAt(childComplexity), true

	case "MsgChannelMessage.id":
		if e.complexity.MsgChannelMessage.ID == nil {
			break
		}

		return e.complexity.MsgChannelMessage.ID(childComplexity), true

	case "MsgChannelMessage.msg_active":
		if e.complexity.MsgChannelMessage.MsgActive == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgActive(childComplexity), true

	case "MsgChannelMessage.msg_content":
		if e.complexity.MsgChannelMessage.MsgContent == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgContent(childComplexity), true

	case "MsgChannelMessage.msg_date":
		if e.complexity.MsgChannelMessage.MsgDate == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgDate(childComplexity), true

	case "MsgChannelMessage.msg_expiry_date":
		if e.complexity.MsgChannelMessage.MsgExpiryDate == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgExpiryDate(childComplexity), true

	case "MsgChannelMessage.msg_is_expiry":
		if e.complexity.MsgChannelMessage.MsgIsExpiry == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgIsExpiry(childComplexity), true

	case "MsgChannelMessage.msg_is_individual":
		if e.complexity.MsgChannelMessage.MsgIsIndividual == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgIsIndividual(childComplexity), true

	case "MsgChannelMessage.msg_is_text":
		if e.complexity.MsgChannelMessage.MsgIsText == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgIsText(childComplexity), true

	case "MsgChannelMessage.msg_media_content":
		if e.complexity.MsgChannelMessage.MsgMediaContent == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgMediaContent(childComplexity), true

	case "MsgChannelMessage.msg_media_type":
		if e.complexity.MsgChannelMessage.MsgMediaType == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgMediaType(childComplexity), true

	case "MsgChannelMessage.msg_recv_or_sent":
		if e.complexity.MsgChannelMessage.MsgRecvOrSent == nil {
			break
		}

		return e.complexity.MsgChannelMessage.MsgRecvOrSent(childComplexity), true

	case "MsgChannelMessageConnection.edges":
		if e.complexity.MsgChannelMessageConnection.Edges == nil {
			break
		}

		return e.complexity.MsgChannelMessageConnection.Edges(childComplexity), true

	case "MsgChannelMessageConnection.pageInfo":
		if e.complexity.MsgChannelMessageConnection.PageInfo == nil {
			break
		}

		return e.complexity.MsgChannelMessageConnection.PageInfo(childComplexity), true

	case "MsgChannelMessageConnection.totalCount":
		if e.complexity.MsgChannelMessageConnection.TotalCount == nil {
			break
		}

		return e.complexity.MsgChannelMessageConnection.TotalCount(childComplexity), true

	case "MsgChannelMessageEdge.cursor":
		if e.complexity.MsgChannelMessageEdge.Cursor == nil {
			break
		}

		return e.complexity.MsgChannelMessageEdge.Cursor(childComplexity), true

	case "MsgChannelMessageEdge.node":
		if e.complexity.MsgChannelMessageEdge.Node == nil {
			break
		}

		return e.complexity.MsgChannelMessageEdge.Node(childComplexity), true

	case "MstCustomer.cust_address":
		if e.complexity.MstCustomer.CustAddress == nil {
			break
		}

		return e.complexity.MstCustomer.CustAddress(childComplexity), true

	case "MstCustomer.cust_banner_1":
		if e.complexity.MstCustomer.CustBanner1 == nil {
			break
		}

		return e.complexity.MstCustomer.CustBanner1(childComplexity), true

	case "MstCustomer.cust_banner_2":
		if e.complexity.MstCustomer.CustBanner2 == nil {
			break
		}

		return e.complexity.MstCustomer.CustBanner2(childComplexity), true

	case "MstCustomer.cust_code":
		if e.complexity.MstCustomer.CustCode == nil {
			break
		}

		return e.complexity.MstCustomer.CustCode(childComplexity), true

	case "MstCustomer.cust_contact_person":
		if e.complexity.MstCustomer.CustContactPerson == nil {
			break
		}

		return e.complexity.MstCustomer.CustContactPerson(childComplexity), true

	case "MstCustomer.cust_email":
		if e.complexity.MstCustomer.CustEmail == nil {
			break
		}

		return e.complexity.MstCustomer.CustEmail(childComplexity), true

	case "MstCustomer.cust_is_active":
		if e.complexity.MstCustomer.CustIsActive == nil {
			break
		}

		return e.complexity.MstCustomer.CustIsActive(childComplexity), true

	case "MstCustomer.cust_logo_url":
		if e.complexity.MstCustomer.CustLogoURL == nil {
			break
		}

		return e.complexity.MstCustomer.CustLogoURL(childComplexity), true

	case "MstCustomer.cust_mobile":
		if e.complexity.MstCustomer.CustMobile == nil {
			break
		}

		return e.complexity.MstCustomer.CustMobile(childComplexity), true

	case "MstCustomer.cust_name":
		if e.complexity.MstCustomer.CustName == nil {
			break
		}

		return e.complexity.MstCustomer.CustName(childComplexity), true

	case "MstCustomer.cust_num_inst":
		if e.complexity.MstCustomer.CustNumInst == nil {
			break
		}

		return e.complexity.MstCustomer.CustNumInst(childComplexity), true

	case "MstCustomer.cust_phone":
		if e.complexity.MstCustomer.CustPhone == nil {
			break
		}

		return e.complexity.MstCustomer.CustPhone(childComplexity), true

	case "MstCustomer.cust_pin":
		if e.complexity.MstCustomer.CustPin == nil {
			break
		}

		return e.complexity.MstCustomer.CustPin(childComplexity), true

	case "MstCustomer.cust_place":
		if e.complexity.MstCustomer.CustPlace == nil {
			break
		}

		return e.complexity.MstCustomer.CustPlace(childComplexity), true

	case "MstCustomer.cust_state":
		if e.complexity.MstCustomer.CustState == nil {
			break
		}

		return e.complexity.MstCustomer.CustState(childComplexity), true

	case "MstCustomer.cust_status":
		if e.complexity.MstCustomer.CustStatus == nil {
			break
		}

		return e.complexity.MstCustomer.CustStatus(childComplexity), true

	case "MstCustomer.cust_time_zone":
		if e.complexity.MstCustomer.CustTimeZone == nil {
			break
		}

		return e.complexity.MstCustomer.CustTimeZone(childComplexity), true

	case "MstCustomer.cust_url":
		if e.complexity.MstCustomer.CustURL == nil {
			break
		}

		return e.complexity.MstCustomer.CustURL(childComplexity), true

	case "MstCustomer.id":
		if e.complexity.MstCustomer.ID == nil {
			break
		}

		return e.complexity.MstCustomer.ID(childComplexity), true

	case "MstCustomerConnection.edges":
		if e.complexity.MstCustomerConnection.Edges == nil {
			break
		}

		return e.complexity.MstCustomerConnection.Edges(childComplexity), true

	case "MstCustomerConnection.pageInfo":
		if e.complexity.MstCustomerConnection.PageInfo == nil {
			break
		}

		return e.complexity.MstCustomerConnection.PageInfo(childComplexity), true

	case "MstCustomerConnection.totalCount":
		if e.complexity.MstCustomerConnection.TotalCount == nil {
			break
		}

		return e.complexity.MstCustomerConnection.TotalCount(childComplexity), true

	case "MstCustomerEdge.cursor":
		if e.complexity.MstCustomerEdge.Cursor == nil {
			break
		}

		return e.complexity.MstCustomerEdge.Cursor(childComplexity), true

	case "MstCustomerEdge.node":
		if e.complexity.MstCustomerEdge.Node == nil {
			break
		}

		return e.complexity.MstCustomerEdge.Node(childComplexity), true

	case "MstInst.id":
		if e.complexity.MstInst.ID == nil {
			break
		}

		return e.complexity.MstInst.ID(childComplexity), true

	case "MstInst.inst_address":
		if e.complexity.MstInst.InstAddress == nil {
			break
		}

		return e.complexity.MstInst.InstAddress(childComplexity), true

	case "MstInst.inst_banner_1":
		if e.complexity.MstInst.InstBanner1 == nil {
			break
		}

		return e.complexity.MstInst.InstBanner1(childComplexity), true

	case "MstInst.inst_banner_2":
		if e.complexity.MstInst.InstBanner2 == nil {
			break
		}

		return e.complexity.MstInst.InstBanner2(childComplexity), true

	case "MstInst.inst_code":
		if e.complexity.MstInst.InstCode == nil {
			break
		}

		return e.complexity.MstInst.InstCode(childComplexity), true

	case "MstInst.inst_contact_person":
		if e.complexity.MstInst.InstContactPerson == nil {
			break
		}

		return e.complexity.MstInst.InstContactPerson(childComplexity), true

	case "MstInst.inst_email":
		if e.complexity.MstInst.InstEmail == nil {
			break
		}

		return e.complexity.MstInst.InstEmail(childComplexity), true

	case "MstInst.inst_is_active":
		if e.complexity.MstInst.InstIsActive == nil {
			break
		}

		return e.complexity.MstInst.InstIsActive(childComplexity), true

	case "MstInst.inst_logo_url":
		if e.complexity.MstInst.InstLogoURL == nil {
			break
		}

		return e.complexity.MstInst.InstLogoURL(childComplexity), true

	case "MstInst.inst_mobile":
		if e.complexity.MstInst.InstMobile == nil {
			break
		}

		return e.complexity.MstInst.InstMobile(childComplexity), true

	case "MstInst.inst_name":
		if e.complexity.MstInst.InstName == nil {
			break
		}

		return e.complexity.MstInst.InstName(childComplexity), true

	case "MstInst.inst_phone":
		if e.complexity.MstInst.InstPhone == nil {
			break
		}

		return e.complexity.MstInst.InstPhone(childComplexity), true

	case "MstInst.inst_pin":
		if e.complexity.MstInst.InstPin == nil {
			break
		}

		return e.complexity.MstInst.InstPin(childComplexity), true

	case "MstInst.inst_place":
		if e.complexity.MstInst.InstPlace == nil {
			break
		}

		return e.complexity.MstInst.InstPlace(childComplexity), true

	case "MstInst.inst_short_name":
		if e.complexity.MstInst.InstShortName == nil {
			break
		}

		return e.complexity.MstInst.InstShortName(childComplexity), true

	case "MstInst.inst_state":
		if e.complexity.MstInst.InstState == nil {
			break
		}

		return e.complexity.MstInst.InstState(childComplexity), true

	case "MstInst.inst_status":
		if e.complexity.MstInst.InstStatus == nil {
			break
		}

		return e.complexity.MstInst.InstStatus(childComplexity), true

	case "MstInst.inst_time_zone":
		if e.complexity.MstInst.InstTimeZone == nil {
			break
		}

		return e.complexity.MstInst.InstTimeZone(childComplexity), true

	case "MstInst.inst_url":
		if e.complexity.MstInst.InstURL == nil {
			break
		}

		return e.complexity.MstInst.InstURL(childComplexity), true

	case "MstInstConnection.edges":
		if e.complexity.MstInstConnection.Edges == nil {
			break
		}

		return e.complexity.MstInstConnection.Edges(childComplexity), true

	case "MstInstConnection.pageInfo":
		if e.complexity.MstInstConnection.PageInfo == nil {
			break
		}

		return e.complexity.MstInstConnection.PageInfo(childComplexity), true

	case "MstInstConnection.totalCount":
		if e.complexity.MstInstConnection.TotalCount == nil {
			break
		}

		return e.complexity.MstInstConnection.TotalCount(childComplexity), true

	case "MstInstEdge.cursor":
		if e.complexity.MstInstEdge.Cursor == nil {
			break
		}

		return e.complexity.MstInstEdge.Cursor(childComplexity), true

	case "MstInstEdge.node":
		if e.complexity.MstInstEdge.Node == nil {
			break
		}

		return e.complexity.MstInstEdge.Node(childComplexity), true

	case "MstStudent.id":
		if e.complexity.MstStudent.ID == nil {
			break
		}

		return e.complexity.MstStudent.ID(childComplexity), true

	case "MstStudent.std_first_name":
		if e.complexity.MstStudent.StdFirstName == nil {
			break
		}

		return e.complexity.MstStudent.StdFirstName(childComplexity), true

	case "MstStudent.std_last_name":
		if e.complexity.MstStudent.StdLastName == nil {
			break
		}

		return e.complexity.MstStudent.StdLastName(childComplexity), true

	case "MstStudent.std_middle_name":
		if e.complexity.MstStudent.StdMiddleName == nil {
			break
		}

		return e.complexity.MstStudent.StdMiddleName(childComplexity), true

	case "MstStudent.std_reg_no":
		if e.complexity.MstStudent.StdRegNo == nil {
			break
		}

		return e.complexity.MstStudent.StdRegNo(childComplexity), true

	case "MstStudent.std_sex":
		if e.complexity.MstStudent.StdSex == nil {
			break
		}

		return e.complexity.MstStudent.StdSex(childComplexity), true

	case "MstStudent.std_status":
		if e.complexity.MstStudent.StdStatus == nil {
			break
		}

		return e.complexity.MstStudent.StdStatus(childComplexity), true

	case "MstStudent.std_studying":
		if e.complexity.MstStudent.StdStudying == nil {
			break
		}

		return e.complexity.MstStudent.StdStudying(childComplexity), true

	case "Mutation.AddAuthParentUser":
		if e.complexity.Mutation.AddAuthParentUser == nil {
			break
		}

		args, err := ec.field_Mutation_AddAuthParentUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddAuthParentUser(childComplexity, args["token"].(string), args["input"].(ent.CreateAuthParentInput)), true

	case "Mutation.AddAuthStaffUser":
		if e.complexity.Mutation.AddAuthStaffUser == nil {
			break
		}

		args, err := ec.field_Mutation_AddAuthStaffUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddAuthStaffUser(childComplexity, args["token"].(string), args["input"].(ent.CreateAuthStaffInput)), true

	case "Mutation.AddChannelMessage":
		if e.complexity.Mutation.AddChannelMessage == nil {
			break
		}

		args, err := ec.field_Mutation_AddChannelMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddChannelMessage(childComplexity, args["token"].(string), args["input"].(ent.CreateMsgChannelMessageInput)), true

	case "Mutation.AddCustomer":
		if e.complexity.Mutation.AddCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_AddCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCustomer(childComplexity, args["token"].(string), args["input"].(ent.CreateMstCustomerInput)), true

	case "Mutation.AddInst":
		if e.complexity.Mutation.AddInst == nil {
			break
		}

		args, err := ec.field_Mutation_AddInst_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddInst(childComplexity, args["token"].(string), args["input"].(ent.CreateMstInstInput)), true

	case "Mutation.AddStudent":
		if e.complexity.Mutation.AddStudent == nil {
			break
		}

		args, err := ec.field_Mutation_AddStudent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddStudent(childComplexity, args["token"].(string), args["input"].(ent.CreateMstStudentInput)), true

	case "Mutation.UpdateCustomer":
		if e.complexity.Mutation.UpdateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCustomer(childComplexity, args["token"].(string), args["id"].(int), args["input"].(ent.UpdateMstCustomerInput)), true

	case "Mutation.UpdateInst":
		if e.complexity.Mutation.UpdateInst == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateInst_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateInst(childComplexity, args["token"].(string), args["id"].(int), args["input"].(ent.UpdateMstInstInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Query.GetAuthParentUserNamesByIds":
		if e.complexity.Query.GetAuthParentUserNamesByIds == nil {
			break
		}

		args, err := ec.field_Query_GetAuthParentUserNamesByIds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAuthParentUserNamesByIds(childComplexity, args["token"].(string), args["id"].([]int)), true

	case "Query.GetAuthStaffUserIds":
		if e.complexity.Query.GetAuthStaffUserIds == nil {
			break
		}

		args, err := ec.field_Query_GetAuthStaffUserIds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAuthStaffUserIds(childComplexity, args["token"].(string), args["id"].([]int)), true

	case "Query.GetChannelMessages":
		if e.complexity.Query.GetChannelMessages == nil {
			break
		}

		args, err := ec.field_Query_GetChannelMessages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetChannelMessages(childComplexity, args["token"].(string)), true

	case "Query.GetCustomerByID":
		if e.complexity.Query.GetCustomerByID == nil {
			break
		}

		args, err := ec.field_Query_GetCustomerByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCustomerByID(childComplexity, args["token"].(string), args["id"].(int)), true

	case "Query.GetCustomerIdsByNames":
		if e.complexity.Query.GetCustomerIdsByNames == nil {
			break
		}

		args, err := ec.field_Query_GetCustomerIdsByNames_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCustomerIdsByNames(childComplexity, args["token"].(string), args["cust_names"].([]string)), true

	case "Query.GetInstByID":
		if e.complexity.Query.GetInstByID == nil {
			break
		}

		args, err := ec.field_Query_GetInstByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetInstByID(childComplexity, args["token"].(string), args["id"].(int)), true

	case "Query.GetInstIdsByNames":
		if e.complexity.Query.GetInstIdsByNames == nil {
			break
		}

		args, err := ec.field_Query_GetInstIdsByNames_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetInstIdsByNames(childComplexity, args["token"].(string), args["inst_names"].([]string)), true

	case "Query.GetStudentNamesByIds":
		if e.complexity.Query.GetStudentNamesByIds == nil {
			break
		}

		args, err := ec.field_Query_GetStudentNamesByIds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetStudentNamesByIds(childComplexity, args["token"].(string), args["id"].([]int)), true

	case "Query.ListCustomers":
		if e.complexity.Query.ListCustomers == nil {
			break
		}

		args, err := ec.field_Query_ListCustomers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListCustomers(childComplexity, args["token"].(string), args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.MstCustomerOrder)), true

	case "Query.ListInsts":
		if e.complexity.Query.ListInsts == nil {
			break
		}

		args, err := ec.field_Query_ListInsts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListInsts(childComplexity, args["token"].(string), args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.MstInstOrder)), true

	case "Query.ListInstsByCustID":
		if e.complexity.Query.ListInstsByCustID == nil {
			break
		}

		args, err := ec.field_Query_ListInstsByCustID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListInstsByCustID(childComplexity, args["token"].(string), args["customer_id"].(int), args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.MstInstOrder)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["token"].(string), args["id"].(int)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["token"].(string), args["ids"].([]int)), true

	case "Subscription.GetChannelMessagesBySubscription":
		if e.complexity.Subscription.GetChannelMessagesBySubscription == nil {
			break
		}

		args, err := ec.field_Subscription_GetChannelMessagesBySubscription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.GetChannelMessagesBySubscription(childComplexity, args["token"].(string)), true

	case "UserNamesById.first_name":
		if e.complexity.UserNamesById.FirstName == nil {
			break
		}

		return e.complexity.UserNamesById.FirstName(childComplexity), true

	case "UserNamesById.id":
		if e.complexity.UserNamesById.ID == nil {
			break
		}

		return e.complexity.UserNamesById.ID(childComplexity), true

	case "UserNamesById.last_name":
		if e.complexity.UserNamesById.LastName == nil {
			break
		}

		return e.complexity.UserNamesById.LastName(childComplexity), true

	case "UserNamesById.middle_name":
		if e.complexity.UserNamesById.MiddleName == nil {
			break
		}

		return e.complexity.UserNamesById.MiddleName(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "grpql/auth_parent.graphql", Input: `

type AuthParent implements Node {
    id:                     ID!
    parent_first_name:      String!	
    parent_middle_name:     String!
    parent_last_name:       String!
    parent_address:         String!			
    parent_place:           String!	
    parent_state:           String!
    parent_pin:             String! 
    parent_email:           String!
    parent_mobile:          String!

}

input  CreateAuthParentInput {
    parent_first_name:      String!	
    parent_middle_name:     String
    parent_last_name:       String
    parent_address:         String			
    parent_place:           String	
    parent_state:           String
    parent_pin:             String 
    parent_email:           String!
    parent_mobile:          String!    
  

}

input UpdateAuthParentInput{
    
    parent_first_name:      String!	
    parent_middle_name:     String
    parent_last_name:       String
    parent_address:         String			
    parent_place:           String	
    parent_state:           String
    parent_pin:             String 
    parent_email:           String!
    parent_mobile:          String!

  

}



extend type Query {    
    GetAuthParentUserNamesByIds(token: String!,id: [ID!]!):[UserNamesById!]!
} 



extend type Mutation {
    AddAuthParentUser( token: String!,input: CreateAuthParentInput!): AuthParent!   
    
}`, BuiltIn: false},
	{Name: "grpql/auth_staff.graphql", Input: `

type AuthStaff implements Node {
    id:                     ID!
    staff_first_name:       String!	
    staff_middle_name:      String!
    staff_last_name:        String!
    staff_address:          String!			
    staff_place:            String!	
    staff_state:            String!
    staff_pin:              String! 
    staff_email:            String!
    staff_mobile:           String!
}


input  CreateAuthStaffInput {
    staff_first_name:       String!	
    staff_middle_name:      String
    staff_last_name:        String
    staff_address:          String			
    staff_place:            String	
    staff_state:            String
    staff_pin:              String 
    staff_email:            String!
    staff_mobile:           String!    

}

input UpdateAuthStaffInput{
    
    staff_first_name:      String!	
    staff_middle_name:     String
    staff_last_name:       String
    staff_address:         String			
    staff_place:           String	
    staff_state:           String
    staff_pin:             String 
    staff_email:           String!
    staff_mobile:          String!
}





extend type Query { 
    GetAuthStaffUserIds(token: String!, id: [ID!]!):[UserNamesById!]!
} 

extend type Mutation {
    AddAuthStaffUser(token: String!, input: CreateAuthStaffInput!): AuthStaff!    
   
}`, BuiltIn: false},
	{Name: "grpql/common.graphql", Input: `

"""Maps a Time GraphQL scalar to a Go time.Time struct."""
scalar Time


"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
scalar Uint64
scalar Duration

interface Node {
  id: ID!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: Cursor
    endCursor: Cursor
}

enum OrderDirection {
    ASC
    DESC
}


""" any new enum type is added, please update the file /ent/enumtypes/isactive.go """
enum IsActive {
	ACTIVE
	INACTIVE
}
""" any new enum type is added, please update the file /ent/enumtypes/yesno.go """

enum YesNo {
	YES
	NO
}

enum StdStatus {
  CUR
  TC
  DET
  NE
}

enum Sex {
  MALE
  FEMALE
}

enum ScSt {
  SC
  ST
}

enum EntranceExam {
  CET
  COMDEK
  NEET
}

enum Region {
  KAR
  NON_KAR
}

enum RuralUrban {
  RURAL
  URBAN
}

enum SeatType {
  FREE
  PAYMENT
}

enum BloodGroup {
	A_POSITIVE
	A_NEGATIVE
  B_POSITIVE
	B_NEGATIVE
	O_POSITIVE
	O_NEGATIVE
	AB_POSITIVE
	AB_NEGATIVE
}

enum MartialStatus{
  MARRIED
  UNMARRIED
}

enum AuthGroupType {
  EDUATE
  STAFF
  STUDENT
  PARENT
}

enum EduateUserType{
  EDUATE_USER
  EDUATE_MANAGER
  EDUATE_ADMIN
  EDUATE_SYS_ADMIN
}

enum StaffUserType{
  INST_SYS_ADMIN
  INST_CHAIRMAN
  INST_PRINCIPAL
  INST_STAFF
  INST_MEMBER
  INST_HEAD
  INST_HOD
  INST_GROUP_HEAD
  INST_FACULTY
}

enum ParentType {
  FATHER
  MOTHER
  GUARDIAN
}


type UserNamesById {
  first_name:    String!
  middle_name:   String
  last_name:     String
  id:                   ID!
}


extend type Query {
  node(token: String!, id: ID!): Node
  nodes(token: String!, ids: [ID!]!): [Node]!
}

`, BuiltIn: false},
	{Name: "grpql/ent.graphql", Input: `"""
MstCustomerWhereInput is used for filtering MstCustomer objects.
Input was generated by ent.
"""
input MstCustomerWhereInput {
  not: MstCustomerWhereInput
  and: [MstCustomerWhereInput!]
  or: [MstCustomerWhereInput!]
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  
  """cust_code field predicates"""
  custCode: String
  custCodeNEQ: String
  custCodeIn: [String!]
  custCodeNotIn: [String!]
  custCodeGT: String
  custCodeGTE: String
  custCodeLT: String
  custCodeLTE: String
  custCodeContains: String
  custCodeHasPrefix: String
  custCodeHasSuffix: String
  custCodeEqualFold: String
  custCodeContainsFold: String
  
  """cust_name field predicates"""
  custName: String
  custNameNEQ: String
  custNameIn: [String!]
  custNameNotIn: [String!]
  custNameGT: String
  custNameGTE: String
  custNameLT: String
  custNameLTE: String
  custNameContains: String
  custNameHasPrefix: String
  custNameHasSuffix: String
  custNameEqualFold: String
  custNameContainsFold: String
  
  """cust_address field predicates"""
  custAddress: String
  custAddressNEQ: String
  custAddressIn: [String!]
  custAddressNotIn: [String!]
  custAddressGT: String
  custAddressGTE: String
  custAddressLT: String
  custAddressLTE: String
  custAddressContains: String
  custAddressHasPrefix: String
  custAddressHasSuffix: String
  custAddressEqualFold: String
  custAddressContainsFold: String
  
  """cust_place field predicates"""
  custPlace: String
  custPlaceNEQ: String
  custPlaceIn: [String!]
  custPlaceNotIn: [String!]
  custPlaceGT: String
  custPlaceGTE: String
  custPlaceLT: String
  custPlaceLTE: String
  custPlaceContains: String
  custPlaceHasPrefix: String
  custPlaceHasSuffix: String
  custPlaceEqualFold: String
  custPlaceContainsFold: String
  
  """cust_state field predicates"""
  custState: String
  custStateNEQ: String
  custStateIn: [String!]
  custStateNotIn: [String!]
  custStateGT: String
  custStateGTE: String
  custStateLT: String
  custStateLTE: String
  custStateContains: String
  custStateHasPrefix: String
  custStateHasSuffix: String
  custStateEqualFold: String
  custStateContainsFold: String
  
  """cust_pin field predicates"""
  custPin: String
  custPinNEQ: String
  custPinIn: [String!]
  custPinNotIn: [String!]
  custPinGT: String
  custPinGTE: String
  custPinLT: String
  custPinLTE: String
  custPinContains: String
  custPinHasPrefix: String
  custPinHasSuffix: String
  custPinEqualFold: String
  custPinContainsFold: String
  
  """cust_contact_person field predicates"""
  custContactPerson: String
  custContactPersonNEQ: String
  custContactPersonIn: [String!]
  custContactPersonNotIn: [String!]
  custContactPersonGT: String
  custContactPersonGTE: String
  custContactPersonLT: String
  custContactPersonLTE: String
  custContactPersonContains: String
  custContactPersonHasPrefix: String
  custContactPersonHasSuffix: String
  custContactPersonEqualFold: String
  custContactPersonContainsFold: String
  
  """cust_phone field predicates"""
  custPhone: String
  custPhoneNEQ: String
  custPhoneIn: [String!]
  custPhoneNotIn: [String!]
  custPhoneGT: String
  custPhoneGTE: String
  custPhoneLT: String
  custPhoneLTE: String
  custPhoneContains: String
  custPhoneHasPrefix: String
  custPhoneHasSuffix: String
  custPhoneEqualFold: String
  custPhoneContainsFold: String
  
  """cust_email field predicates"""
  custEmail: String
  custEmailNEQ: String
  custEmailIn: [String!]
  custEmailNotIn: [String!]
  custEmailGT: String
  custEmailGTE: String
  custEmailLT: String
  custEmailLTE: String
  custEmailContains: String
  custEmailHasPrefix: String
  custEmailHasSuffix: String
  custEmailEqualFold: String
  custEmailContainsFold: String
  
  """cust_mobile field predicates"""
  custMobile: String
  custMobileNEQ: String
  custMobileIn: [String!]
  custMobileNotIn: [String!]
  custMobileGT: String
  custMobileGTE: String
  custMobileLT: String
  custMobileLTE: String
  custMobileContains: String
  custMobileHasPrefix: String
  custMobileHasSuffix: String
  custMobileEqualFold: String
  custMobileContainsFold: String
  
  """cust_url field predicates"""
  custURL: String
  custURLNEQ: String
  custURLIn: [String!]
  custURLNotIn: [String!]
  custURLGT: String
  custURLGTE: String
  custURLLT: String
  custURLLTE: String
  custURLContains: String
  custURLHasPrefix: String
  custURLHasSuffix: String
  custURLEqualFold: String
  custURLContainsFold: String
  
  """cust_banner_1 field predicates"""
  custBanner1: String
  custBanner1NEQ: String
  custBanner1In: [String!]
  custBanner1NotIn: [String!]
  custBanner1GT: String
  custBanner1GTE: String
  custBanner1LT: String
  custBanner1LTE: String
  custBanner1Contains: String
  custBanner1HasPrefix: String
  custBanner1HasSuffix: String
  custBanner1EqualFold: String
  custBanner1ContainsFold: String
  
  """cust_banner_2 field predicates"""
  custBanner2: String
  custBanner2NEQ: String
  custBanner2In: [String!]
  custBanner2NotIn: [String!]
  custBanner2GT: String
  custBanner2GTE: String
  custBanner2LT: String
  custBanner2LTE: String
  custBanner2Contains: String
  custBanner2HasPrefix: String
  custBanner2HasSuffix: String
  custBanner2EqualFold: String
  custBanner2ContainsFold: String
  
  """cust_logo_url field predicates"""
  custLogoURL: String
  custLogoURLNEQ: String
  custLogoURLIn: [String!]
  custLogoURLNotIn: [String!]
  custLogoURLGT: String
  custLogoURLGTE: String
  custLogoURLLT: String
  custLogoURLLTE: String
  custLogoURLContains: String
  custLogoURLHasPrefix: String
  custLogoURLHasSuffix: String
  custLogoURLEqualFold: String
  custLogoURLContainsFold: String
  
  """cust_is_active field predicates"""
  custIsActive: IsActive
  custIsActiveNEQ: IsActive
  custIsActiveIn: [IsActive!]
  custIsActiveNotIn: [IsActive!]
  
  """cust_status field predicates"""
  custStatus: String
  custStatusNEQ: String
  custStatusIn: [String!]
  custStatusNotIn: [String!]
  custStatusGT: String
  custStatusGTE: String
  custStatusLT: String
  custStatusLTE: String
  custStatusContains: String
  custStatusHasPrefix: String
  custStatusHasSuffix: String
  custStatusEqualFold: String
  custStatusContainsFold: String
  
  """cust_num_inst field predicates"""
  custNumInst: Int
  custNumInstNEQ: Int
  custNumInstIn: [Int!]
  custNumInstNotIn: [Int!]
  custNumInstGT: Int
  custNumInstGTE: Int
  custNumInstLT: Int
  custNumInstLTE: Int
  
  """cust_time_zone field predicates"""
  custTimeZone: Time
  custTimeZoneNEQ: Time
  custTimeZoneIn: [Time!]
  custTimeZoneNotIn: [Time!]
  custTimeZoneGT: Time
  custTimeZoneGTE: Time
  custTimeZoneLT: Time
  custTimeZoneLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """Cust2Inst edge predicates"""
  hasCust2Inst: Boolean
  hasCust2InstWith: [MstInstWhereInput!]
}

"""
MstInstWhereInput is used for filtering MstInst objects.
Input was generated by ent.
"""
input MstInstWhereInput {
  not: MstInstWhereInput
  and: [MstInstWhereInput!]
  or: [MstInstWhereInput!]
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  
  """inst_code field predicates"""
  instCode: String
  instCodeNEQ: String
  instCodeIn: [String!]
  instCodeNotIn: [String!]
  instCodeGT: String
  instCodeGTE: String
  instCodeLT: String
  instCodeLTE: String
  instCodeContains: String
  instCodeHasPrefix: String
  instCodeHasSuffix: String
  instCodeEqualFold: String
  instCodeContainsFold: String
  
  """inst_name field predicates"""
  instName: String
  instNameNEQ: String
  instNameIn: [String!]
  instNameNotIn: [String!]
  instNameGT: String
  instNameGTE: String
  instNameLT: String
  instNameLTE: String
  instNameContains: String
  instNameHasPrefix: String
  instNameHasSuffix: String
  instNameEqualFold: String
  instNameContainsFold: String
  
  """inst_short_name field predicates"""
  instShortName: String
  instShortNameNEQ: String
  instShortNameIn: [String!]
  instShortNameNotIn: [String!]
  instShortNameGT: String
  instShortNameGTE: String
  instShortNameLT: String
  instShortNameLTE: String
  instShortNameContains: String
  instShortNameHasPrefix: String
  instShortNameHasSuffix: String
  instShortNameEqualFold: String
  instShortNameContainsFold: String
  
  """inst_address field predicates"""
  instAddress: String
  instAddressNEQ: String
  instAddressIn: [String!]
  instAddressNotIn: [String!]
  instAddressGT: String
  instAddressGTE: String
  instAddressLT: String
  instAddressLTE: String
  instAddressContains: String
  instAddressHasPrefix: String
  instAddressHasSuffix: String
  instAddressEqualFold: String
  instAddressContainsFold: String
  
  """inst_place field predicates"""
  instPlace: String
  instPlaceNEQ: String
  instPlaceIn: [String!]
  instPlaceNotIn: [String!]
  instPlaceGT: String
  instPlaceGTE: String
  instPlaceLT: String
  instPlaceLTE: String
  instPlaceContains: String
  instPlaceHasPrefix: String
  instPlaceHasSuffix: String
  instPlaceEqualFold: String
  instPlaceContainsFold: String
  
  """inst_state field predicates"""
  instState: String
  instStateNEQ: String
  instStateIn: [String!]
  instStateNotIn: [String!]
  instStateGT: String
  instStateGTE: String
  instStateLT: String
  instStateLTE: String
  instStateContains: String
  instStateHasPrefix: String
  instStateHasSuffix: String
  instStateEqualFold: String
  instStateContainsFold: String
  
  """inst_pin field predicates"""
  instPin: String
  instPinNEQ: String
  instPinIn: [String!]
  instPinNotIn: [String!]
  instPinGT: String
  instPinGTE: String
  instPinLT: String
  instPinLTE: String
  instPinContains: String
  instPinHasPrefix: String
  instPinHasSuffix: String
  instPinEqualFold: String
  instPinContainsFold: String
  
  """inst_contact_person field predicates"""
  instContactPerson: String
  instContactPersonNEQ: String
  instContactPersonIn: [String!]
  instContactPersonNotIn: [String!]
  instContactPersonGT: String
  instContactPersonGTE: String
  instContactPersonLT: String
  instContactPersonLTE: String
  instContactPersonContains: String
  instContactPersonHasPrefix: String
  instContactPersonHasSuffix: String
  instContactPersonEqualFold: String
  instContactPersonContainsFold: String
  
  """inst_phone field predicates"""
  instPhone: String
  instPhoneNEQ: String
  instPhoneIn: [String!]
  instPhoneNotIn: [String!]
  instPhoneGT: String
  instPhoneGTE: String
  instPhoneLT: String
  instPhoneLTE: String
  instPhoneContains: String
  instPhoneHasPrefix: String
  instPhoneHasSuffix: String
  instPhoneEqualFold: String
  instPhoneContainsFold: String
  
  """inst_email field predicates"""
  instEmail: String
  instEmailNEQ: String
  instEmailIn: [String!]
  instEmailNotIn: [String!]
  instEmailGT: String
  instEmailGTE: String
  instEmailLT: String
  instEmailLTE: String
  instEmailContains: String
  instEmailHasPrefix: String
  instEmailHasSuffix: String
  instEmailEqualFold: String
  instEmailContainsFold: String
  
  """inst_mobile field predicates"""
  instMobile: String
  instMobileNEQ: String
  instMobileIn: [String!]
  instMobileNotIn: [String!]
  instMobileGT: String
  instMobileGTE: String
  instMobileLT: String
  instMobileLTE: String
  instMobileContains: String
  instMobileHasPrefix: String
  instMobileHasSuffix: String
  instMobileEqualFold: String
  instMobileContainsFold: String
  
  """inst_url field predicates"""
  instURL: String
  instURLNEQ: String
  instURLIn: [String!]
  instURLNotIn: [String!]
  instURLGT: String
  instURLGTE: String
  instURLLT: String
  instURLLTE: String
  instURLContains: String
  instURLHasPrefix: String
  instURLHasSuffix: String
  instURLEqualFold: String
  instURLContainsFold: String
  
  """inst_banner_1 field predicates"""
  instBanner1: String
  instBanner1NEQ: String
  instBanner1In: [String!]
  instBanner1NotIn: [String!]
  instBanner1GT: String
  instBanner1GTE: String
  instBanner1LT: String
  instBanner1LTE: String
  instBanner1Contains: String
  instBanner1HasPrefix: String
  instBanner1HasSuffix: String
  instBanner1EqualFold: String
  instBanner1ContainsFold: String
  
  """inst_banner_2 field predicates"""
  instBanner2: String
  instBanner2NEQ: String
  instBanner2In: [String!]
  instBanner2NotIn: [String!]
  instBanner2GT: String
  instBanner2GTE: String
  instBanner2LT: String
  instBanner2LTE: String
  instBanner2Contains: String
  instBanner2HasPrefix: String
  instBanner2HasSuffix: String
  instBanner2EqualFold: String
  instBanner2ContainsFold: String
  
  """inst_logo_url field predicates"""
  instLogoURL: String
  instLogoURLNEQ: String
  instLogoURLIn: [String!]
  instLogoURLNotIn: [String!]
  instLogoURLGT: String
  instLogoURLGTE: String
  instLogoURLLT: String
  instLogoURLLTE: String
  instLogoURLContains: String
  instLogoURLHasPrefix: String
  instLogoURLHasSuffix: String
  instLogoURLEqualFold: String
  instLogoURLContainsFold: String
  
  """inst_is_active field predicates"""
  instIsActive: IsActive
  instIsActiveNEQ: IsActive
  instIsActiveIn: [IsActive!]
  instIsActiveNotIn: [IsActive!]
  
  """inst_status field predicates"""
  instStatus: String
  instStatusNEQ: String
  instStatusIn: [String!]
  instStatusNotIn: [String!]
  instStatusGT: String
  instStatusGTE: String
  instStatusLT: String
  instStatusLTE: String
  instStatusContains: String
  instStatusHasPrefix: String
  instStatusHasSuffix: String
  instStatusEqualFold: String
  instStatusContainsFold: String
  
  """inst_time_zone field predicates"""
  instTimeZone: Time
  instTimeZoneNEQ: Time
  instTimeZoneIn: [Time!]
  instTimeZoneNotIn: [Time!]
  instTimeZoneGT: Time
  instTimeZoneGTE: Time
  instTimeZoneLT: Time
  instTimeZoneLTE: Time
  
  """customer_id field predicates"""
  customerID: ID
  customerIDNEQ: ID
  customerIDIn: [ID!]
  customerIDNotIn: [ID!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """InstfromCust edge predicates"""
  hasInstfromCust: Boolean
  hasInstfromCustWith: [MstCustomerWhereInput!]
}

"""
MstStudentWhereInput is used for filtering MstStudent objects.
Input was generated by ent.
"""
input MstStudentWhereInput {
  not: MstStudentWhereInput
  and: [MstStudentWhereInput!]
  or: [MstStudentWhereInput!]
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  
  """std_first_name field predicates"""
  stdFirstName: String
  stdFirstNameNEQ: String
  stdFirstNameIn: [String!]
  stdFirstNameNotIn: [String!]
  stdFirstNameGT: String
  stdFirstNameGTE: String
  stdFirstNameLT: String
  stdFirstNameLTE: String
  stdFirstNameContains: String
  stdFirstNameHasPrefix: String
  stdFirstNameHasSuffix: String
  stdFirstNameEqualFold: String
  stdFirstNameContainsFold: String
  
  """std_middle_name field predicates"""
  stdMiddleName: String
  stdMiddleNameNEQ: String
  stdMiddleNameIn: [String!]
  stdMiddleNameNotIn: [String!]
  stdMiddleNameGT: String
  stdMiddleNameGTE: String
  stdMiddleNameLT: String
  stdMiddleNameLTE: String
  stdMiddleNameContains: String
  stdMiddleNameHasPrefix: String
  stdMiddleNameHasSuffix: String
  stdMiddleNameEqualFold: String
  stdMiddleNameContainsFold: String
  
  """std_last_name field predicates"""
  stdLastName: String
  stdLastNameNEQ: String
  stdLastNameIn: [String!]
  stdLastNameNotIn: [String!]
  stdLastNameGT: String
  stdLastNameGTE: String
  stdLastNameLT: String
  stdLastNameLTE: String
  stdLastNameContains: String
  stdLastNameHasPrefix: String
  stdLastNameHasSuffix: String
  stdLastNameEqualFold: String
  stdLastNameContainsFold: String
  
  """std_studying field predicates"""
  stdStudying: Boolean
  stdStudyingNEQ: Boolean
  
  """std_status field predicates"""
  stdStatus: StdStatus
  stdStatusNEQ: StdStatus
  stdStatusIn: [StdStatus!]
  stdStatusNotIn: [StdStatus!]
  
  """std_sex field predicates"""
  stdSex: Sex
  stdSexNEQ: Sex
  stdSexIn: [Sex!]
  stdSexNotIn: [Sex!]
  
  """std_reg_no field predicates"""
  stdRegNo: String
  stdRegNoNEQ: String
  stdRegNoIn: [String!]
  stdRegNoNotIn: [String!]
  stdRegNoGT: String
  stdRegNoGTE: String
  stdRegNoLT: String
  stdRegNoLTE: String
  stdRegNoContains: String
  stdRegNoHasPrefix: String
  stdRegNoHasSuffix: String
  stdRegNoEqualFold: String
  stdRegNoContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}

"""
AuthParentWhereInput is used for filtering AuthParent objects.
Input was generated by ent.
"""
input AuthParentWhereInput {
  not: AuthParentWhereInput
  and: [AuthParentWhereInput!]
  or: [AuthParentWhereInput!]
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  
  """parent_first_name field predicates"""
  parentFirstName: String
  parentFirstNameNEQ: String
  parentFirstNameIn: [String!]
  parentFirstNameNotIn: [String!]
  parentFirstNameGT: String
  parentFirstNameGTE: String
  parentFirstNameLT: String
  parentFirstNameLTE: String
  parentFirstNameContains: String
  parentFirstNameHasPrefix: String
  parentFirstNameHasSuffix: String
  parentFirstNameEqualFold: String
  parentFirstNameContainsFold: String
  
  """parent_middle_name field predicates"""
  parentMiddleName: String
  parentMiddleNameNEQ: String
  parentMiddleNameIn: [String!]
  parentMiddleNameNotIn: [String!]
  parentMiddleNameGT: String
  parentMiddleNameGTE: String
  parentMiddleNameLT: String
  parentMiddleNameLTE: String
  parentMiddleNameContains: String
  parentMiddleNameHasPrefix: String
  parentMiddleNameHasSuffix: String
  parentMiddleNameEqualFold: String
  parentMiddleNameContainsFold: String
  
  """parent_last_name field predicates"""
  parentLastName: String
  parentLastNameNEQ: String
  parentLastNameIn: [String!]
  parentLastNameNotIn: [String!]
  parentLastNameGT: String
  parentLastNameGTE: String
  parentLastNameLT: String
  parentLastNameLTE: String
  parentLastNameContains: String
  parentLastNameHasPrefix: String
  parentLastNameHasSuffix: String
  parentLastNameEqualFold: String
  parentLastNameContainsFold: String
  
  """parent_address field predicates"""
  parentAddress: String
  parentAddressNEQ: String
  parentAddressIn: [String!]
  parentAddressNotIn: [String!]
  parentAddressGT: String
  parentAddressGTE: String
  parentAddressLT: String
  parentAddressLTE: String
  parentAddressContains: String
  parentAddressHasPrefix: String
  parentAddressHasSuffix: String
  parentAddressEqualFold: String
  parentAddressContainsFold: String
  
  """parent_place field predicates"""
  parentPlace: String
  parentPlaceNEQ: String
  parentPlaceIn: [String!]
  parentPlaceNotIn: [String!]
  parentPlaceGT: String
  parentPlaceGTE: String
  parentPlaceLT: String
  parentPlaceLTE: String
  parentPlaceContains: String
  parentPlaceHasPrefix: String
  parentPlaceHasSuffix: String
  parentPlaceEqualFold: String
  parentPlaceContainsFold: String
  
  """parent_state field predicates"""
  parentState: String
  parentStateNEQ: String
  parentStateIn: [String!]
  parentStateNotIn: [String!]
  parentStateGT: String
  parentStateGTE: String
  parentStateLT: String
  parentStateLTE: String
  parentStateContains: String
  parentStateHasPrefix: String
  parentStateHasSuffix: String
  parentStateEqualFold: String
  parentStateContainsFold: String
  
  """parent_pin field predicates"""
  parentPin: String
  parentPinNEQ: String
  parentPinIn: [String!]
  parentPinNotIn: [String!]
  parentPinGT: String
  parentPinGTE: String
  parentPinLT: String
  parentPinLTE: String
  parentPinContains: String
  parentPinHasPrefix: String
  parentPinHasSuffix: String
  parentPinEqualFold: String
  parentPinContainsFold: String
  
  """parent_email field predicates"""
  parentEmail: String
  parentEmailNEQ: String
  parentEmailIn: [String!]
  parentEmailNotIn: [String!]
  parentEmailGT: String
  parentEmailGTE: String
  parentEmailLT: String
  parentEmailLTE: String
  parentEmailContains: String
  parentEmailHasPrefix: String
  parentEmailHasSuffix: String
  parentEmailEqualFold: String
  parentEmailContainsFold: String
  
  """parent_mobile field predicates"""
  parentMobile: String
  parentMobileNEQ: String
  parentMobileIn: [String!]
  parentMobileNotIn: [String!]
  parentMobileGT: String
  parentMobileGTE: String
  parentMobileLT: String
  parentMobileLTE: String
  parentMobileContains: String
  parentMobileHasPrefix: String
  parentMobileHasSuffix: String
  parentMobileEqualFold: String
  parentMobileContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}

"""
AuthStaffWhereInput is used for filtering AuthStaff objects.
Input was generated by ent.
"""
input AuthStaffWhereInput {
  not: AuthStaffWhereInput
  and: [AuthStaffWhereInput!]
  or: [AuthStaffWhereInput!]
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  
  """staff_first_name field predicates"""
  staffFirstName: String
  staffFirstNameNEQ: String
  staffFirstNameIn: [String!]
  staffFirstNameNotIn: [String!]
  staffFirstNameGT: String
  staffFirstNameGTE: String
  staffFirstNameLT: String
  staffFirstNameLTE: String
  staffFirstNameContains: String
  staffFirstNameHasPrefix: String
  staffFirstNameHasSuffix: String
  staffFirstNameEqualFold: String
  staffFirstNameContainsFold: String
  
  """staff_middle_name field predicates"""
  staffMiddleName: String
  staffMiddleNameNEQ: String
  staffMiddleNameIn: [String!]
  staffMiddleNameNotIn: [String!]
  staffMiddleNameGT: String
  staffMiddleNameGTE: String
  staffMiddleNameLT: String
  staffMiddleNameLTE: String
  staffMiddleNameContains: String
  staffMiddleNameHasPrefix: String
  staffMiddleNameHasSuffix: String
  staffMiddleNameEqualFold: String
  staffMiddleNameContainsFold: String
  
  """staff_last_name field predicates"""
  staffLastName: String
  staffLastNameNEQ: String
  staffLastNameIn: [String!]
  staffLastNameNotIn: [String!]
  staffLastNameGT: String
  staffLastNameGTE: String
  staffLastNameLT: String
  staffLastNameLTE: String
  staffLastNameContains: String
  staffLastNameHasPrefix: String
  staffLastNameHasSuffix: String
  staffLastNameEqualFold: String
  staffLastNameContainsFold: String
  
  """staff_address field predicates"""
  staffAddress: String
  staffAddressNEQ: String
  staffAddressIn: [String!]
  staffAddressNotIn: [String!]
  staffAddressGT: String
  staffAddressGTE: String
  staffAddressLT: String
  staffAddressLTE: String
  staffAddressContains: String
  staffAddressHasPrefix: String
  staffAddressHasSuffix: String
  staffAddressEqualFold: String
  staffAddressContainsFold: String
  
  """staff_place field predicates"""
  staffPlace: String
  staffPlaceNEQ: String
  staffPlaceIn: [String!]
  staffPlaceNotIn: [String!]
  staffPlaceGT: String
  staffPlaceGTE: String
  staffPlaceLT: String
  staffPlaceLTE: String
  staffPlaceContains: String
  staffPlaceHasPrefix: String
  staffPlaceHasSuffix: String
  staffPlaceEqualFold: String
  staffPlaceContainsFold: String
  
  """staff_state field predicates"""
  staffState: String
  staffStateNEQ: String
  staffStateIn: [String!]
  staffStateNotIn: [String!]
  staffStateGT: String
  staffStateGTE: String
  staffStateLT: String
  staffStateLTE: String
  staffStateContains: String
  staffStateHasPrefix: String
  staffStateHasSuffix: String
  staffStateEqualFold: String
  staffStateContainsFold: String
  
  """staff_pin field predicates"""
  staffPin: String
  staffPinNEQ: String
  staffPinIn: [String!]
  staffPinNotIn: [String!]
  staffPinGT: String
  staffPinGTE: String
  staffPinLT: String
  staffPinLTE: String
  staffPinContains: String
  staffPinHasPrefix: String
  staffPinHasSuffix: String
  staffPinEqualFold: String
  staffPinContainsFold: String
  
  """staff_email field predicates"""
  staffEmail: String
  staffEmailNEQ: String
  staffEmailIn: [String!]
  staffEmailNotIn: [String!]
  staffEmailGT: String
  staffEmailGTE: String
  staffEmailLT: String
  staffEmailLTE: String
  staffEmailContains: String
  staffEmailHasPrefix: String
  staffEmailHasSuffix: String
  staffEmailEqualFold: String
  staffEmailContainsFold: String
  
  """staff_mobile field predicates"""
  staffMobile: String
  staffMobileNEQ: String
  staffMobileIn: [String!]
  staffMobileNotIn: [String!]
  staffMobileGT: String
  staffMobileGTE: String
  staffMobileLT: String
  staffMobileLTE: String
  staffMobileContains: String
  staffMobileHasPrefix: String
  staffMobileHasSuffix: String
  staffMobileEqualFold: String
  staffMobileContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}

"""
MsgChannelMessageWhereInput is used for filtering MsgChannelMessage objects.
Input was generated by ent.
"""
input MsgChannelMessageWhereInput {
  not: MsgChannelMessageWhereInput
  and: [MsgChannelMessageWhereInput!]
  or: [MsgChannelMessageWhereInput!]
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  
  """msg_date field predicates"""
  msgDate: Time
  msgDateNEQ: Time
  msgDateIn: [Time!]
  msgDateNotIn: [Time!]
  msgDateGT: Time
  msgDateGTE: Time
  msgDateLT: Time
  msgDateLTE: Time
  msgDateIsNil: Boolean
  msgDateNotNil: Boolean
  
  """msg_is_expiry field predicates"""
  msgIsExpiry: Boolean
  msgIsExpiryNEQ: Boolean
  
  """msg_expiry_date field predicates"""
  msgExpiryDate: Time
  msgExpiryDateNEQ: Time
  msgExpiryDateIn: [Time!]
  msgExpiryDateNotIn: [Time!]
  msgExpiryDateGT: Time
  msgExpiryDateGTE: Time
  msgExpiryDateLT: Time
  msgExpiryDateLTE: Time
  msgExpiryDateIsNil: Boolean
  msgExpiryDateNotNil: Boolean
  
  """msg_is_text field predicates"""
  msgIsText: Boolean
  msgIsTextNEQ: Boolean
  
  """msg_content field predicates"""
  msgContent: String
  msgContentNEQ: String
  msgContentIn: [String!]
  msgContentNotIn: [String!]
  msgContentGT: String
  msgContentGTE: String
  msgContentLT: String
  msgContentLTE: String
  msgContentContains: String
  msgContentHasPrefix: String
  msgContentHasSuffix: String
  msgContentEqualFold: String
  msgContentContainsFold: String
  
  """msg_media_type field predicates"""
  msgMediaType: String
  msgMediaTypeNEQ: String
  msgMediaTypeIn: [String!]
  msgMediaTypeNotIn: [String!]
  msgMediaTypeGT: String
  msgMediaTypeGTE: String
  msgMediaTypeLT: String
  msgMediaTypeLTE: String
  msgMediaTypeContains: String
  msgMediaTypeHasPrefix: String
  msgMediaTypeHasSuffix: String
  msgMediaTypeEqualFold: String
  msgMediaTypeContainsFold: String
  
  """msg_media_content field predicates"""
  msgMediaContent: String
  msgMediaContentNEQ: String
  msgMediaContentIn: [String!]
  msgMediaContentNotIn: [String!]
  msgMediaContentGT: String
  msgMediaContentGTE: String
  msgMediaContentLT: String
  msgMediaContentLTE: String
  msgMediaContentContains: String
  msgMediaContentHasPrefix: String
  msgMediaContentHasSuffix: String
  msgMediaContentEqualFold: String
  msgMediaContentContainsFold: String
  
  """msg_active field predicates"""
  msgActive: Boolean
  msgActiveNEQ: Boolean
  
  """msg_is_individual field predicates"""
  msgIsIndividual: Boolean
  msgIsIndividualNEQ: Boolean
  
  """msg_recv_or_sent field predicates"""
  msgRecvOrSent: String
  msgRecvOrSentNEQ: String
  msgRecvOrSentIn: [String!]
  msgRecvOrSentNotIn: [String!]
  msgRecvOrSentGT: String
  msgRecvOrSentGTE: String
  msgRecvOrSentLT: String
  msgRecvOrSentLTE: String
  msgRecvOrSentContains: String
  msgRecvOrSentHasPrefix: String
  msgRecvOrSentHasSuffix: String
  msgRecvOrSentEqualFold: String
  msgRecvOrSentContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
`, BuiltIn: false},
	{Name: "grpql/msg_channel_message.graphql", Input: `type MsgChannelMessageConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [MsgChannelMessageEdge]
}

type MsgChannelMessageEdge {
  node: MsgChannelMessage
  cursor: Cursor!
}

# These enums are matched the entgql annotations in the ent/schema/MsgChannelMessage.go
enum MsgChannelMessageOrderField {
  CREATED_AT
}

input MsgChannelMessageOrder {
  direction: OrderDirection!
  field: MsgChannelMessageOrderField
}

type MsgChannelMessage implements Node {
  id:                 ID!
  msg_date:           Time!
  msg_is_expiry:      Boolean!
  msg_expiry_date:    Time!
  msg_is_text:        Boolean!
  msg_content:        String!
  msg_media_type:     String!
  msg_media_content:  String!
  msg_active:         Boolean!
  msg_is_individual:  Boolean!
  msg_recv_or_sent:   String!
  created_at:         Time!     


}

input CreateMsgChannelMessageInput {
  msg_date: Time
  msg_is_expiry: Boolean
  msg_expiry_date: Time
  msg_is_text: Boolean
  msg_content: String
  msg_media_type: String
  msg_media_content: String
  msg_active: Boolean
  msg_is_individual: Boolean
  msg_recv_or_sent: String

}

input UpdateMsgChannelMessageInput {
  msg_date: Time
  msg_is_expiry: Boolean
  msg_expiry_date: Time
  msg_is_text: Boolean
  msg_content: String!
  msg_media_type: String
  msg_media_content: String
  msg_active: Boolean
  msg_is_individual: Boolean
  msg_recv_or_sent: String

}

extend type Query {
  GetChannelMessages(token: String! ): [MsgChannelMessage!]
}

extend type Mutation {
  AddChannelMessage(token: String!   input: CreateMsgChannelMessageInput!  ): MsgChannelMessage!
}


extend type Subscription {
 GetChannelMessagesBySubscription(token: String!):[MsgChannelMessage!]
}`, BuiltIn: false},
	{Name: "grpql/mst_cust.graphql", Input: `

type MstCustomerConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [MstCustomerEdge]
}

type MstCustomerEdge {
    node: MstCustomer
    cursor: Cursor!
}

# These enums are matched the entgql annotations in the ent/schema/mstcustomer.go
enum MstCustomerOrderField {
    CUST_CODE
    CUST_NAME
    CUST_PLACE
    CUST_CONTACT_PERSON
    CUST_PHONE
    CUST_STATUS
}


input MstCustomerOrder {
    direction: OrderDirection!
    field: MstCustomerOrderField
}

type MstCustomer  implements Node {
    id: ID!
    cust_code:          String!	
    cust_name:          String!	
    cust_address:       String!			
    cust_place:         String!	
    cust_state:         String!
    cust_pin:           String!    
    cust_contact_person:String!			
    cust_phone:         String!
    cust_email:         String!
    cust_mobile:        String!	    			
    cust_url:           String!			
    cust_banner_1:      String!		
    cust_banner_2:      String!			
    cust_logo_url:      String!
    cust_is_active:     IsActive!  
    cust_status:        String!
    cust_num_inst:      Int!
    cust_time_zone:     Time!
  }

# Define an input type for the mutation below.
# https://graphql.org/learn/schema/#input-types

input CreateMstCustomerInput {
    cust_code:          String	
    cust_name:          String!	
    cust_address:       String			
    cust_place:         String	
    cust_state:         String
    cust_pin:           String    
    cust_contact_person:String			
    cust_phone:         String
    cust_email:         String
    cust_mobile:        String	    			
    cust_url:           String			
    cust_banner_1:      String		
    cust_banner_2:      String			
    cust_logo_url:      String
    cust_is_active:     IsActive  
    cust_status:        String
    cust_time_zone:     Time
		
}

input UpdateMstCustomerInput {
    cust_code:          String	
    cust_name:          String!	
    cust_address:       String			
    cust_place:         String	
    cust_state:         String
    cust_pin:           String    
    cust_contact_person:String			
    cust_phone:         String
    cust_email:         String
    cust_mobile:        String	    			
    cust_url:           String			
    cust_banner_1:      String		
    cust_banner_2:      String			
    cust_logo_url:      String
    cust_is_active:     IsActive  
    cust_status:        String
    cust_time_zone:     Time
}

type CustData {
    customer_name:  String!
    id:             ID!
}


extend type Query {
    ListCustomers(token: String!, 
        after: Cursor, 
        first: Int, 
        before: Cursor, 
        last: Int,
        orderBy: MstCustomerOrder
       ):MstCustomerConnection

    GetCustomerByID(token: String!, id: ID!):MstCustomer!
   
    GetCustomerIdsByNames(token: String!, cust_names: [String!]):[CustData!]!

}


extend type Mutation {
  AddCustomer(token: String!, input: CreateMstCustomerInput!): MstCustomer!
  UpdateCustomer(token: String!, id: ID!, input: UpdateMstCustomerInput!): MstCustomer! 
}`, BuiltIn: false},
	{Name: "grpql/mst_inst.graphql", Input: `
type MstInstConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [MstInstEdge]
}

type MstInstEdge {
    node: MstInst
    cursor: Cursor!
}

# These enums are matched the entgql annotations in the ent/schema/mstinst.go
enum MstInstOrderField {
    INST_CODE
    INST_NAME
    INST_PLACE
    INST_CONTACT_PERSON
    INST_PHONE
    INST_STATUS
}


input MstInstOrder {
    direction: OrderDirection!
    field: MstInstOrderField
}



type MstInst implements Node {
    id: ID!
    inst_code:              String!	
    inst_name:              String!	
    inst_short_name:        String!		
    inst_address:           String!			
    inst_place:             String!	
    inst_state:             String!
    inst_pin:               String!    
    inst_contact_person:    String!			
    inst_phone:             String!
    inst_email:             String!
    inst_mobile:            String!	    			
    inst_url:               String!			
    inst_banner_1:          String!		
    inst_banner_2:          String!			
    inst_logo_url:          String!
    inst_is_active:         IsActive!  
    inst_status:            String! 
    inst_time_zone:         Time!



}


input CreateMstInstInput {

    inst_code:              String	
    inst_name:              String!	
    inst_short_name:        String		
    inst_address:           String			
    inst_place:             String	
    inst_state:             String
    inst_pin:               String    
    inst_contact_person:    String			
    inst_phone:             String
    inst_email:             String
    inst_mobile:            String	    			
    inst_url:               String			
    inst_banner_1:          String		
    inst_banner_2:          String			
    inst_logo_url:          String
    inst_is_active:         IsActive  
    inst_status:            String
    inst_time_zone:         Time  


}

input UpdateMstInstInput {
    inst_code:              String	
    inst_name:              String!	
    inst_short_name:        String		
    inst_address:           String			
    inst_place:             String	
    inst_state:             String
    inst_pin:               String    
    inst_contact_person:    String			
    inst_phone:             String
    inst_email:             String
    inst_mobile:            String	    			
    inst_url:               String			
    inst_banner_1:          String		
    inst_banner_2:          String			
    inst_logo_url:          String
    inst_is_active:         IsActive  
    inst_status:            String
    inst_time_zone:         Time  
}


type InstData {
    Inst_name:  String!
    id:             ID!
}


extend type Query {

    ListInsts(token: String!, 
        after: Cursor, 
        first: Int, 
        before: Cursor, 
        last: Int,
        orderBy: MstInstOrder
        ):MstInstConnection
    


    ListInstsByCustID(token: String!, 
        customer_id: ID!,
        after: Cursor, 
        first: Int, 
        before: Cursor, 
        last: Int,
        orderBy: MstInstOrder
        ):MstInstConnection

    GetInstByID(token: String!, id: ID!):MstInst!
    GetInstIdsByNames(token: String!, inst_names: [String!]):[InstData!]!

}


extend type Mutation {
  AddInst(token: String!, input: CreateMstInstInput!): MstInst!
  UpdateInst(token: String!, id: ID!, input: UpdateMstInstInput!): MstInst!
}`, BuiltIn: false},
	{Name: "grpql/mst_student.graphql", Input: `
type MstStudent implements Node {
  id: ID!
  std_first_name: String!
  std_middle_name: String!
  std_last_name: String!
  std_studying: Boolean!
  std_status: StdStatus!
  std_sex: Sex!
  std_reg_no: String!
  
}

input CreateMstStudentInput {
  std_first_name: String!
  std_middle_name: String
  std_last_name: String
  std_studying: Boolean
  std_status: StdStatus
  std_sex: Sex
  std_reg_no: String
 
}

input UpdateMstStudentInput {
  std_first_name: String!
  std_middle_name: String
  std_last_name: String
  std_studying: Boolean
  std_status: StdStatus
  std_sex: Sex
  std_reg_no: String
 
}



extend type Query {
  GetStudentNamesByIds(token: String!, id: [ID!]!):[UserNamesById!]!
}

extend type Mutation {
  AddStudent(token: String!, input: CreateMstStudentInput!): MstStudent!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_AddAuthParentUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 ent.CreateAuthParentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCreateAuthParentInput2myeduateᚋentᚐCreateAuthParentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_AddAuthStaffUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 ent.CreateAuthStaffInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCreateAuthStaffInput2myeduateᚋentᚐCreateAuthStaffInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_AddChannelMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 ent.CreateMsgChannelMessageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCreateMsgChannelMessageInput2myeduateᚋentᚐCreateMsgChannelMessageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_AddCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 ent.CreateMstCustomerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCreateMstCustomerInput2myeduateᚋentᚐCreateMstCustomerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_AddInst_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 ent.CreateMstInstInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCreateMstInstInput2myeduateᚋentᚐCreateMstInstInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_AddStudent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 ent.CreateMstStudentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCreateMstStudentInput2myeduateᚋentᚐCreateMstStudentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	var arg2 ent.UpdateMstCustomerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateMstCustomerInput2myeduateᚋentᚐUpdateMstCustomerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateInst_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	var arg2 ent.UpdateMstInstInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateMstInstInput2myeduateᚋentᚐUpdateMstInstInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_GetAuthParentUserNamesByIds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 []int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2ᚕintᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_GetAuthStaffUserIds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 []int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2ᚕintᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_GetChannelMessages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetCustomerByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_GetCustomerIdsByNames_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["cust_names"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_names"))
		arg1, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cust_names"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_GetInstByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_GetInstIdsByNames_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["inst_names"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_names"))
		arg1, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inst_names"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_GetStudentNamesByIds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 []int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2ᚕintᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_ListCustomers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	var arg5 *ent.MstCustomerOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg5, err = ec.unmarshalOMstCustomerOrder2ᚖmyeduateᚋentᚐMstCustomerOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_ListInstsByCustID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["customer_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_id"))
		arg1, err = ec.unmarshalNID2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["customer_id"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	var arg5 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg5, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg5
	var arg6 *ent.MstInstOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg6, err = ec.unmarshalOMstInstOrder2ᚖmyeduateᚋentᚐMstInstOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_ListInsts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	var arg5 *ent.MstInstOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg5, err = ec.unmarshalOMstInstOrder2ᚖmyeduateᚋentᚐMstInstOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 []int
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg1, err = ec.unmarshalNID2ᚕintᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_GetChannelMessagesBySubscription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AuthParent_id(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthParent_parent_first_name(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentFirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthParent_parent_middle_name(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentMiddleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthParent_parent_last_name(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentLastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthParent_parent_address(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthParent_parent_place(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentPlace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthParent_parent_state(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthParent_parent_pin(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentPin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthParent_parent_email(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthParent_parent_mobile(ctx context.Context, field graphql.CollectedField, obj *ent.AuthParent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthParent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentMobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_id(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_staff_first_name(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffFirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_staff_middle_name(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffMiddleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_staff_last_name(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffLastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_staff_address(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_staff_place(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffPlace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_staff_state(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_staff_pin(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffPin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_staff_email(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthStaff_staff_mobile(ctx context.Context, field graphql.CollectedField, obj *ent.AuthStaff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthStaff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffMobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustData_customer_name(ctx context.Context, field graphql.CollectedField, obj *CustData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustData_id(ctx context.Context, field graphql.CollectedField, obj *CustData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CustData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _InstData_Inst_name(ctx context.Context, field graphql.CollectedField, obj *InstData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InstData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _InstData_id(ctx context.Context, field graphql.CollectedField, obj *InstData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InstData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_id(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_date(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_is_expiry(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgIsExpiry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_expiry_date(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_is_text(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgIsText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_content(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_media_type(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgMediaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_media_content(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgMediaContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_active(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_is_individual(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgIsIndividual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_msg_recv_or_sent(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsgRecvOrSent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessage_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessageConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessageConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessageConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2myeduateᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessageConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessageConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MsgChannelMessageEdge)
	fc.Result = res
	return ec.marshalOMsgChannelMessageEdge2ᚕᚖmyeduateᚋentᚐMsgChannelMessageEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessageEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessageEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessageEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.MsgChannelMessage)
	fc.Result = res
	return ec.marshalOMsgChannelMessage2ᚖmyeduateᚋentᚐMsgChannelMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgChannelMessageEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.MsgChannelMessageEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgChannelMessageEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2myeduateᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_id(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_code(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_name(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_address(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_place(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustPlace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_state(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_pin(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustPin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_contact_person(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustContactPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_phone(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_email(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_mobile(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustMobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_url(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_banner_1(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustBanner1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_banner_2(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustBanner2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_logo_url(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustLogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_is_active(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustIsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customtypes.IsActive)
	fc.Result = res
	return ec.marshalNIsActive2myeduateᚋentᚋcustomtypesᚐIsActive(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_status(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_num_inst(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustNumInst, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomer_cust_time_zone(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustTimeZone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomerConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomerConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2myeduateᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomerConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MstCustomerEdge)
	fc.Result = res
	return ec.marshalOMstCustomerEdge2ᚕᚖmyeduateᚋentᚐMstCustomerEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomerEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomerEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomerEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.MstCustomer)
	fc.Result = res
	return ec.marshalOMstCustomer2ᚖmyeduateᚋentᚐMstCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _MstCustomerEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.MstCustomerEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstCustomerEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2myeduateᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_id(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_code(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_name(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_short_name(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstShortName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_address(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_place(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstPlace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_state(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_pin(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstPin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_contact_person(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstContactPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_phone(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_email(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_mobile(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstMobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_url(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_banner_1(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstBanner1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_banner_2(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstBanner2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_logo_url(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstLogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_is_active(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstIsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customtypes.IsActive)
	fc.Result = res
	return ec.marshalNIsActive2myeduateᚋentᚋcustomtypesᚐIsActive(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_status(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInst_inst_time_zone(ctx context.Context, field graphql.CollectedField, obj *ent.MstInst) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInst",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstTimeZone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInstConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.MstInstConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInstConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInstConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.MstInstConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInstConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2myeduateᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInstConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.MstInstConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInstConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MstInstEdge)
	fc.Result = res
	return ec.marshalOMstInstEdge2ᚕᚖmyeduateᚋentᚐMstInstEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInstEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.MstInstEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInstEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.MstInst)
	fc.Result = res
	return ec.marshalOMstInst2ᚖmyeduateᚋentᚐMstInst(ctx, field.Selections, res)
}

func (ec *executionContext) _MstInstEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.MstInstEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstInstEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2myeduateᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _MstStudent_id(ctx context.Context, field graphql.CollectedField, obj *ent.MstStudent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstStudent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MstStudent_std_first_name(ctx context.Context, field graphql.CollectedField, obj *ent.MstStudent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstStudent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StdFirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstStudent_std_middle_name(ctx context.Context, field graphql.CollectedField, obj *ent.MstStudent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstStudent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StdMiddleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstStudent_std_last_name(ctx context.Context, field graphql.CollectedField, obj *ent.MstStudent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstStudent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StdLastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MstStudent_std_studying(ctx context.Context, field graphql.CollectedField, obj *ent.MstStudent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstStudent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StdStudying, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MstStudent_std_status(ctx context.Context, field graphql.CollectedField, obj *ent.MstStudent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstStudent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StdStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customtypes.StdStatus)
	fc.Result = res
	return ec.marshalNStdStatus2myeduateᚋentᚋcustomtypesᚐStdStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _MstStudent_std_sex(ctx context.Context, field graphql.CollectedField, obj *ent.MstStudent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstStudent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StdSex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customtypes.Sex)
	fc.Result = res
	return ec.marshalNSex2myeduateᚋentᚋcustomtypesᚐSex(ctx, field.Selections, res)
}

func (ec *executionContext) _MstStudent_std_reg_no(ctx context.Context, field graphql.CollectedField, obj *ent.MstStudent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MstStudent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StdRegNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddAuthParentUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddAuthParentUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddAuthParentUser(rctx, args["token"].(string), args["input"].(ent.CreateAuthParentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AuthParent)
	fc.Result = res
	return ec.marshalNAuthParent2ᚖmyeduateᚋentᚐAuthParent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddAuthStaffUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddAuthStaffUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddAuthStaffUser(rctx, args["token"].(string), args["input"].(ent.CreateAuthStaffInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AuthStaff)
	fc.Result = res
	return ec.marshalNAuthStaff2ᚖmyeduateᚋentᚐAuthStaff(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddChannelMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddChannelMessage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddChannelMessage(rctx, args["token"].(string), args["input"].(ent.CreateMsgChannelMessageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MsgChannelMessage)
	fc.Result = res
	return ec.marshalNMsgChannelMessage2ᚖmyeduateᚋentᚐMsgChannelMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddCustomer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddCustomer(rctx, args["token"].(string), args["input"].(ent.CreateMstCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MstCustomer)
	fc.Result = res
	return ec.marshalNMstCustomer2ᚖmyeduateᚋentᚐMstCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateCustomer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCustomer(rctx, args["token"].(string), args["id"].(int), args["input"].(ent.UpdateMstCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MstCustomer)
	fc.Result = res
	return ec.marshalNMstCustomer2ᚖmyeduateᚋentᚐMstCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddInst(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddInst_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddInst(rctx, args["token"].(string), args["input"].(ent.CreateMstInstInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MstInst)
	fc.Result = res
	return ec.marshalNMstInst2ᚖmyeduateᚋentᚐMstInst(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateInst(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateInst_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateInst(rctx, args["token"].(string), args["id"].(int), args["input"].(ent.UpdateMstInstInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MstInst)
	fc.Result = res
	return ec.marshalNMstInst2ᚖmyeduateᚋentᚐMstInst(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddStudent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddStudent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddStudent(rctx, args["token"].(string), args["input"].(ent.CreateMstStudentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MstStudent)
	fc.Result = res
	return ec.marshalNMstStudent2ᚖmyeduateᚋentᚐMstStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetAuthParentUserNamesByIds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetAuthParentUserNamesByIds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAuthParentUserNamesByIds(rctx, args["token"].(string), args["id"].([]int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*UserNamesByID)
	fc.Result = res
	return ec.marshalNUserNamesById2ᚕᚖmyeduateᚐUserNamesByIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetAuthStaffUserIds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetAuthStaffUserIds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAuthStaffUserIds(rctx, args["token"].(string), args["id"].([]int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*UserNamesByID)
	fc.Result = res
	return ec.marshalNUserNamesById2ᚕᚖmyeduateᚐUserNamesByIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_node_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, args["token"].(string), args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(ent.Noder)
	fc.Result = res
	return ec.marshalONode2myeduateᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_nodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_nodes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Nodes(rctx, args["token"].(string), args["ids"].([]int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ent.Noder)
	fc.Result = res
	return ec.marshalNNode2ᚕmyeduateᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetChannelMessages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetChannelMessages_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetChannelMessages(rctx, args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MsgChannelMessage)
	fc.Result = res
	return ec.marshalOMsgChannelMessage2ᚕᚖmyeduateᚋentᚐMsgChannelMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ListCustomers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ListCustomers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListCustomers(rctx, args["token"].(string), args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.MstCustomerOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.MstCustomerConnection)
	fc.Result = res
	return ec.marshalOMstCustomerConnection2ᚖmyeduateᚋentᚐMstCustomerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetCustomerByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetCustomerByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCustomerByID(rctx, args["token"].(string), args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MstCustomer)
	fc.Result = res
	return ec.marshalNMstCustomer2ᚖmyeduateᚋentᚐMstCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetCustomerIdsByNames(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetCustomerIdsByNames_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCustomerIdsByNames(rctx, args["token"].(string), args["cust_names"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*CustData)
	fc.Result = res
	return ec.marshalNCustData2ᚕᚖmyeduateᚐCustDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ListInsts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ListInsts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListInsts(rctx, args["token"].(string), args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.MstInstOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.MstInstConnection)
	fc.Result = res
	return ec.marshalOMstInstConnection2ᚖmyeduateᚋentᚐMstInstConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ListInstsByCustID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ListInstsByCustID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListInstsByCustID(rctx, args["token"].(string), args["customer_id"].(int), args["after"].(*ent.Cursor), args["first"].(*int), args["before"].(*ent.Cursor), args["last"].(*int), args["orderBy"].(*ent.MstInstOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.MstInstConnection)
	fc.Result = res
	return ec.marshalOMstInstConnection2ᚖmyeduateᚋentᚐMstInstConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetInstByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetInstByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetInstByID(rctx, args["token"].(string), args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MstInst)
	fc.Result = res
	return ec.marshalNMstInst2ᚖmyeduateᚋentᚐMstInst(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetInstIdsByNames(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetInstIdsByNames_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetInstIdsByNames(rctx, args["token"].(string), args["inst_names"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*InstData)
	fc.Result = res
	return ec.marshalNInstData2ᚕᚖmyeduateᚐInstDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetStudentNamesByIds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetStudentNamesByIds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetStudentNamesByIds(rctx, args["token"].(string), args["id"].([]int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*UserNamesByID)
	fc.Result = res
	return ec.marshalNUserNamesById2ᚕᚖmyeduateᚐUserNamesByIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_GetChannelMessagesBySubscription(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_GetChannelMessagesBySubscription_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GetChannelMessagesBySubscription(rctx, args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*ent.MsgChannelMessage)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOMsgChannelMessage2ᚕᚖmyeduateᚋentᚐMsgChannelMessageᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _UserNamesById_first_name(ctx context.Context, field graphql.CollectedField, obj *UserNamesByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserNamesById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserNamesById_middle_name(ctx context.Context, field graphql.CollectedField, obj *UserNamesByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserNamesById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserNamesById_last_name(ctx context.Context, field graphql.CollectedField, obj *UserNamesByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserNamesById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserNamesById_id(ctx context.Context, field graphql.CollectedField, obj *UserNamesByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserNamesById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAuthParentWhereInput(ctx context.Context, obj interface{}) (ent.AuthParentWhereInput, error) {
	var it ent.AuthParentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOAuthParentWhereInput2ᚖmyeduateᚋentᚐAuthParentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOAuthParentWhereInput2ᚕᚖmyeduateᚋentᚐAuthParentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOAuthParentWhereInput2ᚕᚖmyeduateᚋentᚐAuthParentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			it.CreatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			it.CreatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			it.CreatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			it.CreatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			it.CreatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			it.UpdatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			it.UpdatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			it.UpdatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			it.UpdatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			it.UpdatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstName"))
			it.ParentFirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameNEQ"))
			it.ParentFirstNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameIn"))
			it.ParentFirstNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameNotIn"))
			it.ParentFirstNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameGT"))
			it.ParentFirstNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameGTE"))
			it.ParentFirstNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameLT"))
			it.ParentFirstNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameLTE"))
			it.ParentFirstNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameContains"))
			it.ParentFirstNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameHasPrefix"))
			it.ParentFirstNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameHasSuffix"))
			it.ParentFirstNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameEqualFold"))
			it.ParentFirstNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentFirstNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFirstNameContainsFold"))
			it.ParentFirstNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleName"))
			it.ParentMiddleName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameNEQ"))
			it.ParentMiddleNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameIn"))
			it.ParentMiddleNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameNotIn"))
			it.ParentMiddleNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameGT"))
			it.ParentMiddleNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameGTE"))
			it.ParentMiddleNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameLT"))
			it.ParentMiddleNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameLTE"))
			it.ParentMiddleNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameContains"))
			it.ParentMiddleNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameHasPrefix"))
			it.ParentMiddleNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameHasSuffix"))
			it.ParentMiddleNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameEqualFold"))
			it.ParentMiddleNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMiddleNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMiddleNameContainsFold"))
			it.ParentMiddleNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastName"))
			it.ParentLastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameNEQ"))
			it.ParentLastNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameIn"))
			it.ParentLastNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameNotIn"))
			it.ParentLastNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameGT"))
			it.ParentLastNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameGTE"))
			it.ParentLastNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameLT"))
			it.ParentLastNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameLTE"))
			it.ParentLastNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameContains"))
			it.ParentLastNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameHasPrefix"))
			it.ParentLastNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameHasSuffix"))
			it.ParentLastNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameEqualFold"))
			it.ParentLastNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentLastNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentLastNameContainsFold"))
			it.ParentLastNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddress"))
			it.ParentAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressNEQ"))
			it.ParentAddressNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressIn"))
			it.ParentAddressIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressNotIn"))
			it.ParentAddressNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressGT"))
			it.ParentAddressGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressGTE"))
			it.ParentAddressGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressLT"))
			it.ParentAddressLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressLTE"))
			it.ParentAddressLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressContains"))
			it.ParentAddressContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressHasPrefix"))
			it.ParentAddressHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressHasSuffix"))
			it.ParentAddressHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressEqualFold"))
			it.ParentAddressEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentAddressContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentAddressContainsFold"))
			it.ParentAddressContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlace":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlace"))
			it.ParentPlace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceNEQ"))
			it.ParentPlaceNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceIn"))
			it.ParentPlaceIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceNotIn"))
			it.ParentPlaceNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceGT"))
			it.ParentPlaceGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceGTE"))
			it.ParentPlaceGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceLT"))
			it.ParentPlaceLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceLTE"))
			it.ParentPlaceLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceContains"))
			it.ParentPlaceContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceHasPrefix"))
			it.ParentPlaceHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceHasSuffix"))
			it.ParentPlaceHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceEqualFold"))
			it.ParentPlaceEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPlaceContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPlaceContainsFold"))
			it.ParentPlaceContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentState":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentState"))
			it.ParentState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateNEQ"))
			it.ParentStateNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateIn"))
			it.ParentStateIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateNotIn"))
			it.ParentStateNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateGT"))
			it.ParentStateGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateGTE"))
			it.ParentStateGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateLT"))
			it.ParentStateLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateLTE"))
			it.ParentStateLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateContains"))
			it.ParentStateContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateHasPrefix"))
			it.ParentStateHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateHasSuffix"))
			it.ParentStateHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateEqualFold"))
			it.ParentStateEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentStateContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentStateContainsFold"))
			it.ParentStateContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPin"))
			it.ParentPin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinNEQ"))
			it.ParentPinNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinIn"))
			it.ParentPinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinNotIn"))
			it.ParentPinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinGT"))
			it.ParentPinGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinGTE"))
			it.ParentPinGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinLT"))
			it.ParentPinLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinLTE"))
			it.ParentPinLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinContains"))
			it.ParentPinContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinHasPrefix"))
			it.ParentPinHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinHasSuffix"))
			it.ParentPinHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinEqualFold"))
			it.ParentPinEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentPinContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPinContainsFold"))
			it.ParentPinContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmail"))
			it.ParentEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailNEQ"))
			it.ParentEmailNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailIn"))
			it.ParentEmailIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailNotIn"))
			it.ParentEmailNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailGT"))
			it.ParentEmailGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailGTE"))
			it.ParentEmailGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailLT"))
			it.ParentEmailLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailLTE"))
			it.ParentEmailLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailContains"))
			it.ParentEmailContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailHasPrefix"))
			it.ParentEmailHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailHasSuffix"))
			it.ParentEmailHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailEqualFold"))
			it.ParentEmailEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentEmailContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentEmailContainsFold"))
			it.ParentEmailContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobile"))
			it.ParentMobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileNEQ"))
			it.ParentMobileNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileIn"))
			it.ParentMobileIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileNotIn"))
			it.ParentMobileNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileGT"))
			it.ParentMobileGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileGTE"))
			it.ParentMobileGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileLT"))
			it.ParentMobileLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileLTE"))
			it.ParentMobileLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileContains"))
			it.ParentMobileContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileHasPrefix"))
			it.ParentMobileHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileHasSuffix"))
			it.ParentMobileHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileEqualFold"))
			it.ParentMobileEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentMobileContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentMobileContainsFold"))
			it.ParentMobileContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthStaffWhereInput(ctx context.Context, obj interface{}) (ent.AuthStaffWhereInput, error) {
	var it ent.AuthStaffWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOAuthStaffWhereInput2ᚖmyeduateᚋentᚐAuthStaffWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOAuthStaffWhereInput2ᚕᚖmyeduateᚋentᚐAuthStaffWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOAuthStaffWhereInput2ᚕᚖmyeduateᚋentᚐAuthStaffWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			it.CreatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			it.CreatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			it.CreatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			it.CreatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			it.CreatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			it.UpdatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			it.UpdatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			it.UpdatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			it.UpdatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			it.UpdatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstName"))
			it.StaffFirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameNEQ"))
			it.StaffFirstNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameIn"))
			it.StaffFirstNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameNotIn"))
			it.StaffFirstNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameGT"))
			it.StaffFirstNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameGTE"))
			it.StaffFirstNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameLT"))
			it.StaffFirstNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameLTE"))
			it.StaffFirstNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameContains"))
			it.StaffFirstNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameHasPrefix"))
			it.StaffFirstNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameHasSuffix"))
			it.StaffFirstNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameEqualFold"))
			it.StaffFirstNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffFirstNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffFirstNameContainsFold"))
			it.StaffFirstNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleName"))
			it.StaffMiddleName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameNEQ"))
			it.StaffMiddleNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameIn"))
			it.StaffMiddleNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameNotIn"))
			it.StaffMiddleNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameGT"))
			it.StaffMiddleNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameGTE"))
			it.StaffMiddleNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameLT"))
			it.StaffMiddleNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameLTE"))
			it.StaffMiddleNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameContains"))
			it.StaffMiddleNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameHasPrefix"))
			it.StaffMiddleNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameHasSuffix"))
			it.StaffMiddleNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameEqualFold"))
			it.StaffMiddleNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMiddleNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMiddleNameContainsFold"))
			it.StaffMiddleNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastName"))
			it.StaffLastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameNEQ"))
			it.StaffLastNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameIn"))
			it.StaffLastNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameNotIn"))
			it.StaffLastNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameGT"))
			it.StaffLastNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameGTE"))
			it.StaffLastNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameLT"))
			it.StaffLastNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameLTE"))
			it.StaffLastNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameContains"))
			it.StaffLastNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameHasPrefix"))
			it.StaffLastNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameHasSuffix"))
			it.StaffLastNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameEqualFold"))
			it.StaffLastNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffLastNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffLastNameContainsFold"))
			it.StaffLastNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddress"))
			it.StaffAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressNEQ"))
			it.StaffAddressNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressIn"))
			it.StaffAddressIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressNotIn"))
			it.StaffAddressNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressGT"))
			it.StaffAddressGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressGTE"))
			it.StaffAddressGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressLT"))
			it.StaffAddressLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressLTE"))
			it.StaffAddressLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressContains"))
			it.StaffAddressContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressHasPrefix"))
			it.StaffAddressHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressHasSuffix"))
			it.StaffAddressHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressEqualFold"))
			it.StaffAddressEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffAddressContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffAddressContainsFold"))
			it.StaffAddressContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlace":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlace"))
			it.StaffPlace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceNEQ"))
			it.StaffPlaceNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceIn"))
			it.StaffPlaceIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceNotIn"))
			it.StaffPlaceNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceGT"))
			it.StaffPlaceGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceGTE"))
			it.StaffPlaceGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceLT"))
			it.StaffPlaceLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceLTE"))
			it.StaffPlaceLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceContains"))
			it.StaffPlaceContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceHasPrefix"))
			it.StaffPlaceHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceHasSuffix"))
			it.StaffPlaceHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceEqualFold"))
			it.StaffPlaceEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPlaceContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPlaceContainsFold"))
			it.StaffPlaceContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffState":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffState"))
			it.StaffState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateNEQ"))
			it.StaffStateNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateIn"))
			it.StaffStateIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateNotIn"))
			it.StaffStateNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateGT"))
			it.StaffStateGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateGTE"))
			it.StaffStateGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateLT"))
			it.StaffStateLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateLTE"))
			it.StaffStateLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateContains"))
			it.StaffStateContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateHasPrefix"))
			it.StaffStateHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateHasSuffix"))
			it.StaffStateHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateEqualFold"))
			it.StaffStateEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffStateContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffStateContainsFold"))
			it.StaffStateContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPin"))
			it.StaffPin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinNEQ"))
			it.StaffPinNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinIn"))
			it.StaffPinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinNotIn"))
			it.StaffPinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinGT"))
			it.StaffPinGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinGTE"))
			it.StaffPinGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinLT"))
			it.StaffPinLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinLTE"))
			it.StaffPinLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinContains"))
			it.StaffPinContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinHasPrefix"))
			it.StaffPinHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinHasSuffix"))
			it.StaffPinHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinEqualFold"))
			it.StaffPinEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPinContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPinContainsFold"))
			it.StaffPinContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmail"))
			it.StaffEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailNEQ"))
			it.StaffEmailNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailIn"))
			it.StaffEmailIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailNotIn"))
			it.StaffEmailNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailGT"))
			it.StaffEmailGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailGTE"))
			it.StaffEmailGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailLT"))
			it.StaffEmailLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailLTE"))
			it.StaffEmailLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailContains"))
			it.StaffEmailContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailHasPrefix"))
			it.StaffEmailHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailHasSuffix"))
			it.StaffEmailHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailEqualFold"))
			it.StaffEmailEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffEmailContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffEmailContainsFold"))
			it.StaffEmailContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobile"))
			it.StaffMobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileNEQ"))
			it.StaffMobileNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileIn"))
			it.StaffMobileIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileNotIn"))
			it.StaffMobileNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileGT"))
			it.StaffMobileGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileGTE"))
			it.StaffMobileGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileLT"))
			it.StaffMobileLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileLTE"))
			it.StaffMobileLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileContains"))
			it.StaffMobileContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileHasPrefix"))
			it.StaffMobileHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileHasSuffix"))
			it.StaffMobileHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileEqualFold"))
			it.StaffMobileEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffMobileContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffMobileContainsFold"))
			it.StaffMobileContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAuthParentInput(ctx context.Context, obj interface{}) (ent.CreateAuthParentInput, error) {
	var it ent.CreateAuthParentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "parent_first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_first_name"))
			it.ParentFirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_middle_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_middle_name"))
			it.ParentMiddleName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_last_name"))
			it.ParentLastName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_address"))
			it.ParentAddress, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_place":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_place"))
			it.ParentPlace, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_state"))
			it.ParentState, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_pin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_pin"))
			it.ParentPin, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_email"))
			it.ParentEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_mobile"))
			it.ParentMobile, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAuthStaffInput(ctx context.Context, obj interface{}) (ent.CreateAuthStaffInput, error) {
	var it ent.CreateAuthStaffInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "staff_first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_first_name"))
			it.StaffFirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_middle_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_middle_name"))
			it.StaffMiddleName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_last_name"))
			it.StaffLastName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_address"))
			it.StaffAddress, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_place":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_place"))
			it.StaffPlace, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_state"))
			it.StaffState, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_pin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_pin"))
			it.StaffPin, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_email"))
			it.StaffEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_mobile"))
			it.StaffMobile, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMsgChannelMessageInput(ctx context.Context, obj interface{}) (ent.CreateMsgChannelMessageInput, error) {
	var it ent.CreateMsgChannelMessageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "msg_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_date"))
			it.MsgDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_is_expiry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_is_expiry"))
			it.MsgIsExpiry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_expiry_date"))
			it.MsgExpiryDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_is_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_is_text"))
			it.MsgIsText, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_content"))
			it.MsgContent, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_media_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_media_type"))
			it.MsgMediaType, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_media_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_media_content"))
			it.MsgMediaContent, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_active"))
			it.MsgActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_is_individual":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_is_individual"))
			it.MsgIsIndividual, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_recv_or_sent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_recv_or_sent"))
			it.MsgRecvOrSent, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMstCustomerInput(ctx context.Context, obj interface{}) (ent.CreateMstCustomerInput, error) {
	var it ent.CreateMstCustomerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cust_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_code"))
			it.CustCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_name"))
			it.CustName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_address"))
			it.CustAddress, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_place":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_place"))
			it.CustPlace, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_state"))
			it.CustState, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_pin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_pin"))
			it.CustPin, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_contact_person"))
			it.CustContactPerson, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_phone"))
			it.CustPhone, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_email"))
			it.CustEmail, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_mobile"))
			it.CustMobile, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_url"))
			it.CustURL, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_banner_1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_banner_1"))
			it.CustBanner1, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_banner_2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_banner_2"))
			it.CustBanner2, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_logo_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_logo_url"))
			it.CustLogoURL, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_is_active"))
			it.CustIsActive, err = ec.unmarshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_status"))
			it.CustStatus, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_time_zone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_time_zone"))
			it.CustTimeZone, err = ec.unmarshalOTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMstInstInput(ctx context.Context, obj interface{}) (ent.CreateMstInstInput, error) {
	var it ent.CreateMstInstInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "inst_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_code"))
			it.InstCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_name"))
			it.InstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_short_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_short_name"))
			it.InstShortName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_address"))
			it.InstAddress, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_place":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_place"))
			it.InstPlace, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_state"))
			it.InstState, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_pin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_pin"))
			it.InstPin, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_contact_person"))
			it.InstContactPerson, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_phone"))
			it.InstPhone, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_email"))
			it.InstEmail, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_mobile"))
			it.InstMobile, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_url"))
			it.InstURL, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_banner_1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_banner_1"))
			it.InstBanner1, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_banner_2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_banner_2"))
			it.InstBanner2, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_logo_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_logo_url"))
			it.InstLogoURL, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_is_active"))
			it.InstIsActive, err = ec.unmarshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_status"))
			it.InstStatus, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_time_zone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_time_zone"))
			it.InstTimeZone, err = ec.unmarshalOTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMstStudentInput(ctx context.Context, obj interface{}) (ent.CreateMstStudentInput, error) {
	var it ent.CreateMstStudentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "std_first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_first_name"))
			it.StdFirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_middle_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_middle_name"))
			it.StdMiddleName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_last_name"))
			it.StdLastName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_studying":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_studying"))
			it.StdStudying, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_status"))
			it.StdStatus, err = ec.unmarshalOStdStatus2ᚖmyeduateᚋentᚋcustomtypesᚐStdStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_sex"))
			it.StdSex, err = ec.unmarshalOSex2myeduateᚋentᚋcustomtypesᚐSex(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_reg_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_reg_no"))
			it.StdRegNo, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMsgChannelMessageOrder(ctx context.Context, obj interface{}) (ent.MsgChannelMessageOrder, error) {
	var it ent.MsgChannelMessageOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2myeduateᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOMsgChannelMessageOrderField2ᚖmyeduateᚋentᚐMsgChannelMessageOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMsgChannelMessageWhereInput(ctx context.Context, obj interface{}) (ent.MsgChannelMessageWhereInput, error) {
	var it ent.MsgChannelMessageWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOMsgChannelMessageWhereInput2ᚖmyeduateᚋentᚐMsgChannelMessageWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOMsgChannelMessageWhereInput2ᚕᚖmyeduateᚋentᚐMsgChannelMessageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOMsgChannelMessageWhereInput2ᚕᚖmyeduateᚋentᚐMsgChannelMessageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			it.CreatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			it.CreatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			it.CreatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			it.CreatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			it.CreatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			it.UpdatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			it.UpdatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			it.UpdatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			it.UpdatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			it.UpdatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDate"))
			it.MsgDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDateNEQ"))
			it.MsgDateNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDateIn"))
			it.MsgDateIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDateNotIn"))
			it.MsgDateNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDateGT"))
			it.MsgDateGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDateGTE"))
			it.MsgDateGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDateLT"))
			it.MsgDateLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDateLTE"))
			it.MsgDateLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDateIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDateIsNil"))
			it.MsgDateIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgDateNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgDateNotNil"))
			it.MsgDateNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgIsExpiry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgIsExpiry"))
			it.MsgIsExpiry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgIsExpiryNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgIsExpiryNEQ"))
			it.MsgIsExpiryNEQ, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDate"))
			it.MsgExpiryDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDateNEQ"))
			it.MsgExpiryDateNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDateIn"))
			it.MsgExpiryDateIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDateNotIn"))
			it.MsgExpiryDateNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDateGT"))
			it.MsgExpiryDateGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDateGTE"))
			it.MsgExpiryDateGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDateLT"))
			it.MsgExpiryDateLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDateLTE"))
			it.MsgExpiryDateLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDateIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDateIsNil"))
			it.MsgExpiryDateIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgExpiryDateNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgExpiryDateNotNil"))
			it.MsgExpiryDateNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgIsText":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgIsText"))
			it.MsgIsText, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgIsTextNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgIsTextNEQ"))
			it.MsgIsTextNEQ, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContent"))
			it.MsgContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentNEQ"))
			it.MsgContentNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentIn"))
			it.MsgContentIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentNotIn"))
			it.MsgContentNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentGT"))
			it.MsgContentGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentGTE"))
			it.MsgContentGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentLT"))
			it.MsgContentLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentLTE"))
			it.MsgContentLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentContains"))
			it.MsgContentContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentHasPrefix"))
			it.MsgContentHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentHasSuffix"))
			it.MsgContentHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentEqualFold"))
			it.MsgContentEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgContentContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgContentContainsFold"))
			it.MsgContentContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaType"))
			it.MsgMediaType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeNEQ"))
			it.MsgMediaTypeNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeIn"))
			it.MsgMediaTypeIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeNotIn"))
			it.MsgMediaTypeNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeGT"))
			it.MsgMediaTypeGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeGTE"))
			it.MsgMediaTypeGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeLT"))
			it.MsgMediaTypeLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeLTE"))
			it.MsgMediaTypeLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeContains"))
			it.MsgMediaTypeContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeHasPrefix"))
			it.MsgMediaTypeHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeHasSuffix"))
			it.MsgMediaTypeHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeEqualFold"))
			it.MsgMediaTypeEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaTypeContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaTypeContainsFold"))
			it.MsgMediaTypeContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContent"))
			it.MsgMediaContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentNEQ"))
			it.MsgMediaContentNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentIn"))
			it.MsgMediaContentIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentNotIn"))
			it.MsgMediaContentNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentGT"))
			it.MsgMediaContentGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentGTE"))
			it.MsgMediaContentGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentLT"))
			it.MsgMediaContentLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentLTE"))
			it.MsgMediaContentLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentContains"))
			it.MsgMediaContentContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentHasPrefix"))
			it.MsgMediaContentHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentHasSuffix"))
			it.MsgMediaContentHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentEqualFold"))
			it.MsgMediaContentEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgMediaContentContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgMediaContentContainsFold"))
			it.MsgMediaContentContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgActive"))
			it.MsgActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgActiveNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgActiveNEQ"))
			it.MsgActiveNEQ, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgIsIndividual":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgIsIndividual"))
			it.MsgIsIndividual, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgIsIndividualNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgIsIndividualNEQ"))
			it.MsgIsIndividualNEQ, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSent"))
			it.MsgRecvOrSent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentNEQ"))
			it.MsgRecvOrSentNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentIn"))
			it.MsgRecvOrSentIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentNotIn"))
			it.MsgRecvOrSentNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentGT"))
			it.MsgRecvOrSentGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentGTE"))
			it.MsgRecvOrSentGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentLT"))
			it.MsgRecvOrSentLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentLTE"))
			it.MsgRecvOrSentLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentContains"))
			it.MsgRecvOrSentContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentHasPrefix"))
			it.MsgRecvOrSentHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentHasSuffix"))
			it.MsgRecvOrSentHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentEqualFold"))
			it.MsgRecvOrSentEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msgRecvOrSentContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgRecvOrSentContainsFold"))
			it.MsgRecvOrSentContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMstCustomerOrder(ctx context.Context, obj interface{}) (ent.MstCustomerOrder, error) {
	var it ent.MstCustomerOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2myeduateᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOMstCustomerOrderField2ᚖmyeduateᚋentᚐMstCustomerOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMstCustomerWhereInput(ctx context.Context, obj interface{}) (ent.MstCustomerWhereInput, error) {
	var it ent.MstCustomerWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOMstCustomerWhereInput2ᚖmyeduateᚋentᚐMstCustomerWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOMstCustomerWhereInput2ᚕᚖmyeduateᚋentᚐMstCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOMstCustomerWhereInput2ᚕᚖmyeduateᚋentᚐMstCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			it.CreatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			it.CreatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			it.CreatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			it.CreatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			it.CreatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			it.UpdatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			it.UpdatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			it.UpdatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			it.UpdatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			it.UpdatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCode"))
			it.CustCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeNEQ"))
			it.CustCodeNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeIn"))
			it.CustCodeIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeNotIn"))
			it.CustCodeNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeGT"))
			it.CustCodeGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeGTE"))
			it.CustCodeGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeLT"))
			it.CustCodeLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeLTE"))
			it.CustCodeLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeContains"))
			it.CustCodeContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeHasPrefix"))
			it.CustCodeHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeHasSuffix"))
			it.CustCodeHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeEqualFold"))
			it.CustCodeEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custCodeContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custCodeContainsFold"))
			it.CustCodeContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custName"))
			it.CustName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameNEQ"))
			it.CustNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameIn"))
			it.CustNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameNotIn"))
			it.CustNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameGT"))
			it.CustNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameGTE"))
			it.CustNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameLT"))
			it.CustNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameLTE"))
			it.CustNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameContains"))
			it.CustNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameHasPrefix"))
			it.CustNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameHasSuffix"))
			it.CustNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameEqualFold"))
			it.CustNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNameContainsFold"))
			it.CustNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddress"))
			it.CustAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressNEQ"))
			it.CustAddressNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressIn"))
			it.CustAddressIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressNotIn"))
			it.CustAddressNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressGT"))
			it.CustAddressGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressGTE"))
			it.CustAddressGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressLT"))
			it.CustAddressLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressLTE"))
			it.CustAddressLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressContains"))
			it.CustAddressContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressHasPrefix"))
			it.CustAddressHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressHasSuffix"))
			it.CustAddressHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressEqualFold"))
			it.CustAddressEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custAddressContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custAddressContainsFold"))
			it.CustAddressContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlace":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlace"))
			it.CustPlace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceNEQ"))
			it.CustPlaceNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceIn"))
			it.CustPlaceIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceNotIn"))
			it.CustPlaceNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceGT"))
			it.CustPlaceGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceGTE"))
			it.CustPlaceGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceLT"))
			it.CustPlaceLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceLTE"))
			it.CustPlaceLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceContains"))
			it.CustPlaceContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceHasPrefix"))
			it.CustPlaceHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceHasSuffix"))
			it.CustPlaceHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceEqualFold"))
			it.CustPlaceEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPlaceContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPlaceContainsFold"))
			it.CustPlaceContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custState":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custState"))
			it.CustState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateNEQ"))
			it.CustStateNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateIn"))
			it.CustStateIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateNotIn"))
			it.CustStateNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateGT"))
			it.CustStateGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateGTE"))
			it.CustStateGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateLT"))
			it.CustStateLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateLTE"))
			it.CustStateLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateContains"))
			it.CustStateContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateHasPrefix"))
			it.CustStateHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateHasSuffix"))
			it.CustStateHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateEqualFold"))
			it.CustStateEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStateContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStateContainsFold"))
			it.CustStateContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPin"))
			it.CustPin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinNEQ"))
			it.CustPinNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinIn"))
			it.CustPinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinNotIn"))
			it.CustPinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinGT"))
			it.CustPinGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinGTE"))
			it.CustPinGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinLT"))
			it.CustPinLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinLTE"))
			it.CustPinLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinContains"))
			it.CustPinContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinHasPrefix"))
			it.CustPinHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinHasSuffix"))
			it.CustPinHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinEqualFold"))
			it.CustPinEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPinContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPinContainsFold"))
			it.CustPinContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPerson":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPerson"))
			it.CustContactPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonNEQ"))
			it.CustContactPersonNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonIn"))
			it.CustContactPersonIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonNotIn"))
			it.CustContactPersonNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonGT"))
			it.CustContactPersonGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonGTE"))
			it.CustContactPersonGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonLT"))
			it.CustContactPersonLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonLTE"))
			it.CustContactPersonLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonContains"))
			it.CustContactPersonContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonHasPrefix"))
			it.CustContactPersonHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonHasSuffix"))
			it.CustContactPersonHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonEqualFold"))
			it.CustContactPersonEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custContactPersonContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custContactPersonContainsFold"))
			it.CustContactPersonContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhone"))
			it.CustPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneNEQ"))
			it.CustPhoneNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneIn"))
			it.CustPhoneIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneNotIn"))
			it.CustPhoneNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneGT"))
			it.CustPhoneGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneGTE"))
			it.CustPhoneGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneLT"))
			it.CustPhoneLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneLTE"))
			it.CustPhoneLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneContains"))
			it.CustPhoneContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneHasPrefix"))
			it.CustPhoneHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneHasSuffix"))
			it.CustPhoneHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneEqualFold"))
			it.CustPhoneEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custPhoneContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custPhoneContainsFold"))
			it.CustPhoneContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmail"))
			it.CustEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailNEQ"))
			it.CustEmailNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailIn"))
			it.CustEmailIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailNotIn"))
			it.CustEmailNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailGT"))
			it.CustEmailGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailGTE"))
			it.CustEmailGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailLT"))
			it.CustEmailLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailLTE"))
			it.CustEmailLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailContains"))
			it.CustEmailContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailHasPrefix"))
			it.CustEmailHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailHasSuffix"))
			it.CustEmailHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailEqualFold"))
			it.CustEmailEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custEmailContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custEmailContainsFold"))
			it.CustEmailContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobile"))
			it.CustMobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileNEQ"))
			it.CustMobileNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileIn"))
			it.CustMobileIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileNotIn"))
			it.CustMobileNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileGT"))
			it.CustMobileGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileGTE"))
			it.CustMobileGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileLT"))
			it.CustMobileLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileLTE"))
			it.CustMobileLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileContains"))
			it.CustMobileContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileHasPrefix"))
			it.CustMobileHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileHasSuffix"))
			it.CustMobileHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileEqualFold"))
			it.CustMobileEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custMobileContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custMobileContainsFold"))
			it.CustMobileContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURL"))
			it.CustURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLNEQ"))
			it.CustURLNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLIn"))
			it.CustURLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLNotIn"))
			it.CustURLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLGT"))
			it.CustURLGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLGTE"))
			it.CustURLGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLLT"))
			it.CustURLLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLLTE"))
			it.CustURLLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLContains"))
			it.CustURLContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLHasPrefix"))
			it.CustURLHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLHasSuffix"))
			it.CustURLHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLEqualFold"))
			it.CustURLEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custURLContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custURLContainsFold"))
			it.CustURLContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1"))
			it.CustBanner1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1NEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1NEQ"))
			it.CustBanner1NEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1In":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1In"))
			it.CustBanner1In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1NotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1NotIn"))
			it.CustBanner1NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1GT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1GT"))
			it.CustBanner1GT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1GTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1GTE"))
			it.CustBanner1GTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1LT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1LT"))
			it.CustBanner1LT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1LTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1LTE"))
			it.CustBanner1LTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1Contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1Contains"))
			it.CustBanner1Contains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1HasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1HasPrefix"))
			it.CustBanner1HasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1HasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1HasSuffix"))
			it.CustBanner1HasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1EqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1EqualFold"))
			it.CustBanner1EqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner1ContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner1ContainsFold"))
			it.CustBanner1ContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2"))
			it.CustBanner2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2NEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2NEQ"))
			it.CustBanner2NEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2In":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2In"))
			it.CustBanner2In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2NotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2NotIn"))
			it.CustBanner2NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2GT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2GT"))
			it.CustBanner2GT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2GTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2GTE"))
			it.CustBanner2GTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2LT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2LT"))
			it.CustBanner2LT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2LTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2LTE"))
			it.CustBanner2LTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2Contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2Contains"))
			it.CustBanner2Contains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2HasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2HasPrefix"))
			it.CustBanner2HasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2HasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2HasSuffix"))
			it.CustBanner2HasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2EqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2EqualFold"))
			it.CustBanner2EqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custBanner2ContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custBanner2ContainsFold"))
			it.CustBanner2ContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURL"))
			it.CustLogoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLNEQ"))
			it.CustLogoURLNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLIn"))
			it.CustLogoURLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLNotIn"))
			it.CustLogoURLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLGT"))
			it.CustLogoURLGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLGTE"))
			it.CustLogoURLGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLLT"))
			it.CustLogoURLLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLLTE"))
			it.CustLogoURLLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLContains"))
			it.CustLogoURLContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLHasPrefix"))
			it.CustLogoURLHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLHasSuffix"))
			it.CustLogoURLHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLEqualFold"))
			it.CustLogoURLEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custLogoURLContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custLogoURLContainsFold"))
			it.CustLogoURLContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custIsActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custIsActive"))
			it.CustIsActive, err = ec.unmarshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx, v)
			if err != nil {
				return it, err
			}
		case "custIsActiveNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custIsActiveNEQ"))
			it.CustIsActiveNEQ, err = ec.unmarshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx, v)
			if err != nil {
				return it, err
			}
		case "custIsActiveIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custIsActiveIn"))
			it.CustIsActiveIn, err = ec.unmarshalOIsActive2ᚕmyeduateᚋentᚋcustomtypesᚐIsActiveᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custIsActiveNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custIsActiveNotIn"))
			it.CustIsActiveNotIn, err = ec.unmarshalOIsActive2ᚕmyeduateᚋentᚋcustomtypesᚐIsActiveᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatus"))
			it.CustStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusNEQ"))
			it.CustStatusNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusIn"))
			it.CustStatusIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusNotIn"))
			it.CustStatusNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusGT"))
			it.CustStatusGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusGTE"))
			it.CustStatusGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusLT"))
			it.CustStatusLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusLTE"))
			it.CustStatusLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusContains"))
			it.CustStatusContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusHasPrefix"))
			it.CustStatusHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusHasSuffix"))
			it.CustStatusHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusEqualFold"))
			it.CustStatusEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custStatusContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custStatusContainsFold"))
			it.CustStatusContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNumInst":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNumInst"))
			it.CustNumInst, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNumInstNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNumInstNEQ"))
			it.CustNumInstNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNumInstIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNumInstIn"))
			it.CustNumInstIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNumInstNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNumInstNotIn"))
			it.CustNumInstNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNumInstGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNumInstGT"))
			it.CustNumInstGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNumInstGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNumInstGTE"))
			it.CustNumInstGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNumInstLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNumInstLT"))
			it.CustNumInstLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "custNumInstLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custNumInstLTE"))
			it.CustNumInstLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "custTimeZone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custTimeZone"))
			it.CustTimeZone, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "custTimeZoneNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custTimeZoneNEQ"))
			it.CustTimeZoneNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "custTimeZoneIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custTimeZoneIn"))
			it.CustTimeZoneIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custTimeZoneNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custTimeZoneNotIn"))
			it.CustTimeZoneNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "custTimeZoneGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custTimeZoneGT"))
			it.CustTimeZoneGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "custTimeZoneGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custTimeZoneGTE"))
			it.CustTimeZoneGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "custTimeZoneLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custTimeZoneLT"))
			it.CustTimeZoneLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "custTimeZoneLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("custTimeZoneLTE"))
			it.CustTimeZoneLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCust2Inst":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCust2Inst"))
			it.HasCust2Inst, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCust2InstWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCust2InstWith"))
			it.HasCust2InstWith, err = ec.unmarshalOMstInstWhereInput2ᚕᚖmyeduateᚋentᚐMstInstWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMstInstOrder(ctx context.Context, obj interface{}) (ent.MstInstOrder, error) {
	var it ent.MstInstOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2myeduateᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOMstInstOrderField2ᚖmyeduateᚋentᚐMstInstOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMstInstWhereInput(ctx context.Context, obj interface{}) (ent.MstInstWhereInput, error) {
	var it ent.MstInstWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOMstInstWhereInput2ᚖmyeduateᚋentᚐMstInstWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOMstInstWhereInput2ᚕᚖmyeduateᚋentᚐMstInstWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOMstInstWhereInput2ᚕᚖmyeduateᚋentᚐMstInstWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			it.CreatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			it.CreatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			it.CreatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			it.CreatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			it.CreatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			it.UpdatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			it.UpdatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			it.UpdatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			it.UpdatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			it.UpdatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCode"))
			it.InstCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeNEQ"))
			it.InstCodeNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeIn"))
			it.InstCodeIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeNotIn"))
			it.InstCodeNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeGT"))
			it.InstCodeGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeGTE"))
			it.InstCodeGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeLT"))
			it.InstCodeLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeLTE"))
			it.InstCodeLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeContains"))
			it.InstCodeContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeHasPrefix"))
			it.InstCodeHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeHasSuffix"))
			it.InstCodeHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeEqualFold"))
			it.InstCodeEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instCodeContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instCodeContainsFold"))
			it.InstCodeContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instName"))
			it.InstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameNEQ"))
			it.InstNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameIn"))
			it.InstNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameNotIn"))
			it.InstNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameGT"))
			it.InstNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameGTE"))
			it.InstNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameLT"))
			it.InstNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameLTE"))
			it.InstNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameContains"))
			it.InstNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameHasPrefix"))
			it.InstNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameHasSuffix"))
			it.InstNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameEqualFold"))
			it.InstNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instNameContainsFold"))
			it.InstNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortName"))
			it.InstShortName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameNEQ"))
			it.InstShortNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameIn"))
			it.InstShortNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameNotIn"))
			it.InstShortNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameGT"))
			it.InstShortNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameGTE"))
			it.InstShortNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameLT"))
			it.InstShortNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameLTE"))
			it.InstShortNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameContains"))
			it.InstShortNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameHasPrefix"))
			it.InstShortNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameHasSuffix"))
			it.InstShortNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameEqualFold"))
			it.InstShortNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instShortNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instShortNameContainsFold"))
			it.InstShortNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddress"))
			it.InstAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressNEQ"))
			it.InstAddressNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressIn"))
			it.InstAddressIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressNotIn"))
			it.InstAddressNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressGT"))
			it.InstAddressGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressGTE"))
			it.InstAddressGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressLT"))
			it.InstAddressLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressLTE"))
			it.InstAddressLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressContains"))
			it.InstAddressContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressHasPrefix"))
			it.InstAddressHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressHasSuffix"))
			it.InstAddressHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressEqualFold"))
			it.InstAddressEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instAddressContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instAddressContainsFold"))
			it.InstAddressContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlace":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlace"))
			it.InstPlace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceNEQ"))
			it.InstPlaceNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceIn"))
			it.InstPlaceIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceNotIn"))
			it.InstPlaceNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceGT"))
			it.InstPlaceGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceGTE"))
			it.InstPlaceGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceLT"))
			it.InstPlaceLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceLTE"))
			it.InstPlaceLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceContains"))
			it.InstPlaceContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceHasPrefix"))
			it.InstPlaceHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceHasSuffix"))
			it.InstPlaceHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceEqualFold"))
			it.InstPlaceEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPlaceContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPlaceContainsFold"))
			it.InstPlaceContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instState":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instState"))
			it.InstState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateNEQ"))
			it.InstStateNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateIn"))
			it.InstStateIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateNotIn"))
			it.InstStateNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateGT"))
			it.InstStateGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateGTE"))
			it.InstStateGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateLT"))
			it.InstStateLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateLTE"))
			it.InstStateLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateContains"))
			it.InstStateContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateHasPrefix"))
			it.InstStateHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateHasSuffix"))
			it.InstStateHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateEqualFold"))
			it.InstStateEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStateContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStateContainsFold"))
			it.InstStateContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPin"))
			it.InstPin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinNEQ"))
			it.InstPinNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinIn"))
			it.InstPinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinNotIn"))
			it.InstPinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinGT"))
			it.InstPinGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinGTE"))
			it.InstPinGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinLT"))
			it.InstPinLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinLTE"))
			it.InstPinLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinContains"))
			it.InstPinContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinHasPrefix"))
			it.InstPinHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinHasSuffix"))
			it.InstPinHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinEqualFold"))
			it.InstPinEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPinContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPinContainsFold"))
			it.InstPinContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPerson":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPerson"))
			it.InstContactPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonNEQ"))
			it.InstContactPersonNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonIn"))
			it.InstContactPersonIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonNotIn"))
			it.InstContactPersonNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonGT"))
			it.InstContactPersonGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonGTE"))
			it.InstContactPersonGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonLT"))
			it.InstContactPersonLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonLTE"))
			it.InstContactPersonLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonContains"))
			it.InstContactPersonContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonHasPrefix"))
			it.InstContactPersonHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonHasSuffix"))
			it.InstContactPersonHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonEqualFold"))
			it.InstContactPersonEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instContactPersonContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instContactPersonContainsFold"))
			it.InstContactPersonContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhone"))
			it.InstPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneNEQ"))
			it.InstPhoneNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneIn"))
			it.InstPhoneIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneNotIn"))
			it.InstPhoneNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneGT"))
			it.InstPhoneGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneGTE"))
			it.InstPhoneGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneLT"))
			it.InstPhoneLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneLTE"))
			it.InstPhoneLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneContains"))
			it.InstPhoneContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneHasPrefix"))
			it.InstPhoneHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneHasSuffix"))
			it.InstPhoneHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneEqualFold"))
			it.InstPhoneEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instPhoneContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instPhoneContainsFold"))
			it.InstPhoneContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmail"))
			it.InstEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailNEQ"))
			it.InstEmailNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailIn"))
			it.InstEmailIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailNotIn"))
			it.InstEmailNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailGT"))
			it.InstEmailGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailGTE"))
			it.InstEmailGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailLT"))
			it.InstEmailLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailLTE"))
			it.InstEmailLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailContains"))
			it.InstEmailContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailHasPrefix"))
			it.InstEmailHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailHasSuffix"))
			it.InstEmailHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailEqualFold"))
			it.InstEmailEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instEmailContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instEmailContainsFold"))
			it.InstEmailContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobile"))
			it.InstMobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileNEQ"))
			it.InstMobileNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileIn"))
			it.InstMobileIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileNotIn"))
			it.InstMobileNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileGT"))
			it.InstMobileGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileGTE"))
			it.InstMobileGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileLT"))
			it.InstMobileLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileLTE"))
			it.InstMobileLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileContains"))
			it.InstMobileContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileHasPrefix"))
			it.InstMobileHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileHasSuffix"))
			it.InstMobileHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileEqualFold"))
			it.InstMobileEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instMobileContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instMobileContainsFold"))
			it.InstMobileContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURL"))
			it.InstURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLNEQ"))
			it.InstURLNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLIn"))
			it.InstURLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLNotIn"))
			it.InstURLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLGT"))
			it.InstURLGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLGTE"))
			it.InstURLGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLLT"))
			it.InstURLLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLLTE"))
			it.InstURLLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLContains"))
			it.InstURLContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLHasPrefix"))
			it.InstURLHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLHasSuffix"))
			it.InstURLHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLEqualFold"))
			it.InstURLEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instURLContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instURLContainsFold"))
			it.InstURLContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1"))
			it.InstBanner1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1NEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1NEQ"))
			it.InstBanner1NEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1In":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1In"))
			it.InstBanner1In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1NotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1NotIn"))
			it.InstBanner1NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1GT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1GT"))
			it.InstBanner1GT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1GTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1GTE"))
			it.InstBanner1GTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1LT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1LT"))
			it.InstBanner1LT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1LTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1LTE"))
			it.InstBanner1LTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1Contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1Contains"))
			it.InstBanner1Contains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1HasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1HasPrefix"))
			it.InstBanner1HasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1HasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1HasSuffix"))
			it.InstBanner1HasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1EqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1EqualFold"))
			it.InstBanner1EqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner1ContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner1ContainsFold"))
			it.InstBanner1ContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2"))
			it.InstBanner2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2NEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2NEQ"))
			it.InstBanner2NEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2In":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2In"))
			it.InstBanner2In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2NotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2NotIn"))
			it.InstBanner2NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2GT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2GT"))
			it.InstBanner2GT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2GTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2GTE"))
			it.InstBanner2GTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2LT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2LT"))
			it.InstBanner2LT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2LTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2LTE"))
			it.InstBanner2LTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2Contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2Contains"))
			it.InstBanner2Contains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2HasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2HasPrefix"))
			it.InstBanner2HasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2HasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2HasSuffix"))
			it.InstBanner2HasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2EqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2EqualFold"))
			it.InstBanner2EqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instBanner2ContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instBanner2ContainsFold"))
			it.InstBanner2ContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURL"))
			it.InstLogoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLNEQ"))
			it.InstLogoURLNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLIn"))
			it.InstLogoURLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLNotIn"))
			it.InstLogoURLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLGT"))
			it.InstLogoURLGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLGTE"))
			it.InstLogoURLGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLLT"))
			it.InstLogoURLLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLLTE"))
			it.InstLogoURLLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLContains"))
			it.InstLogoURLContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLHasPrefix"))
			it.InstLogoURLHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLHasSuffix"))
			it.InstLogoURLHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLEqualFold"))
			it.InstLogoURLEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instLogoURLContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instLogoURLContainsFold"))
			it.InstLogoURLContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instIsActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instIsActive"))
			it.InstIsActive, err = ec.unmarshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx, v)
			if err != nil {
				return it, err
			}
		case "instIsActiveNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instIsActiveNEQ"))
			it.InstIsActiveNEQ, err = ec.unmarshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx, v)
			if err != nil {
				return it, err
			}
		case "instIsActiveIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instIsActiveIn"))
			it.InstIsActiveIn, err = ec.unmarshalOIsActive2ᚕmyeduateᚋentᚋcustomtypesᚐIsActiveᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instIsActiveNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instIsActiveNotIn"))
			it.InstIsActiveNotIn, err = ec.unmarshalOIsActive2ᚕmyeduateᚋentᚋcustomtypesᚐIsActiveᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatus"))
			it.InstStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusNEQ"))
			it.InstStatusNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusIn"))
			it.InstStatusIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusNotIn"))
			it.InstStatusNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusGT"))
			it.InstStatusGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusGTE"))
			it.InstStatusGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusLT"))
			it.InstStatusLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusLTE"))
			it.InstStatusLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusContains"))
			it.InstStatusContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusHasPrefix"))
			it.InstStatusHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusHasSuffix"))
			it.InstStatusHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusEqualFold"))
			it.InstStatusEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instStatusContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instStatusContainsFold"))
			it.InstStatusContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instTimeZone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instTimeZone"))
			it.InstTimeZone, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "instTimeZoneNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instTimeZoneNEQ"))
			it.InstTimeZoneNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "instTimeZoneIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instTimeZoneIn"))
			it.InstTimeZoneIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instTimeZoneNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instTimeZoneNotIn"))
			it.InstTimeZoneNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "instTimeZoneGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instTimeZoneGT"))
			it.InstTimeZoneGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "instTimeZoneGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instTimeZoneGTE"))
			it.InstTimeZoneGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "instTimeZoneLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instTimeZoneLT"))
			it.InstTimeZoneLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "instTimeZoneLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instTimeZoneLTE"))
			it.InstTimeZoneLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			it.CustomerID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNEQ"))
			it.CustomerIDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDIn"))
			it.CustomerIDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNotIn"))
			it.CustomerIDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasInstfromCust":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstfromCust"))
			it.HasInstfromCust, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasInstfromCustWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstfromCustWith"))
			it.HasInstfromCustWith, err = ec.unmarshalOMstCustomerWhereInput2ᚕᚖmyeduateᚋentᚐMstCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMstStudentWhereInput(ctx context.Context, obj interface{}) (ent.MstStudentWhereInput, error) {
	var it ent.MstStudentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOMstStudentWhereInput2ᚖmyeduateᚋentᚐMstStudentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOMstStudentWhereInput2ᚕᚖmyeduateᚋentᚐMstStudentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOMstStudentWhereInput2ᚕᚖmyeduateᚋentᚐMstStudentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			it.CreatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			it.CreatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			it.CreatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			it.CreatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			it.CreatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			it.UpdatedAtNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			it.UpdatedAtGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			it.UpdatedAtGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			it.UpdatedAtLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			it.UpdatedAtLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstName"))
			it.StdFirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameNEQ"))
			it.StdFirstNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameIn"))
			it.StdFirstNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameNotIn"))
			it.StdFirstNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameGT"))
			it.StdFirstNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameGTE"))
			it.StdFirstNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameLT"))
			it.StdFirstNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameLTE"))
			it.StdFirstNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameContains"))
			it.StdFirstNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameHasPrefix"))
			it.StdFirstNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameHasSuffix"))
			it.StdFirstNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameEqualFold"))
			it.StdFirstNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdFirstNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdFirstNameContainsFold"))
			it.StdFirstNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleName"))
			it.StdMiddleName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameNEQ"))
			it.StdMiddleNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameIn"))
			it.StdMiddleNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameNotIn"))
			it.StdMiddleNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameGT"))
			it.StdMiddleNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameGTE"))
			it.StdMiddleNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameLT"))
			it.StdMiddleNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameLTE"))
			it.StdMiddleNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameContains"))
			it.StdMiddleNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameHasPrefix"))
			it.StdMiddleNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameHasSuffix"))
			it.StdMiddleNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameEqualFold"))
			it.StdMiddleNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdMiddleNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdMiddleNameContainsFold"))
			it.StdMiddleNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastName"))
			it.StdLastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameNEQ"))
			it.StdLastNameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameIn"))
			it.StdLastNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameNotIn"))
			it.StdLastNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameGT"))
			it.StdLastNameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameGTE"))
			it.StdLastNameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameLT"))
			it.StdLastNameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameLTE"))
			it.StdLastNameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameContains"))
			it.StdLastNameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameHasPrefix"))
			it.StdLastNameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameHasSuffix"))
			it.StdLastNameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameEqualFold"))
			it.StdLastNameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdLastNameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdLastNameContainsFold"))
			it.StdLastNameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdStudying":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdStudying"))
			it.StdStudying, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdStudyingNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdStudyingNEQ"))
			it.StdStudyingNEQ, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdStatus"))
			it.StdStatus, err = ec.unmarshalOStdStatus2ᚖmyeduateᚋentᚋcustomtypesᚐStdStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdStatusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdStatusNEQ"))
			it.StdStatusNEQ, err = ec.unmarshalOStdStatus2ᚖmyeduateᚋentᚋcustomtypesᚐStdStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdStatusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdStatusIn"))
			it.StdStatusIn, err = ec.unmarshalOStdStatus2ᚕmyeduateᚋentᚋcustomtypesᚐStdStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdStatusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdStatusNotIn"))
			it.StdStatusNotIn, err = ec.unmarshalOStdStatus2ᚕmyeduateᚋentᚋcustomtypesᚐStdStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdSex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdSex"))
			it.StdSex, err = ec.unmarshalOSex2ᚖmyeduateᚋentᚋcustomtypesᚐSex(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdSexNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdSexNEQ"))
			it.StdSexNEQ, err = ec.unmarshalOSex2ᚖmyeduateᚋentᚋcustomtypesᚐSex(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdSexIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdSexIn"))
			it.StdSexIn, err = ec.unmarshalOSex2ᚕmyeduateᚋentᚋcustomtypesᚐSexᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdSexNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdSexNotIn"))
			it.StdSexNotIn, err = ec.unmarshalOSex2ᚕmyeduateᚋentᚋcustomtypesᚐSexᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNo"))
			it.StdRegNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoNEQ"))
			it.StdRegNoNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoIn"))
			it.StdRegNoIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoNotIn"))
			it.StdRegNoNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoGT"))
			it.StdRegNoGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoGTE"))
			it.StdRegNoGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoLT"))
			it.StdRegNoLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoLTE"))
			it.StdRegNoLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoContains"))
			it.StdRegNoContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoHasPrefix"))
			it.StdRegNoHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoHasSuffix"))
			it.StdRegNoHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoEqualFold"))
			it.StdRegNoEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stdRegNoContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdRegNoContainsFold"))
			it.StdRegNoContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAuthParentInput(ctx context.Context, obj interface{}) (ent.UpdateAuthParentInput, error) {
	var it ent.UpdateAuthParentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "parent_first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_first_name"))
			it.ParentFirstName, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_middle_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_middle_name"))
			it.ParentMiddleName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_last_name"))
			it.ParentLastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_address"))
			it.ParentAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_place":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_place"))
			it.ParentPlace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_state"))
			it.ParentState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_pin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_pin"))
			it.ParentPin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_email"))
			it.ParentEmail, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_mobile"))
			it.ParentMobile, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAuthStaffInput(ctx context.Context, obj interface{}) (ent.UpdateAuthStaffInput, error) {
	var it ent.UpdateAuthStaffInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "staff_first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_first_name"))
			it.StaffFirstName, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_middle_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_middle_name"))
			it.StaffMiddleName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_last_name"))
			it.StaffLastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_address"))
			it.StaffAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_place":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_place"))
			it.StaffPlace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_state"))
			it.StaffState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_pin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_pin"))
			it.StaffPin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_email"))
			it.StaffEmail, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "staff_mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staff_mobile"))
			it.StaffMobile, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMsgChannelMessageInput(ctx context.Context, obj interface{}) (ent.UpdateMsgChannelMessageInput, error) {
	var it ent.UpdateMsgChannelMessageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "msg_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_date"))
			it.MsgDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_is_expiry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_is_expiry"))
			it.MsgIsExpiry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_expiry_date"))
			it.MsgExpiryDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_is_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_is_text"))
			it.MsgIsText, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_content"))
			it.MsgContent, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_media_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_media_type"))
			it.MsgMediaType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_media_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_media_content"))
			it.MsgMediaContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_active"))
			it.MsgActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_is_individual":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_is_individual"))
			it.MsgIsIndividual, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "msg_recv_or_sent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msg_recv_or_sent"))
			it.MsgRecvOrSent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMstCustomerInput(ctx context.Context, obj interface{}) (ent.UpdateMstCustomerInput, error) {
	var it ent.UpdateMstCustomerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cust_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_code"))
			it.CustCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_name"))
			it.CustName, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_address"))
			it.CustAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_place":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_place"))
			it.CustPlace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_state"))
			it.CustState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_pin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_pin"))
			it.CustPin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_contact_person"))
			it.CustContactPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_phone"))
			it.CustPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_email"))
			it.CustEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_mobile"))
			it.CustMobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_url"))
			it.CustURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_banner_1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_banner_1"))
			it.CustBanner1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_banner_2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_banner_2"))
			it.CustBanner2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_logo_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_logo_url"))
			it.CustLogoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_is_active"))
			it.CustIsActive, err = ec.unmarshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_status"))
			it.CustStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cust_time_zone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cust_time_zone"))
			it.CustTimeZone, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMstInstInput(ctx context.Context, obj interface{}) (ent.UpdateMstInstInput, error) {
	var it ent.UpdateMstInstInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "inst_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_code"))
			it.InstCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_name"))
			it.InstName, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_short_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_short_name"))
			it.InstShortName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_address"))
			it.InstAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_place":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_place"))
			it.InstPlace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_state"))
			it.InstState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_pin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_pin"))
			it.InstPin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_contact_person"))
			it.InstContactPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_phone"))
			it.InstPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_email"))
			it.InstEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_mobile"))
			it.InstMobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_url"))
			it.InstURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_banner_1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_banner_1"))
			it.InstBanner1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_banner_2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_banner_2"))
			it.InstBanner2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_logo_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_logo_url"))
			it.InstLogoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_is_active"))
			it.InstIsActive, err = ec.unmarshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_status"))
			it.InstStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inst_time_zone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inst_time_zone"))
			it.InstTimeZone, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMstStudentInput(ctx context.Context, obj interface{}) (ent.UpdateMstStudentInput, error) {
	var it ent.UpdateMstStudentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "std_first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_first_name"))
			it.StdFirstName, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_middle_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_middle_name"))
			it.StdMiddleName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_last_name"))
			it.StdLastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_studying":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_studying"))
			it.StdStudying, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_status"))
			it.StdStatus, err = ec.unmarshalOStdStatus2ᚖmyeduateᚋentᚋcustomtypesᚐStdStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_sex"))
			it.StdSex, err = ec.unmarshalOSex2ᚖmyeduateᚋentᚋcustomtypesᚐSex(ctx, v)
			if err != nil {
				return it, err
			}
		case "std_reg_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("std_reg_no"))
			it.StdRegNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj ent.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *ent.AuthParent:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthParent(ctx, sel, obj)
	case *ent.AuthStaff:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthStaff(ctx, sel, obj)
	case *ent.MsgChannelMessage:
		if obj == nil {
			return graphql.Null
		}
		return ec._MsgChannelMessage(ctx, sel, obj)
	case *ent.MstCustomer:
		if obj == nil {
			return graphql.Null
		}
		return ec._MstCustomer(ctx, sel, obj)
	case *ent.MstInst:
		if obj == nil {
			return graphql.Null
		}
		return ec._MstInst(ctx, sel, obj)
	case *ent.MstStudent:
		if obj == nil {
			return graphql.Null
		}
		return ec._MstStudent(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var authParentImplementors = []string{"AuthParent", "Node"}

func (ec *executionContext) _AuthParent(ctx context.Context, sel ast.SelectionSet, obj *ent.AuthParent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authParentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthParent")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_first_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_parent_first_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_middle_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_parent_middle_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_last_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_parent_last_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_address":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_parent_address(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_place":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_parent_place(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_parent_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_pin":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_parent_pin(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_parent_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent_mobile":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthParent_parent_mobile(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authStaffImplementors = []string{"AuthStaff", "Node"}

func (ec *executionContext) _AuthStaff(ctx context.Context, sel ast.SelectionSet, obj *ent.AuthStaff) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authStaffImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthStaff")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff_first_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_staff_first_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff_middle_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_staff_middle_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff_last_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_staff_last_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff_address":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_staff_address(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff_place":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_staff_place(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_staff_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff_pin":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_staff_pin(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_staff_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff_mobile":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AuthStaff_staff_mobile(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var custDataImplementors = []string{"CustData"}

func (ec *executionContext) _CustData(ctx context.Context, sel ast.SelectionSet, obj *CustData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, custDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustData")
		case "customer_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CustData_customer_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CustData_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var instDataImplementors = []string{"InstData"}

func (ec *executionContext) _InstData(ctx context.Context, sel ast.SelectionSet, obj *InstData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, instDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InstData")
		case "Inst_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._InstData_Inst_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._InstData_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var msgChannelMessageImplementors = []string{"MsgChannelMessage", "Node"}

func (ec *executionContext) _MsgChannelMessage(ctx context.Context, sel ast.SelectionSet, obj *ent.MsgChannelMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, msgChannelMessageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MsgChannelMessage")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_is_expiry":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_is_expiry(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_expiry_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_expiry_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_is_text":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_is_text(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_content":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_content(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_media_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_media_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_media_content":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_media_content(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_active":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_active(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_is_individual":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_is_individual(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msg_recv_or_sent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_msg_recv_or_sent(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessage_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var msgChannelMessageConnectionImplementors = []string{"MsgChannelMessageConnection"}

func (ec *executionContext) _MsgChannelMessageConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.MsgChannelMessageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, msgChannelMessageConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MsgChannelMessageConnection")
		case "totalCount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessageConnection_totalCount(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessageConnection_pageInfo(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessageConnection_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var msgChannelMessageEdgeImplementors = []string{"MsgChannelMessageEdge"}

func (ec *executionContext) _MsgChannelMessageEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.MsgChannelMessageEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, msgChannelMessageEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MsgChannelMessageEdge")
		case "node":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessageEdge_node(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cursor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MsgChannelMessageEdge_cursor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mstCustomerImplementors = []string{"MstCustomer", "Node"}

func (ec *executionContext) _MstCustomer(ctx context.Context, sel ast.SelectionSet, obj *ent.MstCustomer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mstCustomerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MstCustomer")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_code":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_code(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_address":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_address(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_place":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_place(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_pin":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_pin(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_contact_person":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_contact_person(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_phone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_phone(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_mobile":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_mobile(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_banner_1":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_banner_1(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_banner_2":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_banner_2(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_logo_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_logo_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_is_active":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_is_active(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_num_inst":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_num_inst(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cust_time_zone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomer_cust_time_zone(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mstCustomerConnectionImplementors = []string{"MstCustomerConnection"}

func (ec *executionContext) _MstCustomerConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.MstCustomerConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mstCustomerConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MstCustomerConnection")
		case "totalCount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomerConnection_totalCount(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomerConnection_pageInfo(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomerConnection_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mstCustomerEdgeImplementors = []string{"MstCustomerEdge"}

func (ec *executionContext) _MstCustomerEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.MstCustomerEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mstCustomerEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MstCustomerEdge")
		case "node":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomerEdge_node(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cursor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstCustomerEdge_cursor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mstInstImplementors = []string{"MstInst", "Node"}

func (ec *executionContext) _MstInst(ctx context.Context, sel ast.SelectionSet, obj *ent.MstInst) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mstInstImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MstInst")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_code":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_code(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_short_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_short_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_address":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_address(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_place":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_place(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_state":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_state(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_pin":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_pin(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_contact_person":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_contact_person(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_phone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_phone(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_mobile":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_mobile(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_banner_1":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_banner_1(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_banner_2":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_banner_2(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_logo_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_logo_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_is_active":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_is_active(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inst_time_zone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInst_inst_time_zone(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mstInstConnectionImplementors = []string{"MstInstConnection"}

func (ec *executionContext) _MstInstConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.MstInstConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mstInstConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MstInstConnection")
		case "totalCount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInstConnection_totalCount(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInstConnection_pageInfo(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInstConnection_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mstInstEdgeImplementors = []string{"MstInstEdge"}

func (ec *executionContext) _MstInstEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.MstInstEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mstInstEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MstInstEdge")
		case "node":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInstEdge_node(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cursor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstInstEdge_cursor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mstStudentImplementors = []string{"MstStudent", "Node"}

func (ec *executionContext) _MstStudent(ctx context.Context, sel ast.SelectionSet, obj *ent.MstStudent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mstStudentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MstStudent")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstStudent_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "std_first_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstStudent_std_first_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "std_middle_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstStudent_std_middle_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "std_last_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstStudent_std_last_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "std_studying":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstStudent_std_studying(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "std_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstStudent_std_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "std_sex":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstStudent_std_sex(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "std_reg_no":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MstStudent_std_reg_no(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "AddAuthParentUser":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_AddAuthParentUser(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AddAuthStaffUser":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_AddAuthStaffUser(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AddChannelMessage":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_AddChannelMessage(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AddCustomer":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_AddCustomer(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateCustomer":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateCustomer(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AddInst":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_AddInst(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateInst":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateInst(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AddStudent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_AddStudent(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *ent.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PageInfo_hasNextPage(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PageInfo_hasPreviousPage(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PageInfo_startCursor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "endCursor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PageInfo_endCursor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "GetAuthParentUserNamesByIds":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAuthParentUserNamesByIds(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAuthStaffUserIds":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAuthStaffUserIds(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "node":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "nodes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetChannelMessages":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetChannelMessages(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "ListCustomers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ListCustomers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetCustomerByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCustomerByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetCustomerIdsByNames":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCustomerIdsByNames(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "ListInsts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ListInsts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "ListInstsByCustID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ListInstsByCustID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetInstByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetInstByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetInstIdsByNames":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetInstIdsByNames(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetStudentNamesByIds":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetStudentNamesByIds(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "__schema":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "GetChannelMessagesBySubscription":
		return ec._Subscription_GetChannelMessagesBySubscription(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var userNamesByIdImplementors = []string{"UserNamesById"}

func (ec *executionContext) _UserNamesById(ctx context.Context, sel ast.SelectionSet, obj *UserNamesByID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userNamesByIdImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserNamesById")
		case "first_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UserNamesById_first_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "middle_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UserNamesById_middle_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UserNamesById_last_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UserNamesById_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "locations":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_locations(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_isRepeatable(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_defaultValue(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "types":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_types(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_queryType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_mutationType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subscriptionType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_subscriptionType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "directives":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_directives(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_kind(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_fields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "interfaces":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_interfaces(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "possibleTypes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_possibleTypes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "enumValues":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_enumValues(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "inputFields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_inputFields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ofType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_ofType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "specifiedByURL":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_specifiedByURL(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAuthParent2myeduateᚋentᚐAuthParent(ctx context.Context, sel ast.SelectionSet, v ent.AuthParent) graphql.Marshaler {
	return ec._AuthParent(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthParent2ᚖmyeduateᚋentᚐAuthParent(ctx context.Context, sel ast.SelectionSet, v *ent.AuthParent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthParent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthParentWhereInput2ᚖmyeduateᚋentᚐAuthParentWhereInput(ctx context.Context, v interface{}) (*ent.AuthParentWhereInput, error) {
	res, err := ec.unmarshalInputAuthParentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuthStaff2myeduateᚋentᚐAuthStaff(ctx context.Context, sel ast.SelectionSet, v ent.AuthStaff) graphql.Marshaler {
	return ec._AuthStaff(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthStaff2ᚖmyeduateᚋentᚐAuthStaff(ctx context.Context, sel ast.SelectionSet, v *ent.AuthStaff) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthStaff(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthStaffWhereInput2ᚖmyeduateᚋentᚐAuthStaffWhereInput(ctx context.Context, v interface{}) (*ent.AuthStaffWhereInput, error) {
	res, err := ec.unmarshalInputAuthStaffWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCreateAuthParentInput2myeduateᚋentᚐCreateAuthParentInput(ctx context.Context, v interface{}) (ent.CreateAuthParentInput, error) {
	res, err := ec.unmarshalInputCreateAuthParentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateAuthStaffInput2myeduateᚋentᚐCreateAuthStaffInput(ctx context.Context, v interface{}) (ent.CreateAuthStaffInput, error) {
	res, err := ec.unmarshalInputCreateAuthStaffInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMsgChannelMessageInput2myeduateᚋentᚐCreateMsgChannelMessageInput(ctx context.Context, v interface{}) (ent.CreateMsgChannelMessageInput, error) {
	res, err := ec.unmarshalInputCreateMsgChannelMessageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMstCustomerInput2myeduateᚋentᚐCreateMstCustomerInput(ctx context.Context, v interface{}) (ent.CreateMstCustomerInput, error) {
	res, err := ec.unmarshalInputCreateMstCustomerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMstInstInput2myeduateᚋentᚐCreateMstInstInput(ctx context.Context, v interface{}) (ent.CreateMstInstInput, error) {
	res, err := ec.unmarshalInputCreateMstInstInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMstStudentInput2myeduateᚋentᚐCreateMstStudentInput(ctx context.Context, v interface{}) (ent.CreateMstStudentInput, error) {
	res, err := ec.unmarshalInputCreateMstStudentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCursor2myeduateᚋentᚐCursor(ctx context.Context, v interface{}) (ent.Cursor, error) {
	var res ent.Cursor
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2myeduateᚋentᚐCursor(ctx context.Context, sel ast.SelectionSet, v ent.Cursor) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCustData2ᚕᚖmyeduateᚐCustDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*CustData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustData2ᚖmyeduateᚐCustData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCustData2ᚖmyeduateᚐCustData(ctx context.Context, sel ast.SelectionSet, v *CustData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNInstData2ᚕᚖmyeduateᚐInstDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*InstData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInstData2ᚖmyeduateᚐInstData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNInstData2ᚖmyeduateᚐInstData(ctx context.Context, sel ast.SelectionSet, v *InstData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._InstData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNIsActive2myeduateᚋentᚋcustomtypesᚐIsActive(ctx context.Context, v interface{}) (customtypes.IsActive, error) {
	var res customtypes.IsActive
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIsActive2myeduateᚋentᚋcustomtypesᚐIsActive(ctx context.Context, sel ast.SelectionSet, v customtypes.IsActive) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMsgChannelMessage2myeduateᚋentᚐMsgChannelMessage(ctx context.Context, sel ast.SelectionSet, v ent.MsgChannelMessage) graphql.Marshaler {
	return ec._MsgChannelMessage(ctx, sel, &v)
}

func (ec *executionContext) marshalNMsgChannelMessage2ᚖmyeduateᚋentᚐMsgChannelMessage(ctx context.Context, sel ast.SelectionSet, v *ent.MsgChannelMessage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MsgChannelMessage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMsgChannelMessageWhereInput2ᚖmyeduateᚋentᚐMsgChannelMessageWhereInput(ctx context.Context, v interface{}) (*ent.MsgChannelMessageWhereInput, error) {
	res, err := ec.unmarshalInputMsgChannelMessageWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMstCustomer2myeduateᚋentᚐMstCustomer(ctx context.Context, sel ast.SelectionSet, v ent.MstCustomer) graphql.Marshaler {
	return ec._MstCustomer(ctx, sel, &v)
}

func (ec *executionContext) marshalNMstCustomer2ᚖmyeduateᚋentᚐMstCustomer(ctx context.Context, sel ast.SelectionSet, v *ent.MstCustomer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MstCustomer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMstCustomerWhereInput2ᚖmyeduateᚋentᚐMstCustomerWhereInput(ctx context.Context, v interface{}) (*ent.MstCustomerWhereInput, error) {
	res, err := ec.unmarshalInputMstCustomerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMstInst2myeduateᚋentᚐMstInst(ctx context.Context, sel ast.SelectionSet, v ent.MstInst) graphql.Marshaler {
	return ec._MstInst(ctx, sel, &v)
}

func (ec *executionContext) marshalNMstInst2ᚖmyeduateᚋentᚐMstInst(ctx context.Context, sel ast.SelectionSet, v *ent.MstInst) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MstInst(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMstInstWhereInput2ᚖmyeduateᚋentᚐMstInstWhereInput(ctx context.Context, v interface{}) (*ent.MstInstWhereInput, error) {
	res, err := ec.unmarshalInputMstInstWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMstStudent2myeduateᚋentᚐMstStudent(ctx context.Context, sel ast.SelectionSet, v ent.MstStudent) graphql.Marshaler {
	return ec._MstStudent(ctx, sel, &v)
}

func (ec *executionContext) marshalNMstStudent2ᚖmyeduateᚋentᚐMstStudent(ctx context.Context, sel ast.SelectionSet, v *ent.MstStudent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MstStudent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMstStudentWhereInput2ᚖmyeduateᚋentᚐMstStudentWhereInput(ctx context.Context, v interface{}) (*ent.MstStudentWhereInput, error) {
	res, err := ec.unmarshalInputMstStudentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNode2ᚕmyeduateᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v []ent.Noder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2myeduateᚋentᚐNoder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNOrderDirection2myeduateᚋentᚐOrderDirection(ctx context.Context, v interface{}) (ent.OrderDirection, error) {
	var res ent.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2myeduateᚋentᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v ent.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2myeduateᚋentᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v ent.PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNSex2myeduateᚋentᚋcustomtypesᚐSex(ctx context.Context, v interface{}) (customtypes.Sex, error) {
	var res customtypes.Sex
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSex2myeduateᚋentᚋcustomtypesᚐSex(ctx context.Context, sel ast.SelectionSet, v customtypes.Sex) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNStdStatus2myeduateᚋentᚋcustomtypesᚐStdStatus(ctx context.Context, v interface{}) (customtypes.StdStatus, error) {
	var res customtypes.StdStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStdStatus2myeduateᚋentᚋcustomtypesᚐStdStatus(ctx context.Context, sel ast.SelectionSet, v customtypes.StdStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateMstCustomerInput2myeduateᚋentᚐUpdateMstCustomerInput(ctx context.Context, v interface{}) (ent.UpdateMstCustomerInput, error) {
	res, err := ec.unmarshalInputUpdateMstCustomerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMstInstInput2myeduateᚋentᚐUpdateMstInstInput(ctx context.Context, v interface{}) (ent.UpdateMstInstInput, error) {
	res, err := ec.unmarshalInputUpdateMstInstInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserNamesById2ᚕᚖmyeduateᚐUserNamesByIDᚄ(ctx context.Context, sel ast.SelectionSet, v []*UserNamesByID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserNamesById2ᚖmyeduateᚐUserNamesByID(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserNamesById2ᚖmyeduateᚐUserNamesByID(ctx context.Context, sel ast.SelectionSet, v *UserNamesByID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserNamesById(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAuthParentWhereInput2ᚕᚖmyeduateᚋentᚐAuthParentWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.AuthParentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.AuthParentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAuthParentWhereInput2ᚖmyeduateᚋentᚐAuthParentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAuthParentWhereInput2ᚖmyeduateᚋentᚐAuthParentWhereInput(ctx context.Context, v interface{}) (*ent.AuthParentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuthParentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuthStaffWhereInput2ᚕᚖmyeduateᚋentᚐAuthStaffWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.AuthStaffWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.AuthStaffWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAuthStaffWhereInput2ᚖmyeduateᚋentᚐAuthStaffWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAuthStaffWhereInput2ᚖmyeduateᚋentᚐAuthStaffWhereInput(ctx context.Context, v interface{}) (*ent.AuthStaffWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuthStaffWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx context.Context, v interface{}) (*ent.Cursor, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.Cursor)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖmyeduateᚋentᚐCursor(ctx context.Context, sel ast.SelectionSet, v *ent.Cursor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOIsActive2ᚕmyeduateᚋentᚋcustomtypesᚐIsActiveᚄ(ctx context.Context, v interface{}) ([]customtypes.IsActive, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]customtypes.IsActive, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIsActive2myeduateᚋentᚋcustomtypesᚐIsActive(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOIsActive2ᚕmyeduateᚋentᚋcustomtypesᚐIsActiveᚄ(ctx context.Context, sel ast.SelectionSet, v []customtypes.IsActive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIsActive2myeduateᚋentᚋcustomtypesᚐIsActive(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx context.Context, v interface{}) (*customtypes.IsActive, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(customtypes.IsActive)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIsActive2ᚖmyeduateᚋentᚋcustomtypesᚐIsActive(ctx context.Context, sel ast.SelectionSet, v *customtypes.IsActive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMsgChannelMessage2ᚕᚖmyeduateᚋentᚐMsgChannelMessageᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.MsgChannelMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMsgChannelMessage2ᚖmyeduateᚋentᚐMsgChannelMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMsgChannelMessage2ᚖmyeduateᚋentᚐMsgChannelMessage(ctx context.Context, sel ast.SelectionSet, v *ent.MsgChannelMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MsgChannelMessage(ctx, sel, v)
}

func (ec *executionContext) marshalOMsgChannelMessageEdge2ᚕᚖmyeduateᚋentᚐMsgChannelMessageEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.MsgChannelMessageEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMsgChannelMessageEdge2ᚖmyeduateᚋentᚐMsgChannelMessageEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMsgChannelMessageEdge2ᚖmyeduateᚋentᚐMsgChannelMessageEdge(ctx context.Context, sel ast.SelectionSet, v *ent.MsgChannelMessageEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MsgChannelMessageEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMsgChannelMessageOrderField2ᚖmyeduateᚋentᚐMsgChannelMessageOrderField(ctx context.Context, v interface{}) (*ent.MsgChannelMessageOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.MsgChannelMessageOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMsgChannelMessageOrderField2ᚖmyeduateᚋentᚐMsgChannelMessageOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.MsgChannelMessageOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMsgChannelMessageWhereInput2ᚕᚖmyeduateᚋentᚐMsgChannelMessageWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.MsgChannelMessageWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.MsgChannelMessageWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMsgChannelMessageWhereInput2ᚖmyeduateᚋentᚐMsgChannelMessageWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMsgChannelMessageWhereInput2ᚖmyeduateᚋentᚐMsgChannelMessageWhereInput(ctx context.Context, v interface{}) (*ent.MsgChannelMessageWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMsgChannelMessageWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMstCustomer2ᚖmyeduateᚋentᚐMstCustomer(ctx context.Context, sel ast.SelectionSet, v *ent.MstCustomer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MstCustomer(ctx, sel, v)
}

func (ec *executionContext) marshalOMstCustomerConnection2ᚖmyeduateᚋentᚐMstCustomerConnection(ctx context.Context, sel ast.SelectionSet, v *ent.MstCustomerConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MstCustomerConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOMstCustomerEdge2ᚕᚖmyeduateᚋentᚐMstCustomerEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.MstCustomerEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMstCustomerEdge2ᚖmyeduateᚋentᚐMstCustomerEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMstCustomerEdge2ᚖmyeduateᚋentᚐMstCustomerEdge(ctx context.Context, sel ast.SelectionSet, v *ent.MstCustomerEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MstCustomerEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMstCustomerOrder2ᚖmyeduateᚋentᚐMstCustomerOrder(ctx context.Context, v interface{}) (*ent.MstCustomerOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMstCustomerOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMstCustomerOrderField2ᚖmyeduateᚋentᚐMstCustomerOrderField(ctx context.Context, v interface{}) (*ent.MstCustomerOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.MstCustomerOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMstCustomerOrderField2ᚖmyeduateᚋentᚐMstCustomerOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.MstCustomerOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMstCustomerWhereInput2ᚕᚖmyeduateᚋentᚐMstCustomerWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.MstCustomerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.MstCustomerWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMstCustomerWhereInput2ᚖmyeduateᚋentᚐMstCustomerWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMstCustomerWhereInput2ᚖmyeduateᚋentᚐMstCustomerWhereInput(ctx context.Context, v interface{}) (*ent.MstCustomerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMstCustomerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMstInst2ᚖmyeduateᚋentᚐMstInst(ctx context.Context, sel ast.SelectionSet, v *ent.MstInst) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MstInst(ctx, sel, v)
}

func (ec *executionContext) marshalOMstInstConnection2ᚖmyeduateᚋentᚐMstInstConnection(ctx context.Context, sel ast.SelectionSet, v *ent.MstInstConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MstInstConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOMstInstEdge2ᚕᚖmyeduateᚋentᚐMstInstEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.MstInstEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMstInstEdge2ᚖmyeduateᚋentᚐMstInstEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMstInstEdge2ᚖmyeduateᚋentᚐMstInstEdge(ctx context.Context, sel ast.SelectionSet, v *ent.MstInstEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MstInstEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMstInstOrder2ᚖmyeduateᚋentᚐMstInstOrder(ctx context.Context, v interface{}) (*ent.MstInstOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMstInstOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMstInstOrderField2ᚖmyeduateᚋentᚐMstInstOrderField(ctx context.Context, v interface{}) (*ent.MstInstOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.MstInstOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMstInstOrderField2ᚖmyeduateᚋentᚐMstInstOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.MstInstOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMstInstWhereInput2ᚕᚖmyeduateᚋentᚐMstInstWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.MstInstWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.MstInstWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMstInstWhereInput2ᚖmyeduateᚋentᚐMstInstWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMstInstWhereInput2ᚖmyeduateᚋentᚐMstInstWhereInput(ctx context.Context, v interface{}) (*ent.MstInstWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMstInstWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMstStudentWhereInput2ᚕᚖmyeduateᚋentᚐMstStudentWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.MstStudentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.MstStudentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMstStudentWhereInput2ᚖmyeduateᚋentᚐMstStudentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMstStudentWhereInput2ᚖmyeduateᚋentᚐMstStudentWhereInput(ctx context.Context, v interface{}) (*ent.MstStudentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMstStudentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONode2myeduateᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v ent.Noder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSex2myeduateᚋentᚋcustomtypesᚐSex(ctx context.Context, v interface{}) (customtypes.Sex, error) {
	var res customtypes.Sex
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSex2myeduateᚋentᚋcustomtypesᚐSex(ctx context.Context, sel ast.SelectionSet, v customtypes.Sex) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOSex2ᚕmyeduateᚋentᚋcustomtypesᚐSexᚄ(ctx context.Context, v interface{}) ([]customtypes.Sex, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]customtypes.Sex, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSex2myeduateᚋentᚋcustomtypesᚐSex(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSex2ᚕmyeduateᚋentᚋcustomtypesᚐSexᚄ(ctx context.Context, sel ast.SelectionSet, v []customtypes.Sex) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSex2myeduateᚋentᚋcustomtypesᚐSex(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOSex2ᚖmyeduateᚋentᚋcustomtypesᚐSex(ctx context.Context, v interface{}) (*customtypes.Sex, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(customtypes.Sex)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSex2ᚖmyeduateᚋentᚋcustomtypesᚐSex(ctx context.Context, sel ast.SelectionSet, v *customtypes.Sex) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOStdStatus2ᚕmyeduateᚋentᚋcustomtypesᚐStdStatusᚄ(ctx context.Context, v interface{}) ([]customtypes.StdStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]customtypes.StdStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStdStatus2myeduateᚋentᚋcustomtypesᚐStdStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOStdStatus2ᚕmyeduateᚋentᚋcustomtypesᚐStdStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []customtypes.StdStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStdStatus2myeduateᚋentᚋcustomtypesᚐStdStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStdStatus2ᚖmyeduateᚋentᚋcustomtypesᚐStdStatus(ctx context.Context, v interface{}) (*customtypes.StdStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(customtypes.StdStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStdStatus2ᚖmyeduateᚋentᚋcustomtypesᚐStdStatus(ctx context.Context, sel ast.SelectionSet, v *customtypes.StdStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2timeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2timeᚐTime(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************

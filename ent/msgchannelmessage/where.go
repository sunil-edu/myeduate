// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package msgchannelmessage

import (
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// MsgDate applies equality check predicate on the "msg_date" field. It's identical to MsgDateEQ.
func MsgDate(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgDate), v))
	})
}

// MsgIsExpiry applies equality check predicate on the "msg_is_expiry" field. It's identical to MsgIsExpiryEQ.
func MsgIsExpiry(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgIsExpiry), v))
	})
}

// MsgExpiryDate applies equality check predicate on the "msg_expiry_date" field. It's identical to MsgExpiryDateEQ.
func MsgExpiryDate(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgExpiryDate), v))
	})
}

// MsgIsText applies equality check predicate on the "msg_is_text" field. It's identical to MsgIsTextEQ.
func MsgIsText(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgIsText), v))
	})
}

// MsgContent applies equality check predicate on the "msg_content" field. It's identical to MsgContentEQ.
func MsgContent(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgContent), v))
	})
}

// MsgMediaType applies equality check predicate on the "msg_media_type" field. It's identical to MsgMediaTypeEQ.
func MsgMediaType(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaContent applies equality check predicate on the "msg_media_content" field. It's identical to MsgMediaContentEQ.
func MsgMediaContent(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgMediaContent), v))
	})
}

// MsgActive applies equality check predicate on the "msg_active" field. It's identical to MsgActiveEQ.
func MsgActive(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgActive), v))
	})
}

// MsgIsIndividual applies equality check predicate on the "msg_is_individual" field. It's identical to MsgIsIndividualEQ.
func MsgIsIndividual(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgIsIndividual), v))
	})
}

// MsgRecvOrSent applies equality check predicate on the "msg_recv_or_sent" field. It's identical to MsgRecvOrSentEQ.
func MsgRecvOrSent(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgRecvOrSent), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// MsgDateEQ applies the EQ predicate on the "msg_date" field.
func MsgDateEQ(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgDate), v))
	})
}

// MsgDateNEQ applies the NEQ predicate on the "msg_date" field.
func MsgDateNEQ(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgDate), v))
	})
}

// MsgDateIn applies the In predicate on the "msg_date" field.
func MsgDateIn(vs ...time.Time) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgDate), v...))
	})
}

// MsgDateNotIn applies the NotIn predicate on the "msg_date" field.
func MsgDateNotIn(vs ...time.Time) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgDate), v...))
	})
}

// MsgDateGT applies the GT predicate on the "msg_date" field.
func MsgDateGT(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgDate), v))
	})
}

// MsgDateGTE applies the GTE predicate on the "msg_date" field.
func MsgDateGTE(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgDate), v))
	})
}

// MsgDateLT applies the LT predicate on the "msg_date" field.
func MsgDateLT(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgDate), v))
	})
}

// MsgDateLTE applies the LTE predicate on the "msg_date" field.
func MsgDateLTE(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgDate), v))
	})
}

// MsgDateIsNil applies the IsNil predicate on the "msg_date" field.
func MsgDateIsNil() predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMsgDate)))
	})
}

// MsgDateNotNil applies the NotNil predicate on the "msg_date" field.
func MsgDateNotNil() predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMsgDate)))
	})
}

// MsgIsExpiryEQ applies the EQ predicate on the "msg_is_expiry" field.
func MsgIsExpiryEQ(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgIsExpiry), v))
	})
}

// MsgIsExpiryNEQ applies the NEQ predicate on the "msg_is_expiry" field.
func MsgIsExpiryNEQ(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgIsExpiry), v))
	})
}

// MsgExpiryDateEQ applies the EQ predicate on the "msg_expiry_date" field.
func MsgExpiryDateEQ(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgExpiryDate), v))
	})
}

// MsgExpiryDateNEQ applies the NEQ predicate on the "msg_expiry_date" field.
func MsgExpiryDateNEQ(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgExpiryDate), v))
	})
}

// MsgExpiryDateIn applies the In predicate on the "msg_expiry_date" field.
func MsgExpiryDateIn(vs ...time.Time) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgExpiryDate), v...))
	})
}

// MsgExpiryDateNotIn applies the NotIn predicate on the "msg_expiry_date" field.
func MsgExpiryDateNotIn(vs ...time.Time) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgExpiryDate), v...))
	})
}

// MsgExpiryDateGT applies the GT predicate on the "msg_expiry_date" field.
func MsgExpiryDateGT(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgExpiryDate), v))
	})
}

// MsgExpiryDateGTE applies the GTE predicate on the "msg_expiry_date" field.
func MsgExpiryDateGTE(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgExpiryDate), v))
	})
}

// MsgExpiryDateLT applies the LT predicate on the "msg_expiry_date" field.
func MsgExpiryDateLT(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgExpiryDate), v))
	})
}

// MsgExpiryDateLTE applies the LTE predicate on the "msg_expiry_date" field.
func MsgExpiryDateLTE(v time.Time) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgExpiryDate), v))
	})
}

// MsgExpiryDateIsNil applies the IsNil predicate on the "msg_expiry_date" field.
func MsgExpiryDateIsNil() predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMsgExpiryDate)))
	})
}

// MsgExpiryDateNotNil applies the NotNil predicate on the "msg_expiry_date" field.
func MsgExpiryDateNotNil() predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMsgExpiryDate)))
	})
}

// MsgIsTextEQ applies the EQ predicate on the "msg_is_text" field.
func MsgIsTextEQ(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgIsText), v))
	})
}

// MsgIsTextNEQ applies the NEQ predicate on the "msg_is_text" field.
func MsgIsTextNEQ(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgIsText), v))
	})
}

// MsgContentEQ applies the EQ predicate on the "msg_content" field.
func MsgContentEQ(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgContent), v))
	})
}

// MsgContentNEQ applies the NEQ predicate on the "msg_content" field.
func MsgContentNEQ(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgContent), v))
	})
}

// MsgContentIn applies the In predicate on the "msg_content" field.
func MsgContentIn(vs ...string) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgContent), v...))
	})
}

// MsgContentNotIn applies the NotIn predicate on the "msg_content" field.
func MsgContentNotIn(vs ...string) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgContent), v...))
	})
}

// MsgContentGT applies the GT predicate on the "msg_content" field.
func MsgContentGT(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgContent), v))
	})
}

// MsgContentGTE applies the GTE predicate on the "msg_content" field.
func MsgContentGTE(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgContent), v))
	})
}

// MsgContentLT applies the LT predicate on the "msg_content" field.
func MsgContentLT(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgContent), v))
	})
}

// MsgContentLTE applies the LTE predicate on the "msg_content" field.
func MsgContentLTE(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgContent), v))
	})
}

// MsgContentContains applies the Contains predicate on the "msg_content" field.
func MsgContentContains(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMsgContent), v))
	})
}

// MsgContentHasPrefix applies the HasPrefix predicate on the "msg_content" field.
func MsgContentHasPrefix(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMsgContent), v))
	})
}

// MsgContentHasSuffix applies the HasSuffix predicate on the "msg_content" field.
func MsgContentHasSuffix(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMsgContent), v))
	})
}

// MsgContentEqualFold applies the EqualFold predicate on the "msg_content" field.
func MsgContentEqualFold(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMsgContent), v))
	})
}

// MsgContentContainsFold applies the ContainsFold predicate on the "msg_content" field.
func MsgContentContainsFold(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMsgContent), v))
	})
}

// MsgMediaTypeEQ applies the EQ predicate on the "msg_media_type" field.
func MsgMediaTypeEQ(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeNEQ applies the NEQ predicate on the "msg_media_type" field.
func MsgMediaTypeNEQ(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeIn applies the In predicate on the "msg_media_type" field.
func MsgMediaTypeIn(vs ...string) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgMediaType), v...))
	})
}

// MsgMediaTypeNotIn applies the NotIn predicate on the "msg_media_type" field.
func MsgMediaTypeNotIn(vs ...string) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgMediaType), v...))
	})
}

// MsgMediaTypeGT applies the GT predicate on the "msg_media_type" field.
func MsgMediaTypeGT(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeGTE applies the GTE predicate on the "msg_media_type" field.
func MsgMediaTypeGTE(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeLT applies the LT predicate on the "msg_media_type" field.
func MsgMediaTypeLT(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeLTE applies the LTE predicate on the "msg_media_type" field.
func MsgMediaTypeLTE(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeContains applies the Contains predicate on the "msg_media_type" field.
func MsgMediaTypeContains(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeHasPrefix applies the HasPrefix predicate on the "msg_media_type" field.
func MsgMediaTypeHasPrefix(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeHasSuffix applies the HasSuffix predicate on the "msg_media_type" field.
func MsgMediaTypeHasSuffix(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeEqualFold applies the EqualFold predicate on the "msg_media_type" field.
func MsgMediaTypeEqualFold(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaTypeContainsFold applies the ContainsFold predicate on the "msg_media_type" field.
func MsgMediaTypeContainsFold(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMsgMediaType), v))
	})
}

// MsgMediaContentEQ applies the EQ predicate on the "msg_media_content" field.
func MsgMediaContentEQ(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentNEQ applies the NEQ predicate on the "msg_media_content" field.
func MsgMediaContentNEQ(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentIn applies the In predicate on the "msg_media_content" field.
func MsgMediaContentIn(vs ...string) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgMediaContent), v...))
	})
}

// MsgMediaContentNotIn applies the NotIn predicate on the "msg_media_content" field.
func MsgMediaContentNotIn(vs ...string) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgMediaContent), v...))
	})
}

// MsgMediaContentGT applies the GT predicate on the "msg_media_content" field.
func MsgMediaContentGT(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentGTE applies the GTE predicate on the "msg_media_content" field.
func MsgMediaContentGTE(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentLT applies the LT predicate on the "msg_media_content" field.
func MsgMediaContentLT(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentLTE applies the LTE predicate on the "msg_media_content" field.
func MsgMediaContentLTE(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentContains applies the Contains predicate on the "msg_media_content" field.
func MsgMediaContentContains(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentHasPrefix applies the HasPrefix predicate on the "msg_media_content" field.
func MsgMediaContentHasPrefix(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentHasSuffix applies the HasSuffix predicate on the "msg_media_content" field.
func MsgMediaContentHasSuffix(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentEqualFold applies the EqualFold predicate on the "msg_media_content" field.
func MsgMediaContentEqualFold(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMsgMediaContent), v))
	})
}

// MsgMediaContentContainsFold applies the ContainsFold predicate on the "msg_media_content" field.
func MsgMediaContentContainsFold(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMsgMediaContent), v))
	})
}

// MsgActiveEQ applies the EQ predicate on the "msg_active" field.
func MsgActiveEQ(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgActive), v))
	})
}

// MsgActiveNEQ applies the NEQ predicate on the "msg_active" field.
func MsgActiveNEQ(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgActive), v))
	})
}

// MsgIsIndividualEQ applies the EQ predicate on the "msg_is_individual" field.
func MsgIsIndividualEQ(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgIsIndividual), v))
	})
}

// MsgIsIndividualNEQ applies the NEQ predicate on the "msg_is_individual" field.
func MsgIsIndividualNEQ(v bool) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgIsIndividual), v))
	})
}

// MsgRecvOrSentEQ applies the EQ predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentEQ(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentNEQ applies the NEQ predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentNEQ(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentIn applies the In predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentIn(vs ...string) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgRecvOrSent), v...))
	})
}

// MsgRecvOrSentNotIn applies the NotIn predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentNotIn(vs ...string) predicate.MsgChannelMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgRecvOrSent), v...))
	})
}

// MsgRecvOrSentGT applies the GT predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentGT(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentGTE applies the GTE predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentGTE(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentLT applies the LT predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentLT(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentLTE applies the LTE predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentLTE(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentContains applies the Contains predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentContains(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentHasPrefix applies the HasPrefix predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentHasPrefix(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentHasSuffix applies the HasSuffix predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentHasSuffix(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentEqualFold applies the EqualFold predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentEqualFold(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMsgRecvOrSent), v))
	})
}

// MsgRecvOrSentContainsFold applies the ContainsFold predicate on the "msg_recv_or_sent" field.
func MsgRecvOrSentContainsFold(v string) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMsgRecvOrSent), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MsgChannelMessage) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MsgChannelMessage) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MsgChannelMessage) predicate.MsgChannelMessage {
	return predicate.MsgChannelMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}

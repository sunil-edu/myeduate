// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package authparent

import (
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ParentFirstName applies equality check predicate on the "parent_first_name" field. It's identical to ParentFirstNameEQ.
func ParentFirstName(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentFirstName), v))
	})
}

// ParentMiddleName applies equality check predicate on the "parent_middle_name" field. It's identical to ParentMiddleNameEQ.
func ParentMiddleName(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentMiddleName), v))
	})
}

// ParentLastName applies equality check predicate on the "parent_last_name" field. It's identical to ParentLastNameEQ.
func ParentLastName(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentLastName), v))
	})
}

// ParentAddress applies equality check predicate on the "parent_address" field. It's identical to ParentAddressEQ.
func ParentAddress(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentAddress), v))
	})
}

// ParentPlace applies equality check predicate on the "parent_place" field. It's identical to ParentPlaceEQ.
func ParentPlace(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentPlace), v))
	})
}

// ParentState applies equality check predicate on the "parent_state" field. It's identical to ParentStateEQ.
func ParentState(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentState), v))
	})
}

// ParentPin applies equality check predicate on the "parent_pin" field. It's identical to ParentPinEQ.
func ParentPin(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentPin), v))
	})
}

// ParentEmail applies equality check predicate on the "parent_email" field. It's identical to ParentEmailEQ.
func ParentEmail(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentEmail), v))
	})
}

// ParentMobile applies equality check predicate on the "parent_mobile" field. It's identical to ParentMobileEQ.
func ParentMobile(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentMobile), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ParentFirstNameEQ applies the EQ predicate on the "parent_first_name" field.
func ParentFirstNameEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameNEQ applies the NEQ predicate on the "parent_first_name" field.
func ParentFirstNameNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameIn applies the In predicate on the "parent_first_name" field.
func ParentFirstNameIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentFirstName), v...))
	})
}

// ParentFirstNameNotIn applies the NotIn predicate on the "parent_first_name" field.
func ParentFirstNameNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentFirstName), v...))
	})
}

// ParentFirstNameGT applies the GT predicate on the "parent_first_name" field.
func ParentFirstNameGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameGTE applies the GTE predicate on the "parent_first_name" field.
func ParentFirstNameGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameLT applies the LT predicate on the "parent_first_name" field.
func ParentFirstNameLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameLTE applies the LTE predicate on the "parent_first_name" field.
func ParentFirstNameLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameContains applies the Contains predicate on the "parent_first_name" field.
func ParentFirstNameContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameHasPrefix applies the HasPrefix predicate on the "parent_first_name" field.
func ParentFirstNameHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameHasSuffix applies the HasSuffix predicate on the "parent_first_name" field.
func ParentFirstNameHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameEqualFold applies the EqualFold predicate on the "parent_first_name" field.
func ParentFirstNameEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameContainsFold applies the ContainsFold predicate on the "parent_first_name" field.
func ParentFirstNameContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentFirstName), v))
	})
}

// ParentMiddleNameEQ applies the EQ predicate on the "parent_middle_name" field.
func ParentMiddleNameEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameNEQ applies the NEQ predicate on the "parent_middle_name" field.
func ParentMiddleNameNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameIn applies the In predicate on the "parent_middle_name" field.
func ParentMiddleNameIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentMiddleName), v...))
	})
}

// ParentMiddleNameNotIn applies the NotIn predicate on the "parent_middle_name" field.
func ParentMiddleNameNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentMiddleName), v...))
	})
}

// ParentMiddleNameGT applies the GT predicate on the "parent_middle_name" field.
func ParentMiddleNameGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameGTE applies the GTE predicate on the "parent_middle_name" field.
func ParentMiddleNameGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameLT applies the LT predicate on the "parent_middle_name" field.
func ParentMiddleNameLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameLTE applies the LTE predicate on the "parent_middle_name" field.
func ParentMiddleNameLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameContains applies the Contains predicate on the "parent_middle_name" field.
func ParentMiddleNameContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameHasPrefix applies the HasPrefix predicate on the "parent_middle_name" field.
func ParentMiddleNameHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameHasSuffix applies the HasSuffix predicate on the "parent_middle_name" field.
func ParentMiddleNameHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameEqualFold applies the EqualFold predicate on the "parent_middle_name" field.
func ParentMiddleNameEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameContainsFold applies the ContainsFold predicate on the "parent_middle_name" field.
func ParentMiddleNameContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentMiddleName), v))
	})
}

// ParentLastNameEQ applies the EQ predicate on the "parent_last_name" field.
func ParentLastNameEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameNEQ applies the NEQ predicate on the "parent_last_name" field.
func ParentLastNameNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameIn applies the In predicate on the "parent_last_name" field.
func ParentLastNameIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentLastName), v...))
	})
}

// ParentLastNameNotIn applies the NotIn predicate on the "parent_last_name" field.
func ParentLastNameNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentLastName), v...))
	})
}

// ParentLastNameGT applies the GT predicate on the "parent_last_name" field.
func ParentLastNameGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameGTE applies the GTE predicate on the "parent_last_name" field.
func ParentLastNameGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameLT applies the LT predicate on the "parent_last_name" field.
func ParentLastNameLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameLTE applies the LTE predicate on the "parent_last_name" field.
func ParentLastNameLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameContains applies the Contains predicate on the "parent_last_name" field.
func ParentLastNameContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameHasPrefix applies the HasPrefix predicate on the "parent_last_name" field.
func ParentLastNameHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameHasSuffix applies the HasSuffix predicate on the "parent_last_name" field.
func ParentLastNameHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameEqualFold applies the EqualFold predicate on the "parent_last_name" field.
func ParentLastNameEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameContainsFold applies the ContainsFold predicate on the "parent_last_name" field.
func ParentLastNameContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentLastName), v))
	})
}

// ParentAddressEQ applies the EQ predicate on the "parent_address" field.
func ParentAddressEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentAddress), v))
	})
}

// ParentAddressNEQ applies the NEQ predicate on the "parent_address" field.
func ParentAddressNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentAddress), v))
	})
}

// ParentAddressIn applies the In predicate on the "parent_address" field.
func ParentAddressIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentAddress), v...))
	})
}

// ParentAddressNotIn applies the NotIn predicate on the "parent_address" field.
func ParentAddressNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentAddress), v...))
	})
}

// ParentAddressGT applies the GT predicate on the "parent_address" field.
func ParentAddressGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentAddress), v))
	})
}

// ParentAddressGTE applies the GTE predicate on the "parent_address" field.
func ParentAddressGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentAddress), v))
	})
}

// ParentAddressLT applies the LT predicate on the "parent_address" field.
func ParentAddressLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentAddress), v))
	})
}

// ParentAddressLTE applies the LTE predicate on the "parent_address" field.
func ParentAddressLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentAddress), v))
	})
}

// ParentAddressContains applies the Contains predicate on the "parent_address" field.
func ParentAddressContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentAddress), v))
	})
}

// ParentAddressHasPrefix applies the HasPrefix predicate on the "parent_address" field.
func ParentAddressHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentAddress), v))
	})
}

// ParentAddressHasSuffix applies the HasSuffix predicate on the "parent_address" field.
func ParentAddressHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentAddress), v))
	})
}

// ParentAddressEqualFold applies the EqualFold predicate on the "parent_address" field.
func ParentAddressEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentAddress), v))
	})
}

// ParentAddressContainsFold applies the ContainsFold predicate on the "parent_address" field.
func ParentAddressContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentAddress), v))
	})
}

// ParentPlaceEQ applies the EQ predicate on the "parent_place" field.
func ParentPlaceEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceNEQ applies the NEQ predicate on the "parent_place" field.
func ParentPlaceNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceIn applies the In predicate on the "parent_place" field.
func ParentPlaceIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentPlace), v...))
	})
}

// ParentPlaceNotIn applies the NotIn predicate on the "parent_place" field.
func ParentPlaceNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentPlace), v...))
	})
}

// ParentPlaceGT applies the GT predicate on the "parent_place" field.
func ParentPlaceGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceGTE applies the GTE predicate on the "parent_place" field.
func ParentPlaceGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceLT applies the LT predicate on the "parent_place" field.
func ParentPlaceLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceLTE applies the LTE predicate on the "parent_place" field.
func ParentPlaceLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceContains applies the Contains predicate on the "parent_place" field.
func ParentPlaceContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceHasPrefix applies the HasPrefix predicate on the "parent_place" field.
func ParentPlaceHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceHasSuffix applies the HasSuffix predicate on the "parent_place" field.
func ParentPlaceHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceEqualFold applies the EqualFold predicate on the "parent_place" field.
func ParentPlaceEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentPlace), v))
	})
}

// ParentPlaceContainsFold applies the ContainsFold predicate on the "parent_place" field.
func ParentPlaceContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentPlace), v))
	})
}

// ParentStateEQ applies the EQ predicate on the "parent_state" field.
func ParentStateEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentState), v))
	})
}

// ParentStateNEQ applies the NEQ predicate on the "parent_state" field.
func ParentStateNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentState), v))
	})
}

// ParentStateIn applies the In predicate on the "parent_state" field.
func ParentStateIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentState), v...))
	})
}

// ParentStateNotIn applies the NotIn predicate on the "parent_state" field.
func ParentStateNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentState), v...))
	})
}

// ParentStateGT applies the GT predicate on the "parent_state" field.
func ParentStateGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentState), v))
	})
}

// ParentStateGTE applies the GTE predicate on the "parent_state" field.
func ParentStateGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentState), v))
	})
}

// ParentStateLT applies the LT predicate on the "parent_state" field.
func ParentStateLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentState), v))
	})
}

// ParentStateLTE applies the LTE predicate on the "parent_state" field.
func ParentStateLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentState), v))
	})
}

// ParentStateContains applies the Contains predicate on the "parent_state" field.
func ParentStateContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentState), v))
	})
}

// ParentStateHasPrefix applies the HasPrefix predicate on the "parent_state" field.
func ParentStateHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentState), v))
	})
}

// ParentStateHasSuffix applies the HasSuffix predicate on the "parent_state" field.
func ParentStateHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentState), v))
	})
}

// ParentStateEqualFold applies the EqualFold predicate on the "parent_state" field.
func ParentStateEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentState), v))
	})
}

// ParentStateContainsFold applies the ContainsFold predicate on the "parent_state" field.
func ParentStateContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentState), v))
	})
}

// ParentPinEQ applies the EQ predicate on the "parent_pin" field.
func ParentPinEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentPin), v))
	})
}

// ParentPinNEQ applies the NEQ predicate on the "parent_pin" field.
func ParentPinNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentPin), v))
	})
}

// ParentPinIn applies the In predicate on the "parent_pin" field.
func ParentPinIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentPin), v...))
	})
}

// ParentPinNotIn applies the NotIn predicate on the "parent_pin" field.
func ParentPinNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentPin), v...))
	})
}

// ParentPinGT applies the GT predicate on the "parent_pin" field.
func ParentPinGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentPin), v))
	})
}

// ParentPinGTE applies the GTE predicate on the "parent_pin" field.
func ParentPinGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentPin), v))
	})
}

// ParentPinLT applies the LT predicate on the "parent_pin" field.
func ParentPinLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentPin), v))
	})
}

// ParentPinLTE applies the LTE predicate on the "parent_pin" field.
func ParentPinLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentPin), v))
	})
}

// ParentPinContains applies the Contains predicate on the "parent_pin" field.
func ParentPinContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentPin), v))
	})
}

// ParentPinHasPrefix applies the HasPrefix predicate on the "parent_pin" field.
func ParentPinHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentPin), v))
	})
}

// ParentPinHasSuffix applies the HasSuffix predicate on the "parent_pin" field.
func ParentPinHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentPin), v))
	})
}

// ParentPinEqualFold applies the EqualFold predicate on the "parent_pin" field.
func ParentPinEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentPin), v))
	})
}

// ParentPinContainsFold applies the ContainsFold predicate on the "parent_pin" field.
func ParentPinContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentPin), v))
	})
}

// ParentEmailEQ applies the EQ predicate on the "parent_email" field.
func ParentEmailEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentEmail), v))
	})
}

// ParentEmailNEQ applies the NEQ predicate on the "parent_email" field.
func ParentEmailNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentEmail), v))
	})
}

// ParentEmailIn applies the In predicate on the "parent_email" field.
func ParentEmailIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentEmail), v...))
	})
}

// ParentEmailNotIn applies the NotIn predicate on the "parent_email" field.
func ParentEmailNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentEmail), v...))
	})
}

// ParentEmailGT applies the GT predicate on the "parent_email" field.
func ParentEmailGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentEmail), v))
	})
}

// ParentEmailGTE applies the GTE predicate on the "parent_email" field.
func ParentEmailGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentEmail), v))
	})
}

// ParentEmailLT applies the LT predicate on the "parent_email" field.
func ParentEmailLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentEmail), v))
	})
}

// ParentEmailLTE applies the LTE predicate on the "parent_email" field.
func ParentEmailLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentEmail), v))
	})
}

// ParentEmailContains applies the Contains predicate on the "parent_email" field.
func ParentEmailContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentEmail), v))
	})
}

// ParentEmailHasPrefix applies the HasPrefix predicate on the "parent_email" field.
func ParentEmailHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentEmail), v))
	})
}

// ParentEmailHasSuffix applies the HasSuffix predicate on the "parent_email" field.
func ParentEmailHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentEmail), v))
	})
}

// ParentEmailEqualFold applies the EqualFold predicate on the "parent_email" field.
func ParentEmailEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentEmail), v))
	})
}

// ParentEmailContainsFold applies the ContainsFold predicate on the "parent_email" field.
func ParentEmailContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentEmail), v))
	})
}

// ParentMobileEQ applies the EQ predicate on the "parent_mobile" field.
func ParentMobileEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentMobile), v))
	})
}

// ParentMobileNEQ applies the NEQ predicate on the "parent_mobile" field.
func ParentMobileNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentMobile), v))
	})
}

// ParentMobileIn applies the In predicate on the "parent_mobile" field.
func ParentMobileIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentMobile), v...))
	})
}

// ParentMobileNotIn applies the NotIn predicate on the "parent_mobile" field.
func ParentMobileNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentMobile), v...))
	})
}

// ParentMobileGT applies the GT predicate on the "parent_mobile" field.
func ParentMobileGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentMobile), v))
	})
}

// ParentMobileGTE applies the GTE predicate on the "parent_mobile" field.
func ParentMobileGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentMobile), v))
	})
}

// ParentMobileLT applies the LT predicate on the "parent_mobile" field.
func ParentMobileLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentMobile), v))
	})
}

// ParentMobileLTE applies the LTE predicate on the "parent_mobile" field.
func ParentMobileLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentMobile), v))
	})
}

// ParentMobileContains applies the Contains predicate on the "parent_mobile" field.
func ParentMobileContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentMobile), v))
	})
}

// ParentMobileHasPrefix applies the HasPrefix predicate on the "parent_mobile" field.
func ParentMobileHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentMobile), v))
	})
}

// ParentMobileHasSuffix applies the HasSuffix predicate on the "parent_mobile" field.
func ParentMobileHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentMobile), v))
	})
}

// ParentMobileEqualFold applies the EqualFold predicate on the "parent_mobile" field.
func ParentMobileEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentMobile), v))
	})
}

// ParentMobileContainsFold applies the ContainsFold predicate on the "parent_mobile" field.
func ParentMobileContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentMobile), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthParent) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthParent) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthParent) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		p(s.Not())
	})
}

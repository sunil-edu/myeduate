// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package authparent

import (
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ParentFirstName applies equality check predicate on the "parent_first_name" field. It's identical to ParentFirstNameEQ.
func ParentFirstName(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentFirstName), v))
	})
}

// ParentMiddleName applies equality check predicate on the "parent_middle_name" field. It's identical to ParentMiddleNameEQ.
func ParentMiddleName(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentMiddleName), v))
	})
}

// ParentLastName applies equality check predicate on the "parent_last_name" field. It's identical to ParentLastNameEQ.
func ParentLastName(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentLastName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ParentFirstNameEQ applies the EQ predicate on the "parent_first_name" field.
func ParentFirstNameEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameNEQ applies the NEQ predicate on the "parent_first_name" field.
func ParentFirstNameNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameIn applies the In predicate on the "parent_first_name" field.
func ParentFirstNameIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentFirstName), v...))
	})
}

// ParentFirstNameNotIn applies the NotIn predicate on the "parent_first_name" field.
func ParentFirstNameNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentFirstName), v...))
	})
}

// ParentFirstNameGT applies the GT predicate on the "parent_first_name" field.
func ParentFirstNameGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameGTE applies the GTE predicate on the "parent_first_name" field.
func ParentFirstNameGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameLT applies the LT predicate on the "parent_first_name" field.
func ParentFirstNameLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameLTE applies the LTE predicate on the "parent_first_name" field.
func ParentFirstNameLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameContains applies the Contains predicate on the "parent_first_name" field.
func ParentFirstNameContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameHasPrefix applies the HasPrefix predicate on the "parent_first_name" field.
func ParentFirstNameHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameHasSuffix applies the HasSuffix predicate on the "parent_first_name" field.
func ParentFirstNameHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameEqualFold applies the EqualFold predicate on the "parent_first_name" field.
func ParentFirstNameEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentFirstName), v))
	})
}

// ParentFirstNameContainsFold applies the ContainsFold predicate on the "parent_first_name" field.
func ParentFirstNameContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentFirstName), v))
	})
}

// ParentMiddleNameEQ applies the EQ predicate on the "parent_middle_name" field.
func ParentMiddleNameEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameNEQ applies the NEQ predicate on the "parent_middle_name" field.
func ParentMiddleNameNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameIn applies the In predicate on the "parent_middle_name" field.
func ParentMiddleNameIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentMiddleName), v...))
	})
}

// ParentMiddleNameNotIn applies the NotIn predicate on the "parent_middle_name" field.
func ParentMiddleNameNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentMiddleName), v...))
	})
}

// ParentMiddleNameGT applies the GT predicate on the "parent_middle_name" field.
func ParentMiddleNameGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameGTE applies the GTE predicate on the "parent_middle_name" field.
func ParentMiddleNameGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameLT applies the LT predicate on the "parent_middle_name" field.
func ParentMiddleNameLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameLTE applies the LTE predicate on the "parent_middle_name" field.
func ParentMiddleNameLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameContains applies the Contains predicate on the "parent_middle_name" field.
func ParentMiddleNameContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameHasPrefix applies the HasPrefix predicate on the "parent_middle_name" field.
func ParentMiddleNameHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameHasSuffix applies the HasSuffix predicate on the "parent_middle_name" field.
func ParentMiddleNameHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameEqualFold applies the EqualFold predicate on the "parent_middle_name" field.
func ParentMiddleNameEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentMiddleName), v))
	})
}

// ParentMiddleNameContainsFold applies the ContainsFold predicate on the "parent_middle_name" field.
func ParentMiddleNameContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentMiddleName), v))
	})
}

// ParentLastNameEQ applies the EQ predicate on the "parent_last_name" field.
func ParentLastNameEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameNEQ applies the NEQ predicate on the "parent_last_name" field.
func ParentLastNameNEQ(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameIn applies the In predicate on the "parent_last_name" field.
func ParentLastNameIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentLastName), v...))
	})
}

// ParentLastNameNotIn applies the NotIn predicate on the "parent_last_name" field.
func ParentLastNameNotIn(vs ...string) predicate.AuthParent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthParent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentLastName), v...))
	})
}

// ParentLastNameGT applies the GT predicate on the "parent_last_name" field.
func ParentLastNameGT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameGTE applies the GTE predicate on the "parent_last_name" field.
func ParentLastNameGTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameLT applies the LT predicate on the "parent_last_name" field.
func ParentLastNameLT(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameLTE applies the LTE predicate on the "parent_last_name" field.
func ParentLastNameLTE(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameContains applies the Contains predicate on the "parent_last_name" field.
func ParentLastNameContains(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameHasPrefix applies the HasPrefix predicate on the "parent_last_name" field.
func ParentLastNameHasPrefix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameHasSuffix applies the HasSuffix predicate on the "parent_last_name" field.
func ParentLastNameHasSuffix(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameEqualFold applies the EqualFold predicate on the "parent_last_name" field.
func ParentLastNameEqualFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentLastName), v))
	})
}

// ParentLastNameContainsFold applies the ContainsFold predicate on the "parent_last_name" field.
func ParentLastNameContainsFold(v string) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentLastName), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthParent) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthParent) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthParent) predicate.AuthParent {
	return predicate.AuthParent(func(s *sql.Selector) {
		p(s.Not())
	})
}

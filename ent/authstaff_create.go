// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/authstaff"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthStaffCreate is the builder for creating a AuthStaff entity.
type AuthStaffCreate struct {
	config
	mutation *AuthStaffMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (asc *AuthStaffCreate) SetCreatedAt(t time.Time) *AuthStaffCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AuthStaffCreate) SetNillableCreatedAt(t *time.Time) *AuthStaffCreate {
	if t != nil {
		asc.SetCreatedAt(*t)
	}
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AuthStaffCreate) SetUpdatedAt(t time.Time) *AuthStaffCreate {
	asc.mutation.SetUpdatedAt(t)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AuthStaffCreate) SetNillableUpdatedAt(t *time.Time) *AuthStaffCreate {
	if t != nil {
		asc.SetUpdatedAt(*t)
	}
	return asc
}

// SetStaffFirstName sets the "staff_first_name" field.
func (asc *AuthStaffCreate) SetStaffFirstName(s string) *AuthStaffCreate {
	asc.mutation.SetStaffFirstName(s)
	return asc
}

// SetStaffMiddleName sets the "staff_middle_name" field.
func (asc *AuthStaffCreate) SetStaffMiddleName(s string) *AuthStaffCreate {
	asc.mutation.SetStaffMiddleName(s)
	return asc
}

// SetStaffLastName sets the "staff_last_name" field.
func (asc *AuthStaffCreate) SetStaffLastName(s string) *AuthStaffCreate {
	asc.mutation.SetStaffLastName(s)
	return asc
}

// SetStaffAddress sets the "staff_address" field.
func (asc *AuthStaffCreate) SetStaffAddress(s string) *AuthStaffCreate {
	asc.mutation.SetStaffAddress(s)
	return asc
}

// SetStaffPlace sets the "staff_place" field.
func (asc *AuthStaffCreate) SetStaffPlace(s string) *AuthStaffCreate {
	asc.mutation.SetStaffPlace(s)
	return asc
}

// SetStaffState sets the "staff_state" field.
func (asc *AuthStaffCreate) SetStaffState(s string) *AuthStaffCreate {
	asc.mutation.SetStaffState(s)
	return asc
}

// SetStaffPin sets the "staff_pin" field.
func (asc *AuthStaffCreate) SetStaffPin(s string) *AuthStaffCreate {
	asc.mutation.SetStaffPin(s)
	return asc
}

// SetStaffEmail sets the "staff_email" field.
func (asc *AuthStaffCreate) SetStaffEmail(s string) *AuthStaffCreate {
	asc.mutation.SetStaffEmail(s)
	return asc
}

// SetStaffMobile sets the "staff_mobile" field.
func (asc *AuthStaffCreate) SetStaffMobile(s string) *AuthStaffCreate {
	asc.mutation.SetStaffMobile(s)
	return asc
}

// Mutation returns the AuthStaffMutation object of the builder.
func (asc *AuthStaffCreate) Mutation() *AuthStaffMutation {
	return asc.mutation
}

// Save creates the AuthStaff in the database.
func (asc *AuthStaffCreate) Save(ctx context.Context) (*AuthStaff, error) {
	var (
		err  error
		node *AuthStaff
	)
	asc.defaults()
	if len(asc.hooks) == 0 {
		if err = asc.check(); err != nil {
			return nil, err
		}
		node, err = asc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthStaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asc.check(); err != nil {
				return nil, err
			}
			asc.mutation = mutation
			if node, err = asc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(asc.hooks) - 1; i >= 0; i-- {
			if asc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AuthStaffCreate) SaveX(ctx context.Context) *AuthStaff {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AuthStaffCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AuthStaffCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AuthStaffCreate) defaults() {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		v := authstaff.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		v := authstaff.DefaultUpdatedAt()
		asc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AuthStaffCreate) check() error {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuthStaff.created_at"`)}
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AuthStaff.updated_at"`)}
	}
	if _, ok := asc.mutation.StaffFirstName(); !ok {
		return &ValidationError{Name: "staff_first_name", err: errors.New(`ent: missing required field "AuthStaff.staff_first_name"`)}
	}
	if v, ok := asc.mutation.StaffFirstName(); ok {
		if err := authstaff.StaffFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "staff_first_name", err: fmt.Errorf(`ent: validator failed for field "AuthStaff.staff_first_name": %w`, err)}
		}
	}
	if _, ok := asc.mutation.StaffMiddleName(); !ok {
		return &ValidationError{Name: "staff_middle_name", err: errors.New(`ent: missing required field "AuthStaff.staff_middle_name"`)}
	}
	if _, ok := asc.mutation.StaffLastName(); !ok {
		return &ValidationError{Name: "staff_last_name", err: errors.New(`ent: missing required field "AuthStaff.staff_last_name"`)}
	}
	if _, ok := asc.mutation.StaffAddress(); !ok {
		return &ValidationError{Name: "staff_address", err: errors.New(`ent: missing required field "AuthStaff.staff_address"`)}
	}
	if _, ok := asc.mutation.StaffPlace(); !ok {
		return &ValidationError{Name: "staff_place", err: errors.New(`ent: missing required field "AuthStaff.staff_place"`)}
	}
	if _, ok := asc.mutation.StaffState(); !ok {
		return &ValidationError{Name: "staff_state", err: errors.New(`ent: missing required field "AuthStaff.staff_state"`)}
	}
	if _, ok := asc.mutation.StaffPin(); !ok {
		return &ValidationError{Name: "staff_pin", err: errors.New(`ent: missing required field "AuthStaff.staff_pin"`)}
	}
	if _, ok := asc.mutation.StaffEmail(); !ok {
		return &ValidationError{Name: "staff_email", err: errors.New(`ent: missing required field "AuthStaff.staff_email"`)}
	}
	if v, ok := asc.mutation.StaffEmail(); ok {
		if err := authstaff.StaffEmailValidator(v); err != nil {
			return &ValidationError{Name: "staff_email", err: fmt.Errorf(`ent: validator failed for field "AuthStaff.staff_email": %w`, err)}
		}
	}
	if _, ok := asc.mutation.StaffMobile(); !ok {
		return &ValidationError{Name: "staff_mobile", err: errors.New(`ent: missing required field "AuthStaff.staff_mobile"`)}
	}
	if v, ok := asc.mutation.StaffMobile(); ok {
		if err := authstaff.StaffMobileValidator(v); err != nil {
			return &ValidationError{Name: "staff_mobile", err: fmt.Errorf(`ent: validator failed for field "AuthStaff.staff_mobile": %w`, err)}
		}
	}
	return nil
}

func (asc *AuthStaffCreate) sqlSave(ctx context.Context) (*AuthStaff, error) {
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (asc *AuthStaffCreate) createSpec() (*AuthStaff, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthStaff{config: asc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authstaff.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authstaff.FieldID,
			},
		}
	)
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authstaff.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authstaff.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := asc.mutation.StaffFirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffFirstName,
		})
		_node.StaffFirstName = value
	}
	if value, ok := asc.mutation.StaffMiddleName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffMiddleName,
		})
		_node.StaffMiddleName = value
	}
	if value, ok := asc.mutation.StaffLastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffLastName,
		})
		_node.StaffLastName = value
	}
	if value, ok := asc.mutation.StaffAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffAddress,
		})
		_node.StaffAddress = value
	}
	if value, ok := asc.mutation.StaffPlace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffPlace,
		})
		_node.StaffPlace = value
	}
	if value, ok := asc.mutation.StaffState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffState,
		})
		_node.StaffState = value
	}
	if value, ok := asc.mutation.StaffPin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffPin,
		})
		_node.StaffPin = value
	}
	if value, ok := asc.mutation.StaffEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffEmail,
		})
		_node.StaffEmail = value
	}
	if value, ok := asc.mutation.StaffMobile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffMobile,
		})
		_node.StaffMobile = value
	}
	return _node, _spec
}

// AuthStaffCreateBulk is the builder for creating many AuthStaff entities in bulk.
type AuthStaffCreateBulk struct {
	config
	builders []*AuthStaffCreate
}

// Save creates the AuthStaff entities in the database.
func (ascb *AuthStaffCreateBulk) Save(ctx context.Context) ([]*AuthStaff, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AuthStaff, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthStaffMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AuthStaffCreateBulk) SaveX(ctx context.Context) []*AuthStaff {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AuthStaffCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AuthStaffCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

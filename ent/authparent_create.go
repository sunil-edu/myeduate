// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/authparent"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthParentCreate is the builder for creating a AuthParent entity.
type AuthParentCreate struct {
	config
	mutation *AuthParentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (apc *AuthParentCreate) SetCreatedAt(t time.Time) *AuthParentCreate {
	apc.mutation.SetCreatedAt(t)
	return apc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apc *AuthParentCreate) SetNillableCreatedAt(t *time.Time) *AuthParentCreate {
	if t != nil {
		apc.SetCreatedAt(*t)
	}
	return apc
}

// SetUpdatedAt sets the "updated_at" field.
func (apc *AuthParentCreate) SetUpdatedAt(t time.Time) *AuthParentCreate {
	apc.mutation.SetUpdatedAt(t)
	return apc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apc *AuthParentCreate) SetNillableUpdatedAt(t *time.Time) *AuthParentCreate {
	if t != nil {
		apc.SetUpdatedAt(*t)
	}
	return apc
}

// SetParentFirstName sets the "parent_first_name" field.
func (apc *AuthParentCreate) SetParentFirstName(s string) *AuthParentCreate {
	apc.mutation.SetParentFirstName(s)
	return apc
}

// SetParentMiddleName sets the "parent_middle_name" field.
func (apc *AuthParentCreate) SetParentMiddleName(s string) *AuthParentCreate {
	apc.mutation.SetParentMiddleName(s)
	return apc
}

// SetParentLastName sets the "parent_last_name" field.
func (apc *AuthParentCreate) SetParentLastName(s string) *AuthParentCreate {
	apc.mutation.SetParentLastName(s)
	return apc
}

// Mutation returns the AuthParentMutation object of the builder.
func (apc *AuthParentCreate) Mutation() *AuthParentMutation {
	return apc.mutation
}

// Save creates the AuthParent in the database.
func (apc *AuthParentCreate) Save(ctx context.Context) (*AuthParent, error) {
	var (
		err  error
		node *AuthParent
	)
	apc.defaults()
	if len(apc.hooks) == 0 {
		if err = apc.check(); err != nil {
			return nil, err
		}
		node, err = apc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthParentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apc.check(); err != nil {
				return nil, err
			}
			apc.mutation = mutation
			if node, err = apc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(apc.hooks) - 1; i >= 0; i-- {
			if apc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AuthParentCreate) SaveX(ctx context.Context) *AuthParent {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AuthParentCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AuthParentCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AuthParentCreate) defaults() {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		v := authparent.DefaultCreatedAt()
		apc.mutation.SetCreatedAt(v)
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		v := authparent.DefaultUpdatedAt()
		apc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AuthParentCreate) check() error {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuthParent.created_at"`)}
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AuthParent.updated_at"`)}
	}
	if _, ok := apc.mutation.ParentFirstName(); !ok {
		return &ValidationError{Name: "parent_first_name", err: errors.New(`ent: missing required field "AuthParent.parent_first_name"`)}
	}
	if v, ok := apc.mutation.ParentFirstName(); ok {
		if err := authparent.ParentFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "parent_first_name", err: fmt.Errorf(`ent: validator failed for field "AuthParent.parent_first_name": %w`, err)}
		}
	}
	if _, ok := apc.mutation.ParentMiddleName(); !ok {
		return &ValidationError{Name: "parent_middle_name", err: errors.New(`ent: missing required field "AuthParent.parent_middle_name"`)}
	}
	if _, ok := apc.mutation.ParentLastName(); !ok {
		return &ValidationError{Name: "parent_last_name", err: errors.New(`ent: missing required field "AuthParent.parent_last_name"`)}
	}
	return nil
}

func (apc *AuthParentCreate) sqlSave(ctx context.Context) (*AuthParent, error) {
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (apc *AuthParentCreate) createSpec() (*AuthParent, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthParent{config: apc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authparent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authparent.FieldID,
			},
		}
	)
	if value, ok := apc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authparent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := apc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authparent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := apc.mutation.ParentFirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentFirstName,
		})
		_node.ParentFirstName = value
	}
	if value, ok := apc.mutation.ParentMiddleName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentMiddleName,
		})
		_node.ParentMiddleName = value
	}
	if value, ok := apc.mutation.ParentLastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentLastName,
		})
		_node.ParentLastName = value
	}
	return _node, _spec
}

// AuthParentCreateBulk is the builder for creating many AuthParent entities in bulk.
type AuthParentCreateBulk struct {
	config
	builders []*AuthParentCreate
}

// Save creates the AuthParent entities in the database.
func (apcb *AuthParentCreateBulk) Save(ctx context.Context) ([]*AuthParent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AuthParent, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthParentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AuthParentCreateBulk) SaveX(ctx context.Context) []*AuthParent {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AuthParentCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AuthParentCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}

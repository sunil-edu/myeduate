// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"myeduate/ent/customtypes"
	"myeduate/ent/mstcustomer"
	"myeduate/ent/mstinst"
	"myeduate/ent/predicate"
	"time"
)

// MstCustomerWhereInput represents a where input for filtering MstCustomer queries.
type MstCustomerWhereInput struct {
	Not *MstCustomerWhereInput   `json:"not,omitempty"`
	Or  []*MstCustomerWhereInput `json:"or,omitempty"`
	And []*MstCustomerWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "cust_code" field predicates.
	CustCode             *string  `json:"custCode,omitempty"`
	CustCodeNEQ          *string  `json:"custCodeNEQ,omitempty"`
	CustCodeIn           []string `json:"custCodeIn,omitempty"`
	CustCodeNotIn        []string `json:"custCodeNotIn,omitempty"`
	CustCodeGT           *string  `json:"custCodeGT,omitempty"`
	CustCodeGTE          *string  `json:"custCodeGTE,omitempty"`
	CustCodeLT           *string  `json:"custCodeLT,omitempty"`
	CustCodeLTE          *string  `json:"custCodeLTE,omitempty"`
	CustCodeContains     *string  `json:"custCodeContains,omitempty"`
	CustCodeHasPrefix    *string  `json:"custCodeHasPrefix,omitempty"`
	CustCodeHasSuffix    *string  `json:"custCodeHasSuffix,omitempty"`
	CustCodeEqualFold    *string  `json:"custCodeEqualFold,omitempty"`
	CustCodeContainsFold *string  `json:"custCodeContainsFold,omitempty"`

	// "cust_name" field predicates.
	CustName             *string  `json:"custName,omitempty"`
	CustNameNEQ          *string  `json:"custNameNEQ,omitempty"`
	CustNameIn           []string `json:"custNameIn,omitempty"`
	CustNameNotIn        []string `json:"custNameNotIn,omitempty"`
	CustNameGT           *string  `json:"custNameGT,omitempty"`
	CustNameGTE          *string  `json:"custNameGTE,omitempty"`
	CustNameLT           *string  `json:"custNameLT,omitempty"`
	CustNameLTE          *string  `json:"custNameLTE,omitempty"`
	CustNameContains     *string  `json:"custNameContains,omitempty"`
	CustNameHasPrefix    *string  `json:"custNameHasPrefix,omitempty"`
	CustNameHasSuffix    *string  `json:"custNameHasSuffix,omitempty"`
	CustNameEqualFold    *string  `json:"custNameEqualFold,omitempty"`
	CustNameContainsFold *string  `json:"custNameContainsFold,omitempty"`

	// "cust_address" field predicates.
	CustAddress             *string  `json:"custAddress,omitempty"`
	CustAddressNEQ          *string  `json:"custAddressNEQ,omitempty"`
	CustAddressIn           []string `json:"custAddressIn,omitempty"`
	CustAddressNotIn        []string `json:"custAddressNotIn,omitempty"`
	CustAddressGT           *string  `json:"custAddressGT,omitempty"`
	CustAddressGTE          *string  `json:"custAddressGTE,omitempty"`
	CustAddressLT           *string  `json:"custAddressLT,omitempty"`
	CustAddressLTE          *string  `json:"custAddressLTE,omitempty"`
	CustAddressContains     *string  `json:"custAddressContains,omitempty"`
	CustAddressHasPrefix    *string  `json:"custAddressHasPrefix,omitempty"`
	CustAddressHasSuffix    *string  `json:"custAddressHasSuffix,omitempty"`
	CustAddressEqualFold    *string  `json:"custAddressEqualFold,omitempty"`
	CustAddressContainsFold *string  `json:"custAddressContainsFold,omitempty"`

	// "cust_place" field predicates.
	CustPlace             *string  `json:"custPlace,omitempty"`
	CustPlaceNEQ          *string  `json:"custPlaceNEQ,omitempty"`
	CustPlaceIn           []string `json:"custPlaceIn,omitempty"`
	CustPlaceNotIn        []string `json:"custPlaceNotIn,omitempty"`
	CustPlaceGT           *string  `json:"custPlaceGT,omitempty"`
	CustPlaceGTE          *string  `json:"custPlaceGTE,omitempty"`
	CustPlaceLT           *string  `json:"custPlaceLT,omitempty"`
	CustPlaceLTE          *string  `json:"custPlaceLTE,omitempty"`
	CustPlaceContains     *string  `json:"custPlaceContains,omitempty"`
	CustPlaceHasPrefix    *string  `json:"custPlaceHasPrefix,omitempty"`
	CustPlaceHasSuffix    *string  `json:"custPlaceHasSuffix,omitempty"`
	CustPlaceEqualFold    *string  `json:"custPlaceEqualFold,omitempty"`
	CustPlaceContainsFold *string  `json:"custPlaceContainsFold,omitempty"`

	// "cust_state" field predicates.
	CustState             *string  `json:"custState,omitempty"`
	CustStateNEQ          *string  `json:"custStateNEQ,omitempty"`
	CustStateIn           []string `json:"custStateIn,omitempty"`
	CustStateNotIn        []string `json:"custStateNotIn,omitempty"`
	CustStateGT           *string  `json:"custStateGT,omitempty"`
	CustStateGTE          *string  `json:"custStateGTE,omitempty"`
	CustStateLT           *string  `json:"custStateLT,omitempty"`
	CustStateLTE          *string  `json:"custStateLTE,omitempty"`
	CustStateContains     *string  `json:"custStateContains,omitempty"`
	CustStateHasPrefix    *string  `json:"custStateHasPrefix,omitempty"`
	CustStateHasSuffix    *string  `json:"custStateHasSuffix,omitempty"`
	CustStateEqualFold    *string  `json:"custStateEqualFold,omitempty"`
	CustStateContainsFold *string  `json:"custStateContainsFold,omitempty"`

	// "cust_pin" field predicates.
	CustPin             *string  `json:"custPin,omitempty"`
	CustPinNEQ          *string  `json:"custPinNEQ,omitempty"`
	CustPinIn           []string `json:"custPinIn,omitempty"`
	CustPinNotIn        []string `json:"custPinNotIn,omitempty"`
	CustPinGT           *string  `json:"custPinGT,omitempty"`
	CustPinGTE          *string  `json:"custPinGTE,omitempty"`
	CustPinLT           *string  `json:"custPinLT,omitempty"`
	CustPinLTE          *string  `json:"custPinLTE,omitempty"`
	CustPinContains     *string  `json:"custPinContains,omitempty"`
	CustPinHasPrefix    *string  `json:"custPinHasPrefix,omitempty"`
	CustPinHasSuffix    *string  `json:"custPinHasSuffix,omitempty"`
	CustPinEqualFold    *string  `json:"custPinEqualFold,omitempty"`
	CustPinContainsFold *string  `json:"custPinContainsFold,omitempty"`

	// "cust_contact_person" field predicates.
	CustContactPerson             *string  `json:"custContactPerson,omitempty"`
	CustContactPersonNEQ          *string  `json:"custContactPersonNEQ,omitempty"`
	CustContactPersonIn           []string `json:"custContactPersonIn,omitempty"`
	CustContactPersonNotIn        []string `json:"custContactPersonNotIn,omitempty"`
	CustContactPersonGT           *string  `json:"custContactPersonGT,omitempty"`
	CustContactPersonGTE          *string  `json:"custContactPersonGTE,omitempty"`
	CustContactPersonLT           *string  `json:"custContactPersonLT,omitempty"`
	CustContactPersonLTE          *string  `json:"custContactPersonLTE,omitempty"`
	CustContactPersonContains     *string  `json:"custContactPersonContains,omitempty"`
	CustContactPersonHasPrefix    *string  `json:"custContactPersonHasPrefix,omitempty"`
	CustContactPersonHasSuffix    *string  `json:"custContactPersonHasSuffix,omitempty"`
	CustContactPersonEqualFold    *string  `json:"custContactPersonEqualFold,omitempty"`
	CustContactPersonContainsFold *string  `json:"custContactPersonContainsFold,omitempty"`

	// "cust_phone" field predicates.
	CustPhone             *string  `json:"custPhone,omitempty"`
	CustPhoneNEQ          *string  `json:"custPhoneNEQ,omitempty"`
	CustPhoneIn           []string `json:"custPhoneIn,omitempty"`
	CustPhoneNotIn        []string `json:"custPhoneNotIn,omitempty"`
	CustPhoneGT           *string  `json:"custPhoneGT,omitempty"`
	CustPhoneGTE          *string  `json:"custPhoneGTE,omitempty"`
	CustPhoneLT           *string  `json:"custPhoneLT,omitempty"`
	CustPhoneLTE          *string  `json:"custPhoneLTE,omitempty"`
	CustPhoneContains     *string  `json:"custPhoneContains,omitempty"`
	CustPhoneHasPrefix    *string  `json:"custPhoneHasPrefix,omitempty"`
	CustPhoneHasSuffix    *string  `json:"custPhoneHasSuffix,omitempty"`
	CustPhoneEqualFold    *string  `json:"custPhoneEqualFold,omitempty"`
	CustPhoneContainsFold *string  `json:"custPhoneContainsFold,omitempty"`

	// "cust_email" field predicates.
	CustEmail             *string  `json:"custEmail,omitempty"`
	CustEmailNEQ          *string  `json:"custEmailNEQ,omitempty"`
	CustEmailIn           []string `json:"custEmailIn,omitempty"`
	CustEmailNotIn        []string `json:"custEmailNotIn,omitempty"`
	CustEmailGT           *string  `json:"custEmailGT,omitempty"`
	CustEmailGTE          *string  `json:"custEmailGTE,omitempty"`
	CustEmailLT           *string  `json:"custEmailLT,omitempty"`
	CustEmailLTE          *string  `json:"custEmailLTE,omitempty"`
	CustEmailContains     *string  `json:"custEmailContains,omitempty"`
	CustEmailHasPrefix    *string  `json:"custEmailHasPrefix,omitempty"`
	CustEmailHasSuffix    *string  `json:"custEmailHasSuffix,omitempty"`
	CustEmailEqualFold    *string  `json:"custEmailEqualFold,omitempty"`
	CustEmailContainsFold *string  `json:"custEmailContainsFold,omitempty"`

	// "cust_mobile" field predicates.
	CustMobile             *string  `json:"custMobile,omitempty"`
	CustMobileNEQ          *string  `json:"custMobileNEQ,omitempty"`
	CustMobileIn           []string `json:"custMobileIn,omitempty"`
	CustMobileNotIn        []string `json:"custMobileNotIn,omitempty"`
	CustMobileGT           *string  `json:"custMobileGT,omitempty"`
	CustMobileGTE          *string  `json:"custMobileGTE,omitempty"`
	CustMobileLT           *string  `json:"custMobileLT,omitempty"`
	CustMobileLTE          *string  `json:"custMobileLTE,omitempty"`
	CustMobileContains     *string  `json:"custMobileContains,omitempty"`
	CustMobileHasPrefix    *string  `json:"custMobileHasPrefix,omitempty"`
	CustMobileHasSuffix    *string  `json:"custMobileHasSuffix,omitempty"`
	CustMobileEqualFold    *string  `json:"custMobileEqualFold,omitempty"`
	CustMobileContainsFold *string  `json:"custMobileContainsFold,omitempty"`

	// "cust_url" field predicates.
	CustURL             *string  `json:"custURL,omitempty"`
	CustURLNEQ          *string  `json:"custURLNEQ,omitempty"`
	CustURLIn           []string `json:"custURLIn,omitempty"`
	CustURLNotIn        []string `json:"custURLNotIn,omitempty"`
	CustURLGT           *string  `json:"custURLGT,omitempty"`
	CustURLGTE          *string  `json:"custURLGTE,omitempty"`
	CustURLLT           *string  `json:"custURLLT,omitempty"`
	CustURLLTE          *string  `json:"custURLLTE,omitempty"`
	CustURLContains     *string  `json:"custURLContains,omitempty"`
	CustURLHasPrefix    *string  `json:"custURLHasPrefix,omitempty"`
	CustURLHasSuffix    *string  `json:"custURLHasSuffix,omitempty"`
	CustURLEqualFold    *string  `json:"custURLEqualFold,omitempty"`
	CustURLContainsFold *string  `json:"custURLContainsFold,omitempty"`

	// "cust_banner_1" field predicates.
	CustBanner1             *string  `json:"custBanner1,omitempty"`
	CustBanner1NEQ          *string  `json:"custBanner1NEQ,omitempty"`
	CustBanner1In           []string `json:"custBanner1In,omitempty"`
	CustBanner1NotIn        []string `json:"custBanner1NotIn,omitempty"`
	CustBanner1GT           *string  `json:"custBanner1GT,omitempty"`
	CustBanner1GTE          *string  `json:"custBanner1GTE,omitempty"`
	CustBanner1LT           *string  `json:"custBanner1LT,omitempty"`
	CustBanner1LTE          *string  `json:"custBanner1LTE,omitempty"`
	CustBanner1Contains     *string  `json:"custBanner1Contains,omitempty"`
	CustBanner1HasPrefix    *string  `json:"custBanner1HasPrefix,omitempty"`
	CustBanner1HasSuffix    *string  `json:"custBanner1HasSuffix,omitempty"`
	CustBanner1EqualFold    *string  `json:"custBanner1EqualFold,omitempty"`
	CustBanner1ContainsFold *string  `json:"custBanner1ContainsFold,omitempty"`

	// "cust_banner_2" field predicates.
	CustBanner2             *string  `json:"custBanner2,omitempty"`
	CustBanner2NEQ          *string  `json:"custBanner2NEQ,omitempty"`
	CustBanner2In           []string `json:"custBanner2In,omitempty"`
	CustBanner2NotIn        []string `json:"custBanner2NotIn,omitempty"`
	CustBanner2GT           *string  `json:"custBanner2GT,omitempty"`
	CustBanner2GTE          *string  `json:"custBanner2GTE,omitempty"`
	CustBanner2LT           *string  `json:"custBanner2LT,omitempty"`
	CustBanner2LTE          *string  `json:"custBanner2LTE,omitempty"`
	CustBanner2Contains     *string  `json:"custBanner2Contains,omitempty"`
	CustBanner2HasPrefix    *string  `json:"custBanner2HasPrefix,omitempty"`
	CustBanner2HasSuffix    *string  `json:"custBanner2HasSuffix,omitempty"`
	CustBanner2EqualFold    *string  `json:"custBanner2EqualFold,omitempty"`
	CustBanner2ContainsFold *string  `json:"custBanner2ContainsFold,omitempty"`

	// "cust_logo_url" field predicates.
	CustLogoURL             *string  `json:"custLogoURL,omitempty"`
	CustLogoURLNEQ          *string  `json:"custLogoURLNEQ,omitempty"`
	CustLogoURLIn           []string `json:"custLogoURLIn,omitempty"`
	CustLogoURLNotIn        []string `json:"custLogoURLNotIn,omitempty"`
	CustLogoURLGT           *string  `json:"custLogoURLGT,omitempty"`
	CustLogoURLGTE          *string  `json:"custLogoURLGTE,omitempty"`
	CustLogoURLLT           *string  `json:"custLogoURLLT,omitempty"`
	CustLogoURLLTE          *string  `json:"custLogoURLLTE,omitempty"`
	CustLogoURLContains     *string  `json:"custLogoURLContains,omitempty"`
	CustLogoURLHasPrefix    *string  `json:"custLogoURLHasPrefix,omitempty"`
	CustLogoURLHasSuffix    *string  `json:"custLogoURLHasSuffix,omitempty"`
	CustLogoURLEqualFold    *string  `json:"custLogoURLEqualFold,omitempty"`
	CustLogoURLContainsFold *string  `json:"custLogoURLContainsFold,omitempty"`

	// "cust_is_active" field predicates.
	CustIsActive      *customtypes.IsActive  `json:"custIsActive,omitempty"`
	CustIsActiveNEQ   *customtypes.IsActive  `json:"custIsActiveNEQ,omitempty"`
	CustIsActiveIn    []customtypes.IsActive `json:"custIsActiveIn,omitempty"`
	CustIsActiveNotIn []customtypes.IsActive `json:"custIsActiveNotIn,omitempty"`

	// "cust_status" field predicates.
	CustStatus             *string  `json:"custStatus,omitempty"`
	CustStatusNEQ          *string  `json:"custStatusNEQ,omitempty"`
	CustStatusIn           []string `json:"custStatusIn,omitempty"`
	CustStatusNotIn        []string `json:"custStatusNotIn,omitempty"`
	CustStatusGT           *string  `json:"custStatusGT,omitempty"`
	CustStatusGTE          *string  `json:"custStatusGTE,omitempty"`
	CustStatusLT           *string  `json:"custStatusLT,omitempty"`
	CustStatusLTE          *string  `json:"custStatusLTE,omitempty"`
	CustStatusContains     *string  `json:"custStatusContains,omitempty"`
	CustStatusHasPrefix    *string  `json:"custStatusHasPrefix,omitempty"`
	CustStatusHasSuffix    *string  `json:"custStatusHasSuffix,omitempty"`
	CustStatusEqualFold    *string  `json:"custStatusEqualFold,omitempty"`
	CustStatusContainsFold *string  `json:"custStatusContainsFold,omitempty"`

	// "cust_num_inst" field predicates.
	CustNumInst      *int  `json:"custNumInst,omitempty"`
	CustNumInstNEQ   *int  `json:"custNumInstNEQ,omitempty"`
	CustNumInstIn    []int `json:"custNumInstIn,omitempty"`
	CustNumInstNotIn []int `json:"custNumInstNotIn,omitempty"`
	CustNumInstGT    *int  `json:"custNumInstGT,omitempty"`
	CustNumInstGTE   *int  `json:"custNumInstGTE,omitempty"`
	CustNumInstLT    *int  `json:"custNumInstLT,omitempty"`
	CustNumInstLTE   *int  `json:"custNumInstLTE,omitempty"`

	// "cust_time_zone" field predicates.
	CustTimeZone      *time.Time  `json:"custTimeZone,omitempty"`
	CustTimeZoneNEQ   *time.Time  `json:"custTimeZoneNEQ,omitempty"`
	CustTimeZoneIn    []time.Time `json:"custTimeZoneIn,omitempty"`
	CustTimeZoneNotIn []time.Time `json:"custTimeZoneNotIn,omitempty"`
	CustTimeZoneGT    *time.Time  `json:"custTimeZoneGT,omitempty"`
	CustTimeZoneGTE   *time.Time  `json:"custTimeZoneGTE,omitempty"`
	CustTimeZoneLT    *time.Time  `json:"custTimeZoneLT,omitempty"`
	CustTimeZoneLTE   *time.Time  `json:"custTimeZoneLTE,omitempty"`

	// "Cust2Inst" edge predicates.
	HasCust2Inst     *bool                `json:"hasCust2Inst,omitempty"`
	HasCust2InstWith []*MstInstWhereInput `json:"hasCust2InstWith,omitempty"`
}

// Filter applies the MstCustomerWhereInput filter on the MstCustomerQuery builder.
func (i *MstCustomerWhereInput) Filter(q *MstCustomerQuery) (*MstCustomerQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering mstcustomers.
// An error is returned if the input is empty or invalid.
func (i *MstCustomerWhereInput) P() (predicate.MstCustomer, error) {
	var predicates []predicate.MstCustomer
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, mstcustomer.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.MstCustomer, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, mstcustomer.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.MstCustomer, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, mstcustomer.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, mstcustomer.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, mstcustomer.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, mstcustomer.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, mstcustomer.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, mstcustomer.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, mstcustomer.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, mstcustomer.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, mstcustomer.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, mstcustomer.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, mstcustomer.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, mstcustomer.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, mstcustomer.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, mstcustomer.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, mstcustomer.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, mstcustomer.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, mstcustomer.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, mstcustomer.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, mstcustomer.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, mstcustomer.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, mstcustomer.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, mstcustomer.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, mstcustomer.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, mstcustomer.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CustCode != nil {
		predicates = append(predicates, mstcustomer.CustCodeEQ(*i.CustCode))
	}
	if i.CustCodeNEQ != nil {
		predicates = append(predicates, mstcustomer.CustCodeNEQ(*i.CustCodeNEQ))
	}
	if len(i.CustCodeIn) > 0 {
		predicates = append(predicates, mstcustomer.CustCodeIn(i.CustCodeIn...))
	}
	if len(i.CustCodeNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustCodeNotIn(i.CustCodeNotIn...))
	}
	if i.CustCodeGT != nil {
		predicates = append(predicates, mstcustomer.CustCodeGT(*i.CustCodeGT))
	}
	if i.CustCodeGTE != nil {
		predicates = append(predicates, mstcustomer.CustCodeGTE(*i.CustCodeGTE))
	}
	if i.CustCodeLT != nil {
		predicates = append(predicates, mstcustomer.CustCodeLT(*i.CustCodeLT))
	}
	if i.CustCodeLTE != nil {
		predicates = append(predicates, mstcustomer.CustCodeLTE(*i.CustCodeLTE))
	}
	if i.CustCodeContains != nil {
		predicates = append(predicates, mstcustomer.CustCodeContains(*i.CustCodeContains))
	}
	if i.CustCodeHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustCodeHasPrefix(*i.CustCodeHasPrefix))
	}
	if i.CustCodeHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustCodeHasSuffix(*i.CustCodeHasSuffix))
	}
	if i.CustCodeEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustCodeEqualFold(*i.CustCodeEqualFold))
	}
	if i.CustCodeContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustCodeContainsFold(*i.CustCodeContainsFold))
	}
	if i.CustName != nil {
		predicates = append(predicates, mstcustomer.CustNameEQ(*i.CustName))
	}
	if i.CustNameNEQ != nil {
		predicates = append(predicates, mstcustomer.CustNameNEQ(*i.CustNameNEQ))
	}
	if len(i.CustNameIn) > 0 {
		predicates = append(predicates, mstcustomer.CustNameIn(i.CustNameIn...))
	}
	if len(i.CustNameNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustNameNotIn(i.CustNameNotIn...))
	}
	if i.CustNameGT != nil {
		predicates = append(predicates, mstcustomer.CustNameGT(*i.CustNameGT))
	}
	if i.CustNameGTE != nil {
		predicates = append(predicates, mstcustomer.CustNameGTE(*i.CustNameGTE))
	}
	if i.CustNameLT != nil {
		predicates = append(predicates, mstcustomer.CustNameLT(*i.CustNameLT))
	}
	if i.CustNameLTE != nil {
		predicates = append(predicates, mstcustomer.CustNameLTE(*i.CustNameLTE))
	}
	if i.CustNameContains != nil {
		predicates = append(predicates, mstcustomer.CustNameContains(*i.CustNameContains))
	}
	if i.CustNameHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustNameHasPrefix(*i.CustNameHasPrefix))
	}
	if i.CustNameHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustNameHasSuffix(*i.CustNameHasSuffix))
	}
	if i.CustNameEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustNameEqualFold(*i.CustNameEqualFold))
	}
	if i.CustNameContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustNameContainsFold(*i.CustNameContainsFold))
	}
	if i.CustAddress != nil {
		predicates = append(predicates, mstcustomer.CustAddressEQ(*i.CustAddress))
	}
	if i.CustAddressNEQ != nil {
		predicates = append(predicates, mstcustomer.CustAddressNEQ(*i.CustAddressNEQ))
	}
	if len(i.CustAddressIn) > 0 {
		predicates = append(predicates, mstcustomer.CustAddressIn(i.CustAddressIn...))
	}
	if len(i.CustAddressNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustAddressNotIn(i.CustAddressNotIn...))
	}
	if i.CustAddressGT != nil {
		predicates = append(predicates, mstcustomer.CustAddressGT(*i.CustAddressGT))
	}
	if i.CustAddressGTE != nil {
		predicates = append(predicates, mstcustomer.CustAddressGTE(*i.CustAddressGTE))
	}
	if i.CustAddressLT != nil {
		predicates = append(predicates, mstcustomer.CustAddressLT(*i.CustAddressLT))
	}
	if i.CustAddressLTE != nil {
		predicates = append(predicates, mstcustomer.CustAddressLTE(*i.CustAddressLTE))
	}
	if i.CustAddressContains != nil {
		predicates = append(predicates, mstcustomer.CustAddressContains(*i.CustAddressContains))
	}
	if i.CustAddressHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustAddressHasPrefix(*i.CustAddressHasPrefix))
	}
	if i.CustAddressHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustAddressHasSuffix(*i.CustAddressHasSuffix))
	}
	if i.CustAddressEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustAddressEqualFold(*i.CustAddressEqualFold))
	}
	if i.CustAddressContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustAddressContainsFold(*i.CustAddressContainsFold))
	}
	if i.CustPlace != nil {
		predicates = append(predicates, mstcustomer.CustPlaceEQ(*i.CustPlace))
	}
	if i.CustPlaceNEQ != nil {
		predicates = append(predicates, mstcustomer.CustPlaceNEQ(*i.CustPlaceNEQ))
	}
	if len(i.CustPlaceIn) > 0 {
		predicates = append(predicates, mstcustomer.CustPlaceIn(i.CustPlaceIn...))
	}
	if len(i.CustPlaceNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustPlaceNotIn(i.CustPlaceNotIn...))
	}
	if i.CustPlaceGT != nil {
		predicates = append(predicates, mstcustomer.CustPlaceGT(*i.CustPlaceGT))
	}
	if i.CustPlaceGTE != nil {
		predicates = append(predicates, mstcustomer.CustPlaceGTE(*i.CustPlaceGTE))
	}
	if i.CustPlaceLT != nil {
		predicates = append(predicates, mstcustomer.CustPlaceLT(*i.CustPlaceLT))
	}
	if i.CustPlaceLTE != nil {
		predicates = append(predicates, mstcustomer.CustPlaceLTE(*i.CustPlaceLTE))
	}
	if i.CustPlaceContains != nil {
		predicates = append(predicates, mstcustomer.CustPlaceContains(*i.CustPlaceContains))
	}
	if i.CustPlaceHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustPlaceHasPrefix(*i.CustPlaceHasPrefix))
	}
	if i.CustPlaceHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustPlaceHasSuffix(*i.CustPlaceHasSuffix))
	}
	if i.CustPlaceEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustPlaceEqualFold(*i.CustPlaceEqualFold))
	}
	if i.CustPlaceContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustPlaceContainsFold(*i.CustPlaceContainsFold))
	}
	if i.CustState != nil {
		predicates = append(predicates, mstcustomer.CustStateEQ(*i.CustState))
	}
	if i.CustStateNEQ != nil {
		predicates = append(predicates, mstcustomer.CustStateNEQ(*i.CustStateNEQ))
	}
	if len(i.CustStateIn) > 0 {
		predicates = append(predicates, mstcustomer.CustStateIn(i.CustStateIn...))
	}
	if len(i.CustStateNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustStateNotIn(i.CustStateNotIn...))
	}
	if i.CustStateGT != nil {
		predicates = append(predicates, mstcustomer.CustStateGT(*i.CustStateGT))
	}
	if i.CustStateGTE != nil {
		predicates = append(predicates, mstcustomer.CustStateGTE(*i.CustStateGTE))
	}
	if i.CustStateLT != nil {
		predicates = append(predicates, mstcustomer.CustStateLT(*i.CustStateLT))
	}
	if i.CustStateLTE != nil {
		predicates = append(predicates, mstcustomer.CustStateLTE(*i.CustStateLTE))
	}
	if i.CustStateContains != nil {
		predicates = append(predicates, mstcustomer.CustStateContains(*i.CustStateContains))
	}
	if i.CustStateHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustStateHasPrefix(*i.CustStateHasPrefix))
	}
	if i.CustStateHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustStateHasSuffix(*i.CustStateHasSuffix))
	}
	if i.CustStateEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustStateEqualFold(*i.CustStateEqualFold))
	}
	if i.CustStateContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustStateContainsFold(*i.CustStateContainsFold))
	}
	if i.CustPin != nil {
		predicates = append(predicates, mstcustomer.CustPinEQ(*i.CustPin))
	}
	if i.CustPinNEQ != nil {
		predicates = append(predicates, mstcustomer.CustPinNEQ(*i.CustPinNEQ))
	}
	if len(i.CustPinIn) > 0 {
		predicates = append(predicates, mstcustomer.CustPinIn(i.CustPinIn...))
	}
	if len(i.CustPinNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustPinNotIn(i.CustPinNotIn...))
	}
	if i.CustPinGT != nil {
		predicates = append(predicates, mstcustomer.CustPinGT(*i.CustPinGT))
	}
	if i.CustPinGTE != nil {
		predicates = append(predicates, mstcustomer.CustPinGTE(*i.CustPinGTE))
	}
	if i.CustPinLT != nil {
		predicates = append(predicates, mstcustomer.CustPinLT(*i.CustPinLT))
	}
	if i.CustPinLTE != nil {
		predicates = append(predicates, mstcustomer.CustPinLTE(*i.CustPinLTE))
	}
	if i.CustPinContains != nil {
		predicates = append(predicates, mstcustomer.CustPinContains(*i.CustPinContains))
	}
	if i.CustPinHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustPinHasPrefix(*i.CustPinHasPrefix))
	}
	if i.CustPinHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustPinHasSuffix(*i.CustPinHasSuffix))
	}
	if i.CustPinEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustPinEqualFold(*i.CustPinEqualFold))
	}
	if i.CustPinContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustPinContainsFold(*i.CustPinContainsFold))
	}
	if i.CustContactPerson != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonEQ(*i.CustContactPerson))
	}
	if i.CustContactPersonNEQ != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonNEQ(*i.CustContactPersonNEQ))
	}
	if len(i.CustContactPersonIn) > 0 {
		predicates = append(predicates, mstcustomer.CustContactPersonIn(i.CustContactPersonIn...))
	}
	if len(i.CustContactPersonNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustContactPersonNotIn(i.CustContactPersonNotIn...))
	}
	if i.CustContactPersonGT != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonGT(*i.CustContactPersonGT))
	}
	if i.CustContactPersonGTE != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonGTE(*i.CustContactPersonGTE))
	}
	if i.CustContactPersonLT != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonLT(*i.CustContactPersonLT))
	}
	if i.CustContactPersonLTE != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonLTE(*i.CustContactPersonLTE))
	}
	if i.CustContactPersonContains != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonContains(*i.CustContactPersonContains))
	}
	if i.CustContactPersonHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonHasPrefix(*i.CustContactPersonHasPrefix))
	}
	if i.CustContactPersonHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonHasSuffix(*i.CustContactPersonHasSuffix))
	}
	if i.CustContactPersonEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonEqualFold(*i.CustContactPersonEqualFold))
	}
	if i.CustContactPersonContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustContactPersonContainsFold(*i.CustContactPersonContainsFold))
	}
	if i.CustPhone != nil {
		predicates = append(predicates, mstcustomer.CustPhoneEQ(*i.CustPhone))
	}
	if i.CustPhoneNEQ != nil {
		predicates = append(predicates, mstcustomer.CustPhoneNEQ(*i.CustPhoneNEQ))
	}
	if len(i.CustPhoneIn) > 0 {
		predicates = append(predicates, mstcustomer.CustPhoneIn(i.CustPhoneIn...))
	}
	if len(i.CustPhoneNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustPhoneNotIn(i.CustPhoneNotIn...))
	}
	if i.CustPhoneGT != nil {
		predicates = append(predicates, mstcustomer.CustPhoneGT(*i.CustPhoneGT))
	}
	if i.CustPhoneGTE != nil {
		predicates = append(predicates, mstcustomer.CustPhoneGTE(*i.CustPhoneGTE))
	}
	if i.CustPhoneLT != nil {
		predicates = append(predicates, mstcustomer.CustPhoneLT(*i.CustPhoneLT))
	}
	if i.CustPhoneLTE != nil {
		predicates = append(predicates, mstcustomer.CustPhoneLTE(*i.CustPhoneLTE))
	}
	if i.CustPhoneContains != nil {
		predicates = append(predicates, mstcustomer.CustPhoneContains(*i.CustPhoneContains))
	}
	if i.CustPhoneHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustPhoneHasPrefix(*i.CustPhoneHasPrefix))
	}
	if i.CustPhoneHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustPhoneHasSuffix(*i.CustPhoneHasSuffix))
	}
	if i.CustPhoneEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustPhoneEqualFold(*i.CustPhoneEqualFold))
	}
	if i.CustPhoneContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustPhoneContainsFold(*i.CustPhoneContainsFold))
	}
	if i.CustEmail != nil {
		predicates = append(predicates, mstcustomer.CustEmailEQ(*i.CustEmail))
	}
	if i.CustEmailNEQ != nil {
		predicates = append(predicates, mstcustomer.CustEmailNEQ(*i.CustEmailNEQ))
	}
	if len(i.CustEmailIn) > 0 {
		predicates = append(predicates, mstcustomer.CustEmailIn(i.CustEmailIn...))
	}
	if len(i.CustEmailNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustEmailNotIn(i.CustEmailNotIn...))
	}
	if i.CustEmailGT != nil {
		predicates = append(predicates, mstcustomer.CustEmailGT(*i.CustEmailGT))
	}
	if i.CustEmailGTE != nil {
		predicates = append(predicates, mstcustomer.CustEmailGTE(*i.CustEmailGTE))
	}
	if i.CustEmailLT != nil {
		predicates = append(predicates, mstcustomer.CustEmailLT(*i.CustEmailLT))
	}
	if i.CustEmailLTE != nil {
		predicates = append(predicates, mstcustomer.CustEmailLTE(*i.CustEmailLTE))
	}
	if i.CustEmailContains != nil {
		predicates = append(predicates, mstcustomer.CustEmailContains(*i.CustEmailContains))
	}
	if i.CustEmailHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustEmailHasPrefix(*i.CustEmailHasPrefix))
	}
	if i.CustEmailHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustEmailHasSuffix(*i.CustEmailHasSuffix))
	}
	if i.CustEmailEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustEmailEqualFold(*i.CustEmailEqualFold))
	}
	if i.CustEmailContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustEmailContainsFold(*i.CustEmailContainsFold))
	}
	if i.CustMobile != nil {
		predicates = append(predicates, mstcustomer.CustMobileEQ(*i.CustMobile))
	}
	if i.CustMobileNEQ != nil {
		predicates = append(predicates, mstcustomer.CustMobileNEQ(*i.CustMobileNEQ))
	}
	if len(i.CustMobileIn) > 0 {
		predicates = append(predicates, mstcustomer.CustMobileIn(i.CustMobileIn...))
	}
	if len(i.CustMobileNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustMobileNotIn(i.CustMobileNotIn...))
	}
	if i.CustMobileGT != nil {
		predicates = append(predicates, mstcustomer.CustMobileGT(*i.CustMobileGT))
	}
	if i.CustMobileGTE != nil {
		predicates = append(predicates, mstcustomer.CustMobileGTE(*i.CustMobileGTE))
	}
	if i.CustMobileLT != nil {
		predicates = append(predicates, mstcustomer.CustMobileLT(*i.CustMobileLT))
	}
	if i.CustMobileLTE != nil {
		predicates = append(predicates, mstcustomer.CustMobileLTE(*i.CustMobileLTE))
	}
	if i.CustMobileContains != nil {
		predicates = append(predicates, mstcustomer.CustMobileContains(*i.CustMobileContains))
	}
	if i.CustMobileHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustMobileHasPrefix(*i.CustMobileHasPrefix))
	}
	if i.CustMobileHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustMobileHasSuffix(*i.CustMobileHasSuffix))
	}
	if i.CustMobileEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustMobileEqualFold(*i.CustMobileEqualFold))
	}
	if i.CustMobileContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustMobileContainsFold(*i.CustMobileContainsFold))
	}
	if i.CustURL != nil {
		predicates = append(predicates, mstcustomer.CustURLEQ(*i.CustURL))
	}
	if i.CustURLNEQ != nil {
		predicates = append(predicates, mstcustomer.CustURLNEQ(*i.CustURLNEQ))
	}
	if len(i.CustURLIn) > 0 {
		predicates = append(predicates, mstcustomer.CustURLIn(i.CustURLIn...))
	}
	if len(i.CustURLNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustURLNotIn(i.CustURLNotIn...))
	}
	if i.CustURLGT != nil {
		predicates = append(predicates, mstcustomer.CustURLGT(*i.CustURLGT))
	}
	if i.CustURLGTE != nil {
		predicates = append(predicates, mstcustomer.CustURLGTE(*i.CustURLGTE))
	}
	if i.CustURLLT != nil {
		predicates = append(predicates, mstcustomer.CustURLLT(*i.CustURLLT))
	}
	if i.CustURLLTE != nil {
		predicates = append(predicates, mstcustomer.CustURLLTE(*i.CustURLLTE))
	}
	if i.CustURLContains != nil {
		predicates = append(predicates, mstcustomer.CustURLContains(*i.CustURLContains))
	}
	if i.CustURLHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustURLHasPrefix(*i.CustURLHasPrefix))
	}
	if i.CustURLHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustURLHasSuffix(*i.CustURLHasSuffix))
	}
	if i.CustURLEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustURLEqualFold(*i.CustURLEqualFold))
	}
	if i.CustURLContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustURLContainsFold(*i.CustURLContainsFold))
	}
	if i.CustBanner1 != nil {
		predicates = append(predicates, mstcustomer.CustBanner1EQ(*i.CustBanner1))
	}
	if i.CustBanner1NEQ != nil {
		predicates = append(predicates, mstcustomer.CustBanner1NEQ(*i.CustBanner1NEQ))
	}
	if len(i.CustBanner1In) > 0 {
		predicates = append(predicates, mstcustomer.CustBanner1In(i.CustBanner1In...))
	}
	if len(i.CustBanner1NotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustBanner1NotIn(i.CustBanner1NotIn...))
	}
	if i.CustBanner1GT != nil {
		predicates = append(predicates, mstcustomer.CustBanner1GT(*i.CustBanner1GT))
	}
	if i.CustBanner1GTE != nil {
		predicates = append(predicates, mstcustomer.CustBanner1GTE(*i.CustBanner1GTE))
	}
	if i.CustBanner1LT != nil {
		predicates = append(predicates, mstcustomer.CustBanner1LT(*i.CustBanner1LT))
	}
	if i.CustBanner1LTE != nil {
		predicates = append(predicates, mstcustomer.CustBanner1LTE(*i.CustBanner1LTE))
	}
	if i.CustBanner1Contains != nil {
		predicates = append(predicates, mstcustomer.CustBanner1Contains(*i.CustBanner1Contains))
	}
	if i.CustBanner1HasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustBanner1HasPrefix(*i.CustBanner1HasPrefix))
	}
	if i.CustBanner1HasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustBanner1HasSuffix(*i.CustBanner1HasSuffix))
	}
	if i.CustBanner1EqualFold != nil {
		predicates = append(predicates, mstcustomer.CustBanner1EqualFold(*i.CustBanner1EqualFold))
	}
	if i.CustBanner1ContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustBanner1ContainsFold(*i.CustBanner1ContainsFold))
	}
	if i.CustBanner2 != nil {
		predicates = append(predicates, mstcustomer.CustBanner2EQ(*i.CustBanner2))
	}
	if i.CustBanner2NEQ != nil {
		predicates = append(predicates, mstcustomer.CustBanner2NEQ(*i.CustBanner2NEQ))
	}
	if len(i.CustBanner2In) > 0 {
		predicates = append(predicates, mstcustomer.CustBanner2In(i.CustBanner2In...))
	}
	if len(i.CustBanner2NotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustBanner2NotIn(i.CustBanner2NotIn...))
	}
	if i.CustBanner2GT != nil {
		predicates = append(predicates, mstcustomer.CustBanner2GT(*i.CustBanner2GT))
	}
	if i.CustBanner2GTE != nil {
		predicates = append(predicates, mstcustomer.CustBanner2GTE(*i.CustBanner2GTE))
	}
	if i.CustBanner2LT != nil {
		predicates = append(predicates, mstcustomer.CustBanner2LT(*i.CustBanner2LT))
	}
	if i.CustBanner2LTE != nil {
		predicates = append(predicates, mstcustomer.CustBanner2LTE(*i.CustBanner2LTE))
	}
	if i.CustBanner2Contains != nil {
		predicates = append(predicates, mstcustomer.CustBanner2Contains(*i.CustBanner2Contains))
	}
	if i.CustBanner2HasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustBanner2HasPrefix(*i.CustBanner2HasPrefix))
	}
	if i.CustBanner2HasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustBanner2HasSuffix(*i.CustBanner2HasSuffix))
	}
	if i.CustBanner2EqualFold != nil {
		predicates = append(predicates, mstcustomer.CustBanner2EqualFold(*i.CustBanner2EqualFold))
	}
	if i.CustBanner2ContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustBanner2ContainsFold(*i.CustBanner2ContainsFold))
	}
	if i.CustLogoURL != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLEQ(*i.CustLogoURL))
	}
	if i.CustLogoURLNEQ != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLNEQ(*i.CustLogoURLNEQ))
	}
	if len(i.CustLogoURLIn) > 0 {
		predicates = append(predicates, mstcustomer.CustLogoURLIn(i.CustLogoURLIn...))
	}
	if len(i.CustLogoURLNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustLogoURLNotIn(i.CustLogoURLNotIn...))
	}
	if i.CustLogoURLGT != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLGT(*i.CustLogoURLGT))
	}
	if i.CustLogoURLGTE != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLGTE(*i.CustLogoURLGTE))
	}
	if i.CustLogoURLLT != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLLT(*i.CustLogoURLLT))
	}
	if i.CustLogoURLLTE != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLLTE(*i.CustLogoURLLTE))
	}
	if i.CustLogoURLContains != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLContains(*i.CustLogoURLContains))
	}
	if i.CustLogoURLHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLHasPrefix(*i.CustLogoURLHasPrefix))
	}
	if i.CustLogoURLHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLHasSuffix(*i.CustLogoURLHasSuffix))
	}
	if i.CustLogoURLEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLEqualFold(*i.CustLogoURLEqualFold))
	}
	if i.CustLogoURLContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustLogoURLContainsFold(*i.CustLogoURLContainsFold))
	}
	if i.CustIsActive != nil {
		predicates = append(predicates, mstcustomer.CustIsActiveEQ(*i.CustIsActive))
	}
	if i.CustIsActiveNEQ != nil {
		predicates = append(predicates, mstcustomer.CustIsActiveNEQ(*i.CustIsActiveNEQ))
	}
	if len(i.CustIsActiveIn) > 0 {
		predicates = append(predicates, mstcustomer.CustIsActiveIn(i.CustIsActiveIn...))
	}
	if len(i.CustIsActiveNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustIsActiveNotIn(i.CustIsActiveNotIn...))
	}
	if i.CustStatus != nil {
		predicates = append(predicates, mstcustomer.CustStatusEQ(*i.CustStatus))
	}
	if i.CustStatusNEQ != nil {
		predicates = append(predicates, mstcustomer.CustStatusNEQ(*i.CustStatusNEQ))
	}
	if len(i.CustStatusIn) > 0 {
		predicates = append(predicates, mstcustomer.CustStatusIn(i.CustStatusIn...))
	}
	if len(i.CustStatusNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustStatusNotIn(i.CustStatusNotIn...))
	}
	if i.CustStatusGT != nil {
		predicates = append(predicates, mstcustomer.CustStatusGT(*i.CustStatusGT))
	}
	if i.CustStatusGTE != nil {
		predicates = append(predicates, mstcustomer.CustStatusGTE(*i.CustStatusGTE))
	}
	if i.CustStatusLT != nil {
		predicates = append(predicates, mstcustomer.CustStatusLT(*i.CustStatusLT))
	}
	if i.CustStatusLTE != nil {
		predicates = append(predicates, mstcustomer.CustStatusLTE(*i.CustStatusLTE))
	}
	if i.CustStatusContains != nil {
		predicates = append(predicates, mstcustomer.CustStatusContains(*i.CustStatusContains))
	}
	if i.CustStatusHasPrefix != nil {
		predicates = append(predicates, mstcustomer.CustStatusHasPrefix(*i.CustStatusHasPrefix))
	}
	if i.CustStatusHasSuffix != nil {
		predicates = append(predicates, mstcustomer.CustStatusHasSuffix(*i.CustStatusHasSuffix))
	}
	if i.CustStatusEqualFold != nil {
		predicates = append(predicates, mstcustomer.CustStatusEqualFold(*i.CustStatusEqualFold))
	}
	if i.CustStatusContainsFold != nil {
		predicates = append(predicates, mstcustomer.CustStatusContainsFold(*i.CustStatusContainsFold))
	}
	if i.CustNumInst != nil {
		predicates = append(predicates, mstcustomer.CustNumInstEQ(*i.CustNumInst))
	}
	if i.CustNumInstNEQ != nil {
		predicates = append(predicates, mstcustomer.CustNumInstNEQ(*i.CustNumInstNEQ))
	}
	if len(i.CustNumInstIn) > 0 {
		predicates = append(predicates, mstcustomer.CustNumInstIn(i.CustNumInstIn...))
	}
	if len(i.CustNumInstNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustNumInstNotIn(i.CustNumInstNotIn...))
	}
	if i.CustNumInstGT != nil {
		predicates = append(predicates, mstcustomer.CustNumInstGT(*i.CustNumInstGT))
	}
	if i.CustNumInstGTE != nil {
		predicates = append(predicates, mstcustomer.CustNumInstGTE(*i.CustNumInstGTE))
	}
	if i.CustNumInstLT != nil {
		predicates = append(predicates, mstcustomer.CustNumInstLT(*i.CustNumInstLT))
	}
	if i.CustNumInstLTE != nil {
		predicates = append(predicates, mstcustomer.CustNumInstLTE(*i.CustNumInstLTE))
	}
	if i.CustTimeZone != nil {
		predicates = append(predicates, mstcustomer.CustTimeZoneEQ(*i.CustTimeZone))
	}
	if i.CustTimeZoneNEQ != nil {
		predicates = append(predicates, mstcustomer.CustTimeZoneNEQ(*i.CustTimeZoneNEQ))
	}
	if len(i.CustTimeZoneIn) > 0 {
		predicates = append(predicates, mstcustomer.CustTimeZoneIn(i.CustTimeZoneIn...))
	}
	if len(i.CustTimeZoneNotIn) > 0 {
		predicates = append(predicates, mstcustomer.CustTimeZoneNotIn(i.CustTimeZoneNotIn...))
	}
	if i.CustTimeZoneGT != nil {
		predicates = append(predicates, mstcustomer.CustTimeZoneGT(*i.CustTimeZoneGT))
	}
	if i.CustTimeZoneGTE != nil {
		predicates = append(predicates, mstcustomer.CustTimeZoneGTE(*i.CustTimeZoneGTE))
	}
	if i.CustTimeZoneLT != nil {
		predicates = append(predicates, mstcustomer.CustTimeZoneLT(*i.CustTimeZoneLT))
	}
	if i.CustTimeZoneLTE != nil {
		predicates = append(predicates, mstcustomer.CustTimeZoneLTE(*i.CustTimeZoneLTE))
	}

	if i.HasCust2Inst != nil {
		p := mstcustomer.HasCust2Inst()
		if !*i.HasCust2Inst {
			p = mstcustomer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCust2InstWith) > 0 {
		with := make([]predicate.MstInst, 0, len(i.HasCust2InstWith))
		for _, w := range i.HasCust2InstWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, mstcustomer.HasCust2InstWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("myeduate/ent: empty predicate MstCustomerWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return mstcustomer.And(predicates...), nil
	}
}

// MstInstWhereInput represents a where input for filtering MstInst queries.
type MstInstWhereInput struct {
	Not *MstInstWhereInput   `json:"not,omitempty"`
	Or  []*MstInstWhereInput `json:"or,omitempty"`
	And []*MstInstWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "inst_code" field predicates.
	InstCode             *string  `json:"instCode,omitempty"`
	InstCodeNEQ          *string  `json:"instCodeNEQ,omitempty"`
	InstCodeIn           []string `json:"instCodeIn,omitempty"`
	InstCodeNotIn        []string `json:"instCodeNotIn,omitempty"`
	InstCodeGT           *string  `json:"instCodeGT,omitempty"`
	InstCodeGTE          *string  `json:"instCodeGTE,omitempty"`
	InstCodeLT           *string  `json:"instCodeLT,omitempty"`
	InstCodeLTE          *string  `json:"instCodeLTE,omitempty"`
	InstCodeContains     *string  `json:"instCodeContains,omitempty"`
	InstCodeHasPrefix    *string  `json:"instCodeHasPrefix,omitempty"`
	InstCodeHasSuffix    *string  `json:"instCodeHasSuffix,omitempty"`
	InstCodeEqualFold    *string  `json:"instCodeEqualFold,omitempty"`
	InstCodeContainsFold *string  `json:"instCodeContainsFold,omitempty"`

	// "inst_name" field predicates.
	InstName             *string  `json:"instName,omitempty"`
	InstNameNEQ          *string  `json:"instNameNEQ,omitempty"`
	InstNameIn           []string `json:"instNameIn,omitempty"`
	InstNameNotIn        []string `json:"instNameNotIn,omitempty"`
	InstNameGT           *string  `json:"instNameGT,omitempty"`
	InstNameGTE          *string  `json:"instNameGTE,omitempty"`
	InstNameLT           *string  `json:"instNameLT,omitempty"`
	InstNameLTE          *string  `json:"instNameLTE,omitempty"`
	InstNameContains     *string  `json:"instNameContains,omitempty"`
	InstNameHasPrefix    *string  `json:"instNameHasPrefix,omitempty"`
	InstNameHasSuffix    *string  `json:"instNameHasSuffix,omitempty"`
	InstNameEqualFold    *string  `json:"instNameEqualFold,omitempty"`
	InstNameContainsFold *string  `json:"instNameContainsFold,omitempty"`

	// "inst_short_name" field predicates.
	InstShortName             *string  `json:"instShortName,omitempty"`
	InstShortNameNEQ          *string  `json:"instShortNameNEQ,omitempty"`
	InstShortNameIn           []string `json:"instShortNameIn,omitempty"`
	InstShortNameNotIn        []string `json:"instShortNameNotIn,omitempty"`
	InstShortNameGT           *string  `json:"instShortNameGT,omitempty"`
	InstShortNameGTE          *string  `json:"instShortNameGTE,omitempty"`
	InstShortNameLT           *string  `json:"instShortNameLT,omitempty"`
	InstShortNameLTE          *string  `json:"instShortNameLTE,omitempty"`
	InstShortNameContains     *string  `json:"instShortNameContains,omitempty"`
	InstShortNameHasPrefix    *string  `json:"instShortNameHasPrefix,omitempty"`
	InstShortNameHasSuffix    *string  `json:"instShortNameHasSuffix,omitempty"`
	InstShortNameEqualFold    *string  `json:"instShortNameEqualFold,omitempty"`
	InstShortNameContainsFold *string  `json:"instShortNameContainsFold,omitempty"`

	// "inst_address" field predicates.
	InstAddress             *string  `json:"instAddress,omitempty"`
	InstAddressNEQ          *string  `json:"instAddressNEQ,omitempty"`
	InstAddressIn           []string `json:"instAddressIn,omitempty"`
	InstAddressNotIn        []string `json:"instAddressNotIn,omitempty"`
	InstAddressGT           *string  `json:"instAddressGT,omitempty"`
	InstAddressGTE          *string  `json:"instAddressGTE,omitempty"`
	InstAddressLT           *string  `json:"instAddressLT,omitempty"`
	InstAddressLTE          *string  `json:"instAddressLTE,omitempty"`
	InstAddressContains     *string  `json:"instAddressContains,omitempty"`
	InstAddressHasPrefix    *string  `json:"instAddressHasPrefix,omitempty"`
	InstAddressHasSuffix    *string  `json:"instAddressHasSuffix,omitempty"`
	InstAddressEqualFold    *string  `json:"instAddressEqualFold,omitempty"`
	InstAddressContainsFold *string  `json:"instAddressContainsFold,omitempty"`

	// "inst_place" field predicates.
	InstPlace             *string  `json:"instPlace,omitempty"`
	InstPlaceNEQ          *string  `json:"instPlaceNEQ,omitempty"`
	InstPlaceIn           []string `json:"instPlaceIn,omitempty"`
	InstPlaceNotIn        []string `json:"instPlaceNotIn,omitempty"`
	InstPlaceGT           *string  `json:"instPlaceGT,omitempty"`
	InstPlaceGTE          *string  `json:"instPlaceGTE,omitempty"`
	InstPlaceLT           *string  `json:"instPlaceLT,omitempty"`
	InstPlaceLTE          *string  `json:"instPlaceLTE,omitempty"`
	InstPlaceContains     *string  `json:"instPlaceContains,omitempty"`
	InstPlaceHasPrefix    *string  `json:"instPlaceHasPrefix,omitempty"`
	InstPlaceHasSuffix    *string  `json:"instPlaceHasSuffix,omitempty"`
	InstPlaceEqualFold    *string  `json:"instPlaceEqualFold,omitempty"`
	InstPlaceContainsFold *string  `json:"instPlaceContainsFold,omitempty"`

	// "inst_state" field predicates.
	InstState             *string  `json:"instState,omitempty"`
	InstStateNEQ          *string  `json:"instStateNEQ,omitempty"`
	InstStateIn           []string `json:"instStateIn,omitempty"`
	InstStateNotIn        []string `json:"instStateNotIn,omitempty"`
	InstStateGT           *string  `json:"instStateGT,omitempty"`
	InstStateGTE          *string  `json:"instStateGTE,omitempty"`
	InstStateLT           *string  `json:"instStateLT,omitempty"`
	InstStateLTE          *string  `json:"instStateLTE,omitempty"`
	InstStateContains     *string  `json:"instStateContains,omitempty"`
	InstStateHasPrefix    *string  `json:"instStateHasPrefix,omitempty"`
	InstStateHasSuffix    *string  `json:"instStateHasSuffix,omitempty"`
	InstStateEqualFold    *string  `json:"instStateEqualFold,omitempty"`
	InstStateContainsFold *string  `json:"instStateContainsFold,omitempty"`

	// "inst_pin" field predicates.
	InstPin             *string  `json:"instPin,omitempty"`
	InstPinNEQ          *string  `json:"instPinNEQ,omitempty"`
	InstPinIn           []string `json:"instPinIn,omitempty"`
	InstPinNotIn        []string `json:"instPinNotIn,omitempty"`
	InstPinGT           *string  `json:"instPinGT,omitempty"`
	InstPinGTE          *string  `json:"instPinGTE,omitempty"`
	InstPinLT           *string  `json:"instPinLT,omitempty"`
	InstPinLTE          *string  `json:"instPinLTE,omitempty"`
	InstPinContains     *string  `json:"instPinContains,omitempty"`
	InstPinHasPrefix    *string  `json:"instPinHasPrefix,omitempty"`
	InstPinHasSuffix    *string  `json:"instPinHasSuffix,omitempty"`
	InstPinEqualFold    *string  `json:"instPinEqualFold,omitempty"`
	InstPinContainsFold *string  `json:"instPinContainsFold,omitempty"`

	// "inst_contact_person" field predicates.
	InstContactPerson             *string  `json:"instContactPerson,omitempty"`
	InstContactPersonNEQ          *string  `json:"instContactPersonNEQ,omitempty"`
	InstContactPersonIn           []string `json:"instContactPersonIn,omitempty"`
	InstContactPersonNotIn        []string `json:"instContactPersonNotIn,omitempty"`
	InstContactPersonGT           *string  `json:"instContactPersonGT,omitempty"`
	InstContactPersonGTE          *string  `json:"instContactPersonGTE,omitempty"`
	InstContactPersonLT           *string  `json:"instContactPersonLT,omitempty"`
	InstContactPersonLTE          *string  `json:"instContactPersonLTE,omitempty"`
	InstContactPersonContains     *string  `json:"instContactPersonContains,omitempty"`
	InstContactPersonHasPrefix    *string  `json:"instContactPersonHasPrefix,omitempty"`
	InstContactPersonHasSuffix    *string  `json:"instContactPersonHasSuffix,omitempty"`
	InstContactPersonEqualFold    *string  `json:"instContactPersonEqualFold,omitempty"`
	InstContactPersonContainsFold *string  `json:"instContactPersonContainsFold,omitempty"`

	// "inst_phone" field predicates.
	InstPhone             *string  `json:"instPhone,omitempty"`
	InstPhoneNEQ          *string  `json:"instPhoneNEQ,omitempty"`
	InstPhoneIn           []string `json:"instPhoneIn,omitempty"`
	InstPhoneNotIn        []string `json:"instPhoneNotIn,omitempty"`
	InstPhoneGT           *string  `json:"instPhoneGT,omitempty"`
	InstPhoneGTE          *string  `json:"instPhoneGTE,omitempty"`
	InstPhoneLT           *string  `json:"instPhoneLT,omitempty"`
	InstPhoneLTE          *string  `json:"instPhoneLTE,omitempty"`
	InstPhoneContains     *string  `json:"instPhoneContains,omitempty"`
	InstPhoneHasPrefix    *string  `json:"instPhoneHasPrefix,omitempty"`
	InstPhoneHasSuffix    *string  `json:"instPhoneHasSuffix,omitempty"`
	InstPhoneEqualFold    *string  `json:"instPhoneEqualFold,omitempty"`
	InstPhoneContainsFold *string  `json:"instPhoneContainsFold,omitempty"`

	// "inst_email" field predicates.
	InstEmail             *string  `json:"instEmail,omitempty"`
	InstEmailNEQ          *string  `json:"instEmailNEQ,omitempty"`
	InstEmailIn           []string `json:"instEmailIn,omitempty"`
	InstEmailNotIn        []string `json:"instEmailNotIn,omitempty"`
	InstEmailGT           *string  `json:"instEmailGT,omitempty"`
	InstEmailGTE          *string  `json:"instEmailGTE,omitempty"`
	InstEmailLT           *string  `json:"instEmailLT,omitempty"`
	InstEmailLTE          *string  `json:"instEmailLTE,omitempty"`
	InstEmailContains     *string  `json:"instEmailContains,omitempty"`
	InstEmailHasPrefix    *string  `json:"instEmailHasPrefix,omitempty"`
	InstEmailHasSuffix    *string  `json:"instEmailHasSuffix,omitempty"`
	InstEmailEqualFold    *string  `json:"instEmailEqualFold,omitempty"`
	InstEmailContainsFold *string  `json:"instEmailContainsFold,omitempty"`

	// "inst_mobile" field predicates.
	InstMobile             *string  `json:"instMobile,omitempty"`
	InstMobileNEQ          *string  `json:"instMobileNEQ,omitempty"`
	InstMobileIn           []string `json:"instMobileIn,omitempty"`
	InstMobileNotIn        []string `json:"instMobileNotIn,omitempty"`
	InstMobileGT           *string  `json:"instMobileGT,omitempty"`
	InstMobileGTE          *string  `json:"instMobileGTE,omitempty"`
	InstMobileLT           *string  `json:"instMobileLT,omitempty"`
	InstMobileLTE          *string  `json:"instMobileLTE,omitempty"`
	InstMobileContains     *string  `json:"instMobileContains,omitempty"`
	InstMobileHasPrefix    *string  `json:"instMobileHasPrefix,omitempty"`
	InstMobileHasSuffix    *string  `json:"instMobileHasSuffix,omitempty"`
	InstMobileEqualFold    *string  `json:"instMobileEqualFold,omitempty"`
	InstMobileContainsFold *string  `json:"instMobileContainsFold,omitempty"`

	// "inst_url" field predicates.
	InstURL             *string  `json:"instURL,omitempty"`
	InstURLNEQ          *string  `json:"instURLNEQ,omitempty"`
	InstURLIn           []string `json:"instURLIn,omitempty"`
	InstURLNotIn        []string `json:"instURLNotIn,omitempty"`
	InstURLGT           *string  `json:"instURLGT,omitempty"`
	InstURLGTE          *string  `json:"instURLGTE,omitempty"`
	InstURLLT           *string  `json:"instURLLT,omitempty"`
	InstURLLTE          *string  `json:"instURLLTE,omitempty"`
	InstURLContains     *string  `json:"instURLContains,omitempty"`
	InstURLHasPrefix    *string  `json:"instURLHasPrefix,omitempty"`
	InstURLHasSuffix    *string  `json:"instURLHasSuffix,omitempty"`
	InstURLEqualFold    *string  `json:"instURLEqualFold,omitempty"`
	InstURLContainsFold *string  `json:"instURLContainsFold,omitempty"`

	// "inst_banner_1" field predicates.
	InstBanner1             *string  `json:"instBanner1,omitempty"`
	InstBanner1NEQ          *string  `json:"instBanner1NEQ,omitempty"`
	InstBanner1In           []string `json:"instBanner1In,omitempty"`
	InstBanner1NotIn        []string `json:"instBanner1NotIn,omitempty"`
	InstBanner1GT           *string  `json:"instBanner1GT,omitempty"`
	InstBanner1GTE          *string  `json:"instBanner1GTE,omitempty"`
	InstBanner1LT           *string  `json:"instBanner1LT,omitempty"`
	InstBanner1LTE          *string  `json:"instBanner1LTE,omitempty"`
	InstBanner1Contains     *string  `json:"instBanner1Contains,omitempty"`
	InstBanner1HasPrefix    *string  `json:"instBanner1HasPrefix,omitempty"`
	InstBanner1HasSuffix    *string  `json:"instBanner1HasSuffix,omitempty"`
	InstBanner1EqualFold    *string  `json:"instBanner1EqualFold,omitempty"`
	InstBanner1ContainsFold *string  `json:"instBanner1ContainsFold,omitempty"`

	// "inst_banner_2" field predicates.
	InstBanner2             *string  `json:"instBanner2,omitempty"`
	InstBanner2NEQ          *string  `json:"instBanner2NEQ,omitempty"`
	InstBanner2In           []string `json:"instBanner2In,omitempty"`
	InstBanner2NotIn        []string `json:"instBanner2NotIn,omitempty"`
	InstBanner2GT           *string  `json:"instBanner2GT,omitempty"`
	InstBanner2GTE          *string  `json:"instBanner2GTE,omitempty"`
	InstBanner2LT           *string  `json:"instBanner2LT,omitempty"`
	InstBanner2LTE          *string  `json:"instBanner2LTE,omitempty"`
	InstBanner2Contains     *string  `json:"instBanner2Contains,omitempty"`
	InstBanner2HasPrefix    *string  `json:"instBanner2HasPrefix,omitempty"`
	InstBanner2HasSuffix    *string  `json:"instBanner2HasSuffix,omitempty"`
	InstBanner2EqualFold    *string  `json:"instBanner2EqualFold,omitempty"`
	InstBanner2ContainsFold *string  `json:"instBanner2ContainsFold,omitempty"`

	// "inst_logo_url" field predicates.
	InstLogoURL             *string  `json:"instLogoURL,omitempty"`
	InstLogoURLNEQ          *string  `json:"instLogoURLNEQ,omitempty"`
	InstLogoURLIn           []string `json:"instLogoURLIn,omitempty"`
	InstLogoURLNotIn        []string `json:"instLogoURLNotIn,omitempty"`
	InstLogoURLGT           *string  `json:"instLogoURLGT,omitempty"`
	InstLogoURLGTE          *string  `json:"instLogoURLGTE,omitempty"`
	InstLogoURLLT           *string  `json:"instLogoURLLT,omitempty"`
	InstLogoURLLTE          *string  `json:"instLogoURLLTE,omitempty"`
	InstLogoURLContains     *string  `json:"instLogoURLContains,omitempty"`
	InstLogoURLHasPrefix    *string  `json:"instLogoURLHasPrefix,omitempty"`
	InstLogoURLHasSuffix    *string  `json:"instLogoURLHasSuffix,omitempty"`
	InstLogoURLEqualFold    *string  `json:"instLogoURLEqualFold,omitempty"`
	InstLogoURLContainsFold *string  `json:"instLogoURLContainsFold,omitempty"`

	// "inst_is_active" field predicates.
	InstIsActive      *customtypes.IsActive  `json:"instIsActive,omitempty"`
	InstIsActiveNEQ   *customtypes.IsActive  `json:"instIsActiveNEQ,omitempty"`
	InstIsActiveIn    []customtypes.IsActive `json:"instIsActiveIn,omitempty"`
	InstIsActiveNotIn []customtypes.IsActive `json:"instIsActiveNotIn,omitempty"`

	// "inst_status" field predicates.
	InstStatus             *string  `json:"instStatus,omitempty"`
	InstStatusNEQ          *string  `json:"instStatusNEQ,omitempty"`
	InstStatusIn           []string `json:"instStatusIn,omitempty"`
	InstStatusNotIn        []string `json:"instStatusNotIn,omitempty"`
	InstStatusGT           *string  `json:"instStatusGT,omitempty"`
	InstStatusGTE          *string  `json:"instStatusGTE,omitempty"`
	InstStatusLT           *string  `json:"instStatusLT,omitempty"`
	InstStatusLTE          *string  `json:"instStatusLTE,omitempty"`
	InstStatusContains     *string  `json:"instStatusContains,omitempty"`
	InstStatusHasPrefix    *string  `json:"instStatusHasPrefix,omitempty"`
	InstStatusHasSuffix    *string  `json:"instStatusHasSuffix,omitempty"`
	InstStatusEqualFold    *string  `json:"instStatusEqualFold,omitempty"`
	InstStatusContainsFold *string  `json:"instStatusContainsFold,omitempty"`

	// "inst_time_zone" field predicates.
	InstTimeZone      *time.Time  `json:"instTimeZone,omitempty"`
	InstTimeZoneNEQ   *time.Time  `json:"instTimeZoneNEQ,omitempty"`
	InstTimeZoneIn    []time.Time `json:"instTimeZoneIn,omitempty"`
	InstTimeZoneNotIn []time.Time `json:"instTimeZoneNotIn,omitempty"`
	InstTimeZoneGT    *time.Time  `json:"instTimeZoneGT,omitempty"`
	InstTimeZoneGTE   *time.Time  `json:"instTimeZoneGTE,omitempty"`
	InstTimeZoneLT    *time.Time  `json:"instTimeZoneLT,omitempty"`
	InstTimeZoneLTE   *time.Time  `json:"instTimeZoneLTE,omitempty"`

	// "customer_id" field predicates.
	CustomerID      *int  `json:"customerID,omitempty"`
	CustomerIDNEQ   *int  `json:"customerIDNEQ,omitempty"`
	CustomerIDIn    []int `json:"customerIDIn,omitempty"`
	CustomerIDNotIn []int `json:"customerIDNotIn,omitempty"`

	// "InstfromCust" edge predicates.
	HasInstfromCust     *bool                    `json:"hasInstfromCust,omitempty"`
	HasInstfromCustWith []*MstCustomerWhereInput `json:"hasInstfromCustWith,omitempty"`
}

// Filter applies the MstInstWhereInput filter on the MstInstQuery builder.
func (i *MstInstWhereInput) Filter(q *MstInstQuery) (*MstInstQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering mstinsts.
// An error is returned if the input is empty or invalid.
func (i *MstInstWhereInput) P() (predicate.MstInst, error) {
	var predicates []predicate.MstInst
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, mstinst.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.MstInst, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, mstinst.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.MstInst, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, mstinst.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, mstinst.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, mstinst.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, mstinst.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, mstinst.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, mstinst.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, mstinst.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, mstinst.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, mstinst.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, mstinst.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, mstinst.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, mstinst.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, mstinst.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, mstinst.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, mstinst.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, mstinst.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, mstinst.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, mstinst.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, mstinst.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, mstinst.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, mstinst.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, mstinst.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, mstinst.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, mstinst.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, mstinst.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.InstCode != nil {
		predicates = append(predicates, mstinst.InstCodeEQ(*i.InstCode))
	}
	if i.InstCodeNEQ != nil {
		predicates = append(predicates, mstinst.InstCodeNEQ(*i.InstCodeNEQ))
	}
	if len(i.InstCodeIn) > 0 {
		predicates = append(predicates, mstinst.InstCodeIn(i.InstCodeIn...))
	}
	if len(i.InstCodeNotIn) > 0 {
		predicates = append(predicates, mstinst.InstCodeNotIn(i.InstCodeNotIn...))
	}
	if i.InstCodeGT != nil {
		predicates = append(predicates, mstinst.InstCodeGT(*i.InstCodeGT))
	}
	if i.InstCodeGTE != nil {
		predicates = append(predicates, mstinst.InstCodeGTE(*i.InstCodeGTE))
	}
	if i.InstCodeLT != nil {
		predicates = append(predicates, mstinst.InstCodeLT(*i.InstCodeLT))
	}
	if i.InstCodeLTE != nil {
		predicates = append(predicates, mstinst.InstCodeLTE(*i.InstCodeLTE))
	}
	if i.InstCodeContains != nil {
		predicates = append(predicates, mstinst.InstCodeContains(*i.InstCodeContains))
	}
	if i.InstCodeHasPrefix != nil {
		predicates = append(predicates, mstinst.InstCodeHasPrefix(*i.InstCodeHasPrefix))
	}
	if i.InstCodeHasSuffix != nil {
		predicates = append(predicates, mstinst.InstCodeHasSuffix(*i.InstCodeHasSuffix))
	}
	if i.InstCodeEqualFold != nil {
		predicates = append(predicates, mstinst.InstCodeEqualFold(*i.InstCodeEqualFold))
	}
	if i.InstCodeContainsFold != nil {
		predicates = append(predicates, mstinst.InstCodeContainsFold(*i.InstCodeContainsFold))
	}
	if i.InstName != nil {
		predicates = append(predicates, mstinst.InstNameEQ(*i.InstName))
	}
	if i.InstNameNEQ != nil {
		predicates = append(predicates, mstinst.InstNameNEQ(*i.InstNameNEQ))
	}
	if len(i.InstNameIn) > 0 {
		predicates = append(predicates, mstinst.InstNameIn(i.InstNameIn...))
	}
	if len(i.InstNameNotIn) > 0 {
		predicates = append(predicates, mstinst.InstNameNotIn(i.InstNameNotIn...))
	}
	if i.InstNameGT != nil {
		predicates = append(predicates, mstinst.InstNameGT(*i.InstNameGT))
	}
	if i.InstNameGTE != nil {
		predicates = append(predicates, mstinst.InstNameGTE(*i.InstNameGTE))
	}
	if i.InstNameLT != nil {
		predicates = append(predicates, mstinst.InstNameLT(*i.InstNameLT))
	}
	if i.InstNameLTE != nil {
		predicates = append(predicates, mstinst.InstNameLTE(*i.InstNameLTE))
	}
	if i.InstNameContains != nil {
		predicates = append(predicates, mstinst.InstNameContains(*i.InstNameContains))
	}
	if i.InstNameHasPrefix != nil {
		predicates = append(predicates, mstinst.InstNameHasPrefix(*i.InstNameHasPrefix))
	}
	if i.InstNameHasSuffix != nil {
		predicates = append(predicates, mstinst.InstNameHasSuffix(*i.InstNameHasSuffix))
	}
	if i.InstNameEqualFold != nil {
		predicates = append(predicates, mstinst.InstNameEqualFold(*i.InstNameEqualFold))
	}
	if i.InstNameContainsFold != nil {
		predicates = append(predicates, mstinst.InstNameContainsFold(*i.InstNameContainsFold))
	}
	if i.InstShortName != nil {
		predicates = append(predicates, mstinst.InstShortNameEQ(*i.InstShortName))
	}
	if i.InstShortNameNEQ != nil {
		predicates = append(predicates, mstinst.InstShortNameNEQ(*i.InstShortNameNEQ))
	}
	if len(i.InstShortNameIn) > 0 {
		predicates = append(predicates, mstinst.InstShortNameIn(i.InstShortNameIn...))
	}
	if len(i.InstShortNameNotIn) > 0 {
		predicates = append(predicates, mstinst.InstShortNameNotIn(i.InstShortNameNotIn...))
	}
	if i.InstShortNameGT != nil {
		predicates = append(predicates, mstinst.InstShortNameGT(*i.InstShortNameGT))
	}
	if i.InstShortNameGTE != nil {
		predicates = append(predicates, mstinst.InstShortNameGTE(*i.InstShortNameGTE))
	}
	if i.InstShortNameLT != nil {
		predicates = append(predicates, mstinst.InstShortNameLT(*i.InstShortNameLT))
	}
	if i.InstShortNameLTE != nil {
		predicates = append(predicates, mstinst.InstShortNameLTE(*i.InstShortNameLTE))
	}
	if i.InstShortNameContains != nil {
		predicates = append(predicates, mstinst.InstShortNameContains(*i.InstShortNameContains))
	}
	if i.InstShortNameHasPrefix != nil {
		predicates = append(predicates, mstinst.InstShortNameHasPrefix(*i.InstShortNameHasPrefix))
	}
	if i.InstShortNameHasSuffix != nil {
		predicates = append(predicates, mstinst.InstShortNameHasSuffix(*i.InstShortNameHasSuffix))
	}
	if i.InstShortNameEqualFold != nil {
		predicates = append(predicates, mstinst.InstShortNameEqualFold(*i.InstShortNameEqualFold))
	}
	if i.InstShortNameContainsFold != nil {
		predicates = append(predicates, mstinst.InstShortNameContainsFold(*i.InstShortNameContainsFold))
	}
	if i.InstAddress != nil {
		predicates = append(predicates, mstinst.InstAddressEQ(*i.InstAddress))
	}
	if i.InstAddressNEQ != nil {
		predicates = append(predicates, mstinst.InstAddressNEQ(*i.InstAddressNEQ))
	}
	if len(i.InstAddressIn) > 0 {
		predicates = append(predicates, mstinst.InstAddressIn(i.InstAddressIn...))
	}
	if len(i.InstAddressNotIn) > 0 {
		predicates = append(predicates, mstinst.InstAddressNotIn(i.InstAddressNotIn...))
	}
	if i.InstAddressGT != nil {
		predicates = append(predicates, mstinst.InstAddressGT(*i.InstAddressGT))
	}
	if i.InstAddressGTE != nil {
		predicates = append(predicates, mstinst.InstAddressGTE(*i.InstAddressGTE))
	}
	if i.InstAddressLT != nil {
		predicates = append(predicates, mstinst.InstAddressLT(*i.InstAddressLT))
	}
	if i.InstAddressLTE != nil {
		predicates = append(predicates, mstinst.InstAddressLTE(*i.InstAddressLTE))
	}
	if i.InstAddressContains != nil {
		predicates = append(predicates, mstinst.InstAddressContains(*i.InstAddressContains))
	}
	if i.InstAddressHasPrefix != nil {
		predicates = append(predicates, mstinst.InstAddressHasPrefix(*i.InstAddressHasPrefix))
	}
	if i.InstAddressHasSuffix != nil {
		predicates = append(predicates, mstinst.InstAddressHasSuffix(*i.InstAddressHasSuffix))
	}
	if i.InstAddressEqualFold != nil {
		predicates = append(predicates, mstinst.InstAddressEqualFold(*i.InstAddressEqualFold))
	}
	if i.InstAddressContainsFold != nil {
		predicates = append(predicates, mstinst.InstAddressContainsFold(*i.InstAddressContainsFold))
	}
	if i.InstPlace != nil {
		predicates = append(predicates, mstinst.InstPlaceEQ(*i.InstPlace))
	}
	if i.InstPlaceNEQ != nil {
		predicates = append(predicates, mstinst.InstPlaceNEQ(*i.InstPlaceNEQ))
	}
	if len(i.InstPlaceIn) > 0 {
		predicates = append(predicates, mstinst.InstPlaceIn(i.InstPlaceIn...))
	}
	if len(i.InstPlaceNotIn) > 0 {
		predicates = append(predicates, mstinst.InstPlaceNotIn(i.InstPlaceNotIn...))
	}
	if i.InstPlaceGT != nil {
		predicates = append(predicates, mstinst.InstPlaceGT(*i.InstPlaceGT))
	}
	if i.InstPlaceGTE != nil {
		predicates = append(predicates, mstinst.InstPlaceGTE(*i.InstPlaceGTE))
	}
	if i.InstPlaceLT != nil {
		predicates = append(predicates, mstinst.InstPlaceLT(*i.InstPlaceLT))
	}
	if i.InstPlaceLTE != nil {
		predicates = append(predicates, mstinst.InstPlaceLTE(*i.InstPlaceLTE))
	}
	if i.InstPlaceContains != nil {
		predicates = append(predicates, mstinst.InstPlaceContains(*i.InstPlaceContains))
	}
	if i.InstPlaceHasPrefix != nil {
		predicates = append(predicates, mstinst.InstPlaceHasPrefix(*i.InstPlaceHasPrefix))
	}
	if i.InstPlaceHasSuffix != nil {
		predicates = append(predicates, mstinst.InstPlaceHasSuffix(*i.InstPlaceHasSuffix))
	}
	if i.InstPlaceEqualFold != nil {
		predicates = append(predicates, mstinst.InstPlaceEqualFold(*i.InstPlaceEqualFold))
	}
	if i.InstPlaceContainsFold != nil {
		predicates = append(predicates, mstinst.InstPlaceContainsFold(*i.InstPlaceContainsFold))
	}
	if i.InstState != nil {
		predicates = append(predicates, mstinst.InstStateEQ(*i.InstState))
	}
	if i.InstStateNEQ != nil {
		predicates = append(predicates, mstinst.InstStateNEQ(*i.InstStateNEQ))
	}
	if len(i.InstStateIn) > 0 {
		predicates = append(predicates, mstinst.InstStateIn(i.InstStateIn...))
	}
	if len(i.InstStateNotIn) > 0 {
		predicates = append(predicates, mstinst.InstStateNotIn(i.InstStateNotIn...))
	}
	if i.InstStateGT != nil {
		predicates = append(predicates, mstinst.InstStateGT(*i.InstStateGT))
	}
	if i.InstStateGTE != nil {
		predicates = append(predicates, mstinst.InstStateGTE(*i.InstStateGTE))
	}
	if i.InstStateLT != nil {
		predicates = append(predicates, mstinst.InstStateLT(*i.InstStateLT))
	}
	if i.InstStateLTE != nil {
		predicates = append(predicates, mstinst.InstStateLTE(*i.InstStateLTE))
	}
	if i.InstStateContains != nil {
		predicates = append(predicates, mstinst.InstStateContains(*i.InstStateContains))
	}
	if i.InstStateHasPrefix != nil {
		predicates = append(predicates, mstinst.InstStateHasPrefix(*i.InstStateHasPrefix))
	}
	if i.InstStateHasSuffix != nil {
		predicates = append(predicates, mstinst.InstStateHasSuffix(*i.InstStateHasSuffix))
	}
	if i.InstStateEqualFold != nil {
		predicates = append(predicates, mstinst.InstStateEqualFold(*i.InstStateEqualFold))
	}
	if i.InstStateContainsFold != nil {
		predicates = append(predicates, mstinst.InstStateContainsFold(*i.InstStateContainsFold))
	}
	if i.InstPin != nil {
		predicates = append(predicates, mstinst.InstPinEQ(*i.InstPin))
	}
	if i.InstPinNEQ != nil {
		predicates = append(predicates, mstinst.InstPinNEQ(*i.InstPinNEQ))
	}
	if len(i.InstPinIn) > 0 {
		predicates = append(predicates, mstinst.InstPinIn(i.InstPinIn...))
	}
	if len(i.InstPinNotIn) > 0 {
		predicates = append(predicates, mstinst.InstPinNotIn(i.InstPinNotIn...))
	}
	if i.InstPinGT != nil {
		predicates = append(predicates, mstinst.InstPinGT(*i.InstPinGT))
	}
	if i.InstPinGTE != nil {
		predicates = append(predicates, mstinst.InstPinGTE(*i.InstPinGTE))
	}
	if i.InstPinLT != nil {
		predicates = append(predicates, mstinst.InstPinLT(*i.InstPinLT))
	}
	if i.InstPinLTE != nil {
		predicates = append(predicates, mstinst.InstPinLTE(*i.InstPinLTE))
	}
	if i.InstPinContains != nil {
		predicates = append(predicates, mstinst.InstPinContains(*i.InstPinContains))
	}
	if i.InstPinHasPrefix != nil {
		predicates = append(predicates, mstinst.InstPinHasPrefix(*i.InstPinHasPrefix))
	}
	if i.InstPinHasSuffix != nil {
		predicates = append(predicates, mstinst.InstPinHasSuffix(*i.InstPinHasSuffix))
	}
	if i.InstPinEqualFold != nil {
		predicates = append(predicates, mstinst.InstPinEqualFold(*i.InstPinEqualFold))
	}
	if i.InstPinContainsFold != nil {
		predicates = append(predicates, mstinst.InstPinContainsFold(*i.InstPinContainsFold))
	}
	if i.InstContactPerson != nil {
		predicates = append(predicates, mstinst.InstContactPersonEQ(*i.InstContactPerson))
	}
	if i.InstContactPersonNEQ != nil {
		predicates = append(predicates, mstinst.InstContactPersonNEQ(*i.InstContactPersonNEQ))
	}
	if len(i.InstContactPersonIn) > 0 {
		predicates = append(predicates, mstinst.InstContactPersonIn(i.InstContactPersonIn...))
	}
	if len(i.InstContactPersonNotIn) > 0 {
		predicates = append(predicates, mstinst.InstContactPersonNotIn(i.InstContactPersonNotIn...))
	}
	if i.InstContactPersonGT != nil {
		predicates = append(predicates, mstinst.InstContactPersonGT(*i.InstContactPersonGT))
	}
	if i.InstContactPersonGTE != nil {
		predicates = append(predicates, mstinst.InstContactPersonGTE(*i.InstContactPersonGTE))
	}
	if i.InstContactPersonLT != nil {
		predicates = append(predicates, mstinst.InstContactPersonLT(*i.InstContactPersonLT))
	}
	if i.InstContactPersonLTE != nil {
		predicates = append(predicates, mstinst.InstContactPersonLTE(*i.InstContactPersonLTE))
	}
	if i.InstContactPersonContains != nil {
		predicates = append(predicates, mstinst.InstContactPersonContains(*i.InstContactPersonContains))
	}
	if i.InstContactPersonHasPrefix != nil {
		predicates = append(predicates, mstinst.InstContactPersonHasPrefix(*i.InstContactPersonHasPrefix))
	}
	if i.InstContactPersonHasSuffix != nil {
		predicates = append(predicates, mstinst.InstContactPersonHasSuffix(*i.InstContactPersonHasSuffix))
	}
	if i.InstContactPersonEqualFold != nil {
		predicates = append(predicates, mstinst.InstContactPersonEqualFold(*i.InstContactPersonEqualFold))
	}
	if i.InstContactPersonContainsFold != nil {
		predicates = append(predicates, mstinst.InstContactPersonContainsFold(*i.InstContactPersonContainsFold))
	}
	if i.InstPhone != nil {
		predicates = append(predicates, mstinst.InstPhoneEQ(*i.InstPhone))
	}
	if i.InstPhoneNEQ != nil {
		predicates = append(predicates, mstinst.InstPhoneNEQ(*i.InstPhoneNEQ))
	}
	if len(i.InstPhoneIn) > 0 {
		predicates = append(predicates, mstinst.InstPhoneIn(i.InstPhoneIn...))
	}
	if len(i.InstPhoneNotIn) > 0 {
		predicates = append(predicates, mstinst.InstPhoneNotIn(i.InstPhoneNotIn...))
	}
	if i.InstPhoneGT != nil {
		predicates = append(predicates, mstinst.InstPhoneGT(*i.InstPhoneGT))
	}
	if i.InstPhoneGTE != nil {
		predicates = append(predicates, mstinst.InstPhoneGTE(*i.InstPhoneGTE))
	}
	if i.InstPhoneLT != nil {
		predicates = append(predicates, mstinst.InstPhoneLT(*i.InstPhoneLT))
	}
	if i.InstPhoneLTE != nil {
		predicates = append(predicates, mstinst.InstPhoneLTE(*i.InstPhoneLTE))
	}
	if i.InstPhoneContains != nil {
		predicates = append(predicates, mstinst.InstPhoneContains(*i.InstPhoneContains))
	}
	if i.InstPhoneHasPrefix != nil {
		predicates = append(predicates, mstinst.InstPhoneHasPrefix(*i.InstPhoneHasPrefix))
	}
	if i.InstPhoneHasSuffix != nil {
		predicates = append(predicates, mstinst.InstPhoneHasSuffix(*i.InstPhoneHasSuffix))
	}
	if i.InstPhoneEqualFold != nil {
		predicates = append(predicates, mstinst.InstPhoneEqualFold(*i.InstPhoneEqualFold))
	}
	if i.InstPhoneContainsFold != nil {
		predicates = append(predicates, mstinst.InstPhoneContainsFold(*i.InstPhoneContainsFold))
	}
	if i.InstEmail != nil {
		predicates = append(predicates, mstinst.InstEmailEQ(*i.InstEmail))
	}
	if i.InstEmailNEQ != nil {
		predicates = append(predicates, mstinst.InstEmailNEQ(*i.InstEmailNEQ))
	}
	if len(i.InstEmailIn) > 0 {
		predicates = append(predicates, mstinst.InstEmailIn(i.InstEmailIn...))
	}
	if len(i.InstEmailNotIn) > 0 {
		predicates = append(predicates, mstinst.InstEmailNotIn(i.InstEmailNotIn...))
	}
	if i.InstEmailGT != nil {
		predicates = append(predicates, mstinst.InstEmailGT(*i.InstEmailGT))
	}
	if i.InstEmailGTE != nil {
		predicates = append(predicates, mstinst.InstEmailGTE(*i.InstEmailGTE))
	}
	if i.InstEmailLT != nil {
		predicates = append(predicates, mstinst.InstEmailLT(*i.InstEmailLT))
	}
	if i.InstEmailLTE != nil {
		predicates = append(predicates, mstinst.InstEmailLTE(*i.InstEmailLTE))
	}
	if i.InstEmailContains != nil {
		predicates = append(predicates, mstinst.InstEmailContains(*i.InstEmailContains))
	}
	if i.InstEmailHasPrefix != nil {
		predicates = append(predicates, mstinst.InstEmailHasPrefix(*i.InstEmailHasPrefix))
	}
	if i.InstEmailHasSuffix != nil {
		predicates = append(predicates, mstinst.InstEmailHasSuffix(*i.InstEmailHasSuffix))
	}
	if i.InstEmailEqualFold != nil {
		predicates = append(predicates, mstinst.InstEmailEqualFold(*i.InstEmailEqualFold))
	}
	if i.InstEmailContainsFold != nil {
		predicates = append(predicates, mstinst.InstEmailContainsFold(*i.InstEmailContainsFold))
	}
	if i.InstMobile != nil {
		predicates = append(predicates, mstinst.InstMobileEQ(*i.InstMobile))
	}
	if i.InstMobileNEQ != nil {
		predicates = append(predicates, mstinst.InstMobileNEQ(*i.InstMobileNEQ))
	}
	if len(i.InstMobileIn) > 0 {
		predicates = append(predicates, mstinst.InstMobileIn(i.InstMobileIn...))
	}
	if len(i.InstMobileNotIn) > 0 {
		predicates = append(predicates, mstinst.InstMobileNotIn(i.InstMobileNotIn...))
	}
	if i.InstMobileGT != nil {
		predicates = append(predicates, mstinst.InstMobileGT(*i.InstMobileGT))
	}
	if i.InstMobileGTE != nil {
		predicates = append(predicates, mstinst.InstMobileGTE(*i.InstMobileGTE))
	}
	if i.InstMobileLT != nil {
		predicates = append(predicates, mstinst.InstMobileLT(*i.InstMobileLT))
	}
	if i.InstMobileLTE != nil {
		predicates = append(predicates, mstinst.InstMobileLTE(*i.InstMobileLTE))
	}
	if i.InstMobileContains != nil {
		predicates = append(predicates, mstinst.InstMobileContains(*i.InstMobileContains))
	}
	if i.InstMobileHasPrefix != nil {
		predicates = append(predicates, mstinst.InstMobileHasPrefix(*i.InstMobileHasPrefix))
	}
	if i.InstMobileHasSuffix != nil {
		predicates = append(predicates, mstinst.InstMobileHasSuffix(*i.InstMobileHasSuffix))
	}
	if i.InstMobileEqualFold != nil {
		predicates = append(predicates, mstinst.InstMobileEqualFold(*i.InstMobileEqualFold))
	}
	if i.InstMobileContainsFold != nil {
		predicates = append(predicates, mstinst.InstMobileContainsFold(*i.InstMobileContainsFold))
	}
	if i.InstURL != nil {
		predicates = append(predicates, mstinst.InstURLEQ(*i.InstURL))
	}
	if i.InstURLNEQ != nil {
		predicates = append(predicates, mstinst.InstURLNEQ(*i.InstURLNEQ))
	}
	if len(i.InstURLIn) > 0 {
		predicates = append(predicates, mstinst.InstURLIn(i.InstURLIn...))
	}
	if len(i.InstURLNotIn) > 0 {
		predicates = append(predicates, mstinst.InstURLNotIn(i.InstURLNotIn...))
	}
	if i.InstURLGT != nil {
		predicates = append(predicates, mstinst.InstURLGT(*i.InstURLGT))
	}
	if i.InstURLGTE != nil {
		predicates = append(predicates, mstinst.InstURLGTE(*i.InstURLGTE))
	}
	if i.InstURLLT != nil {
		predicates = append(predicates, mstinst.InstURLLT(*i.InstURLLT))
	}
	if i.InstURLLTE != nil {
		predicates = append(predicates, mstinst.InstURLLTE(*i.InstURLLTE))
	}
	if i.InstURLContains != nil {
		predicates = append(predicates, mstinst.InstURLContains(*i.InstURLContains))
	}
	if i.InstURLHasPrefix != nil {
		predicates = append(predicates, mstinst.InstURLHasPrefix(*i.InstURLHasPrefix))
	}
	if i.InstURLHasSuffix != nil {
		predicates = append(predicates, mstinst.InstURLHasSuffix(*i.InstURLHasSuffix))
	}
	if i.InstURLEqualFold != nil {
		predicates = append(predicates, mstinst.InstURLEqualFold(*i.InstURLEqualFold))
	}
	if i.InstURLContainsFold != nil {
		predicates = append(predicates, mstinst.InstURLContainsFold(*i.InstURLContainsFold))
	}
	if i.InstBanner1 != nil {
		predicates = append(predicates, mstinst.InstBanner1EQ(*i.InstBanner1))
	}
	if i.InstBanner1NEQ != nil {
		predicates = append(predicates, mstinst.InstBanner1NEQ(*i.InstBanner1NEQ))
	}
	if len(i.InstBanner1In) > 0 {
		predicates = append(predicates, mstinst.InstBanner1In(i.InstBanner1In...))
	}
	if len(i.InstBanner1NotIn) > 0 {
		predicates = append(predicates, mstinst.InstBanner1NotIn(i.InstBanner1NotIn...))
	}
	if i.InstBanner1GT != nil {
		predicates = append(predicates, mstinst.InstBanner1GT(*i.InstBanner1GT))
	}
	if i.InstBanner1GTE != nil {
		predicates = append(predicates, mstinst.InstBanner1GTE(*i.InstBanner1GTE))
	}
	if i.InstBanner1LT != nil {
		predicates = append(predicates, mstinst.InstBanner1LT(*i.InstBanner1LT))
	}
	if i.InstBanner1LTE != nil {
		predicates = append(predicates, mstinst.InstBanner1LTE(*i.InstBanner1LTE))
	}
	if i.InstBanner1Contains != nil {
		predicates = append(predicates, mstinst.InstBanner1Contains(*i.InstBanner1Contains))
	}
	if i.InstBanner1HasPrefix != nil {
		predicates = append(predicates, mstinst.InstBanner1HasPrefix(*i.InstBanner1HasPrefix))
	}
	if i.InstBanner1HasSuffix != nil {
		predicates = append(predicates, mstinst.InstBanner1HasSuffix(*i.InstBanner1HasSuffix))
	}
	if i.InstBanner1EqualFold != nil {
		predicates = append(predicates, mstinst.InstBanner1EqualFold(*i.InstBanner1EqualFold))
	}
	if i.InstBanner1ContainsFold != nil {
		predicates = append(predicates, mstinst.InstBanner1ContainsFold(*i.InstBanner1ContainsFold))
	}
	if i.InstBanner2 != nil {
		predicates = append(predicates, mstinst.InstBanner2EQ(*i.InstBanner2))
	}
	if i.InstBanner2NEQ != nil {
		predicates = append(predicates, mstinst.InstBanner2NEQ(*i.InstBanner2NEQ))
	}
	if len(i.InstBanner2In) > 0 {
		predicates = append(predicates, mstinst.InstBanner2In(i.InstBanner2In...))
	}
	if len(i.InstBanner2NotIn) > 0 {
		predicates = append(predicates, mstinst.InstBanner2NotIn(i.InstBanner2NotIn...))
	}
	if i.InstBanner2GT != nil {
		predicates = append(predicates, mstinst.InstBanner2GT(*i.InstBanner2GT))
	}
	if i.InstBanner2GTE != nil {
		predicates = append(predicates, mstinst.InstBanner2GTE(*i.InstBanner2GTE))
	}
	if i.InstBanner2LT != nil {
		predicates = append(predicates, mstinst.InstBanner2LT(*i.InstBanner2LT))
	}
	if i.InstBanner2LTE != nil {
		predicates = append(predicates, mstinst.InstBanner2LTE(*i.InstBanner2LTE))
	}
	if i.InstBanner2Contains != nil {
		predicates = append(predicates, mstinst.InstBanner2Contains(*i.InstBanner2Contains))
	}
	if i.InstBanner2HasPrefix != nil {
		predicates = append(predicates, mstinst.InstBanner2HasPrefix(*i.InstBanner2HasPrefix))
	}
	if i.InstBanner2HasSuffix != nil {
		predicates = append(predicates, mstinst.InstBanner2HasSuffix(*i.InstBanner2HasSuffix))
	}
	if i.InstBanner2EqualFold != nil {
		predicates = append(predicates, mstinst.InstBanner2EqualFold(*i.InstBanner2EqualFold))
	}
	if i.InstBanner2ContainsFold != nil {
		predicates = append(predicates, mstinst.InstBanner2ContainsFold(*i.InstBanner2ContainsFold))
	}
	if i.InstLogoURL != nil {
		predicates = append(predicates, mstinst.InstLogoURLEQ(*i.InstLogoURL))
	}
	if i.InstLogoURLNEQ != nil {
		predicates = append(predicates, mstinst.InstLogoURLNEQ(*i.InstLogoURLNEQ))
	}
	if len(i.InstLogoURLIn) > 0 {
		predicates = append(predicates, mstinst.InstLogoURLIn(i.InstLogoURLIn...))
	}
	if len(i.InstLogoURLNotIn) > 0 {
		predicates = append(predicates, mstinst.InstLogoURLNotIn(i.InstLogoURLNotIn...))
	}
	if i.InstLogoURLGT != nil {
		predicates = append(predicates, mstinst.InstLogoURLGT(*i.InstLogoURLGT))
	}
	if i.InstLogoURLGTE != nil {
		predicates = append(predicates, mstinst.InstLogoURLGTE(*i.InstLogoURLGTE))
	}
	if i.InstLogoURLLT != nil {
		predicates = append(predicates, mstinst.InstLogoURLLT(*i.InstLogoURLLT))
	}
	if i.InstLogoURLLTE != nil {
		predicates = append(predicates, mstinst.InstLogoURLLTE(*i.InstLogoURLLTE))
	}
	if i.InstLogoURLContains != nil {
		predicates = append(predicates, mstinst.InstLogoURLContains(*i.InstLogoURLContains))
	}
	if i.InstLogoURLHasPrefix != nil {
		predicates = append(predicates, mstinst.InstLogoURLHasPrefix(*i.InstLogoURLHasPrefix))
	}
	if i.InstLogoURLHasSuffix != nil {
		predicates = append(predicates, mstinst.InstLogoURLHasSuffix(*i.InstLogoURLHasSuffix))
	}
	if i.InstLogoURLEqualFold != nil {
		predicates = append(predicates, mstinst.InstLogoURLEqualFold(*i.InstLogoURLEqualFold))
	}
	if i.InstLogoURLContainsFold != nil {
		predicates = append(predicates, mstinst.InstLogoURLContainsFold(*i.InstLogoURLContainsFold))
	}
	if i.InstIsActive != nil {
		predicates = append(predicates, mstinst.InstIsActiveEQ(*i.InstIsActive))
	}
	if i.InstIsActiveNEQ != nil {
		predicates = append(predicates, mstinst.InstIsActiveNEQ(*i.InstIsActiveNEQ))
	}
	if len(i.InstIsActiveIn) > 0 {
		predicates = append(predicates, mstinst.InstIsActiveIn(i.InstIsActiveIn...))
	}
	if len(i.InstIsActiveNotIn) > 0 {
		predicates = append(predicates, mstinst.InstIsActiveNotIn(i.InstIsActiveNotIn...))
	}
	if i.InstStatus != nil {
		predicates = append(predicates, mstinst.InstStatusEQ(*i.InstStatus))
	}
	if i.InstStatusNEQ != nil {
		predicates = append(predicates, mstinst.InstStatusNEQ(*i.InstStatusNEQ))
	}
	if len(i.InstStatusIn) > 0 {
		predicates = append(predicates, mstinst.InstStatusIn(i.InstStatusIn...))
	}
	if len(i.InstStatusNotIn) > 0 {
		predicates = append(predicates, mstinst.InstStatusNotIn(i.InstStatusNotIn...))
	}
	if i.InstStatusGT != nil {
		predicates = append(predicates, mstinst.InstStatusGT(*i.InstStatusGT))
	}
	if i.InstStatusGTE != nil {
		predicates = append(predicates, mstinst.InstStatusGTE(*i.InstStatusGTE))
	}
	if i.InstStatusLT != nil {
		predicates = append(predicates, mstinst.InstStatusLT(*i.InstStatusLT))
	}
	if i.InstStatusLTE != nil {
		predicates = append(predicates, mstinst.InstStatusLTE(*i.InstStatusLTE))
	}
	if i.InstStatusContains != nil {
		predicates = append(predicates, mstinst.InstStatusContains(*i.InstStatusContains))
	}
	if i.InstStatusHasPrefix != nil {
		predicates = append(predicates, mstinst.InstStatusHasPrefix(*i.InstStatusHasPrefix))
	}
	if i.InstStatusHasSuffix != nil {
		predicates = append(predicates, mstinst.InstStatusHasSuffix(*i.InstStatusHasSuffix))
	}
	if i.InstStatusEqualFold != nil {
		predicates = append(predicates, mstinst.InstStatusEqualFold(*i.InstStatusEqualFold))
	}
	if i.InstStatusContainsFold != nil {
		predicates = append(predicates, mstinst.InstStatusContainsFold(*i.InstStatusContainsFold))
	}
	if i.InstTimeZone != nil {
		predicates = append(predicates, mstinst.InstTimeZoneEQ(*i.InstTimeZone))
	}
	if i.InstTimeZoneNEQ != nil {
		predicates = append(predicates, mstinst.InstTimeZoneNEQ(*i.InstTimeZoneNEQ))
	}
	if len(i.InstTimeZoneIn) > 0 {
		predicates = append(predicates, mstinst.InstTimeZoneIn(i.InstTimeZoneIn...))
	}
	if len(i.InstTimeZoneNotIn) > 0 {
		predicates = append(predicates, mstinst.InstTimeZoneNotIn(i.InstTimeZoneNotIn...))
	}
	if i.InstTimeZoneGT != nil {
		predicates = append(predicates, mstinst.InstTimeZoneGT(*i.InstTimeZoneGT))
	}
	if i.InstTimeZoneGTE != nil {
		predicates = append(predicates, mstinst.InstTimeZoneGTE(*i.InstTimeZoneGTE))
	}
	if i.InstTimeZoneLT != nil {
		predicates = append(predicates, mstinst.InstTimeZoneLT(*i.InstTimeZoneLT))
	}
	if i.InstTimeZoneLTE != nil {
		predicates = append(predicates, mstinst.InstTimeZoneLTE(*i.InstTimeZoneLTE))
	}
	if i.CustomerID != nil {
		predicates = append(predicates, mstinst.CustomerIDEQ(*i.CustomerID))
	}
	if i.CustomerIDNEQ != nil {
		predicates = append(predicates, mstinst.CustomerIDNEQ(*i.CustomerIDNEQ))
	}
	if len(i.CustomerIDIn) > 0 {
		predicates = append(predicates, mstinst.CustomerIDIn(i.CustomerIDIn...))
	}
	if len(i.CustomerIDNotIn) > 0 {
		predicates = append(predicates, mstinst.CustomerIDNotIn(i.CustomerIDNotIn...))
	}

	if i.HasInstfromCust != nil {
		p := mstinst.HasInstfromCust()
		if !*i.HasInstfromCust {
			p = mstinst.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasInstfromCustWith) > 0 {
		with := make([]predicate.MstCustomer, 0, len(i.HasInstfromCustWith))
		for _, w := range i.HasInstfromCustWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, mstinst.HasInstfromCustWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("myeduate/ent: empty predicate MstInstWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return mstinst.And(predicates...), nil
	}
}

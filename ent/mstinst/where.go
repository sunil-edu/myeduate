// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package mstinst

import (
	"myeduate/ent/customtypes"
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// InstCode applies equality check predicate on the "inst_code" field. It's identical to InstCodeEQ.
func InstCode(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstCode), v))
	})
}

// InstName applies equality check predicate on the "inst_name" field. It's identical to InstNameEQ.
func InstName(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstName), v))
	})
}

// InstShortName applies equality check predicate on the "inst_short_name" field. It's identical to InstShortNameEQ.
func InstShortName(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstShortName), v))
	})
}

// InstAddress applies equality check predicate on the "inst_address" field. It's identical to InstAddressEQ.
func InstAddress(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstAddress), v))
	})
}

// InstPlace applies equality check predicate on the "inst_place" field. It's identical to InstPlaceEQ.
func InstPlace(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstPlace), v))
	})
}

// InstState applies equality check predicate on the "inst_state" field. It's identical to InstStateEQ.
func InstState(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstState), v))
	})
}

// InstPin applies equality check predicate on the "inst_pin" field. It's identical to InstPinEQ.
func InstPin(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstPin), v))
	})
}

// InstContactPerson applies equality check predicate on the "inst_contact_person" field. It's identical to InstContactPersonEQ.
func InstContactPerson(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstContactPerson), v))
	})
}

// InstPhone applies equality check predicate on the "inst_phone" field. It's identical to InstPhoneEQ.
func InstPhone(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstPhone), v))
	})
}

// InstEmail applies equality check predicate on the "inst_email" field. It's identical to InstEmailEQ.
func InstEmail(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstEmail), v))
	})
}

// InstMobile applies equality check predicate on the "inst_mobile" field. It's identical to InstMobileEQ.
func InstMobile(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstMobile), v))
	})
}

// InstURL applies equality check predicate on the "inst_url" field. It's identical to InstURLEQ.
func InstURL(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstURL), v))
	})
}

// InstBanner1 applies equality check predicate on the "inst_banner_1" field. It's identical to InstBanner1EQ.
func InstBanner1(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstBanner1), v))
	})
}

// InstBanner2 applies equality check predicate on the "inst_banner_2" field. It's identical to InstBanner2EQ.
func InstBanner2(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstBanner2), v))
	})
}

// InstLogoURL applies equality check predicate on the "inst_logo_url" field. It's identical to InstLogoURLEQ.
func InstLogoURL(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstLogoURL), v))
	})
}

// InstStatus applies equality check predicate on the "inst_status" field. It's identical to InstStatusEQ.
func InstStatus(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstStatus), v))
	})
}

// InstTimeZone applies equality check predicate on the "inst_time_zone" field. It's identical to InstTimeZoneEQ.
func InstTimeZone(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstTimeZone), v))
	})
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// InstCodeEQ applies the EQ predicate on the "inst_code" field.
func InstCodeEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstCode), v))
	})
}

// InstCodeNEQ applies the NEQ predicate on the "inst_code" field.
func InstCodeNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstCode), v))
	})
}

// InstCodeIn applies the In predicate on the "inst_code" field.
func InstCodeIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstCode), v...))
	})
}

// InstCodeNotIn applies the NotIn predicate on the "inst_code" field.
func InstCodeNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstCode), v...))
	})
}

// InstCodeGT applies the GT predicate on the "inst_code" field.
func InstCodeGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstCode), v))
	})
}

// InstCodeGTE applies the GTE predicate on the "inst_code" field.
func InstCodeGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstCode), v))
	})
}

// InstCodeLT applies the LT predicate on the "inst_code" field.
func InstCodeLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstCode), v))
	})
}

// InstCodeLTE applies the LTE predicate on the "inst_code" field.
func InstCodeLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstCode), v))
	})
}

// InstCodeContains applies the Contains predicate on the "inst_code" field.
func InstCodeContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstCode), v))
	})
}

// InstCodeHasPrefix applies the HasPrefix predicate on the "inst_code" field.
func InstCodeHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstCode), v))
	})
}

// InstCodeHasSuffix applies the HasSuffix predicate on the "inst_code" field.
func InstCodeHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstCode), v))
	})
}

// InstCodeEqualFold applies the EqualFold predicate on the "inst_code" field.
func InstCodeEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstCode), v))
	})
}

// InstCodeContainsFold applies the ContainsFold predicate on the "inst_code" field.
func InstCodeContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstCode), v))
	})
}

// InstNameEQ applies the EQ predicate on the "inst_name" field.
func InstNameEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstName), v))
	})
}

// InstNameNEQ applies the NEQ predicate on the "inst_name" field.
func InstNameNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstName), v))
	})
}

// InstNameIn applies the In predicate on the "inst_name" field.
func InstNameIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstName), v...))
	})
}

// InstNameNotIn applies the NotIn predicate on the "inst_name" field.
func InstNameNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstName), v...))
	})
}

// InstNameGT applies the GT predicate on the "inst_name" field.
func InstNameGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstName), v))
	})
}

// InstNameGTE applies the GTE predicate on the "inst_name" field.
func InstNameGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstName), v))
	})
}

// InstNameLT applies the LT predicate on the "inst_name" field.
func InstNameLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstName), v))
	})
}

// InstNameLTE applies the LTE predicate on the "inst_name" field.
func InstNameLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstName), v))
	})
}

// InstNameContains applies the Contains predicate on the "inst_name" field.
func InstNameContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstName), v))
	})
}

// InstNameHasPrefix applies the HasPrefix predicate on the "inst_name" field.
func InstNameHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstName), v))
	})
}

// InstNameHasSuffix applies the HasSuffix predicate on the "inst_name" field.
func InstNameHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstName), v))
	})
}

// InstNameEqualFold applies the EqualFold predicate on the "inst_name" field.
func InstNameEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstName), v))
	})
}

// InstNameContainsFold applies the ContainsFold predicate on the "inst_name" field.
func InstNameContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstName), v))
	})
}

// InstShortNameEQ applies the EQ predicate on the "inst_short_name" field.
func InstShortNameEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstShortName), v))
	})
}

// InstShortNameNEQ applies the NEQ predicate on the "inst_short_name" field.
func InstShortNameNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstShortName), v))
	})
}

// InstShortNameIn applies the In predicate on the "inst_short_name" field.
func InstShortNameIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstShortName), v...))
	})
}

// InstShortNameNotIn applies the NotIn predicate on the "inst_short_name" field.
func InstShortNameNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstShortName), v...))
	})
}

// InstShortNameGT applies the GT predicate on the "inst_short_name" field.
func InstShortNameGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstShortName), v))
	})
}

// InstShortNameGTE applies the GTE predicate on the "inst_short_name" field.
func InstShortNameGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstShortName), v))
	})
}

// InstShortNameLT applies the LT predicate on the "inst_short_name" field.
func InstShortNameLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstShortName), v))
	})
}

// InstShortNameLTE applies the LTE predicate on the "inst_short_name" field.
func InstShortNameLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstShortName), v))
	})
}

// InstShortNameContains applies the Contains predicate on the "inst_short_name" field.
func InstShortNameContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstShortName), v))
	})
}

// InstShortNameHasPrefix applies the HasPrefix predicate on the "inst_short_name" field.
func InstShortNameHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstShortName), v))
	})
}

// InstShortNameHasSuffix applies the HasSuffix predicate on the "inst_short_name" field.
func InstShortNameHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstShortName), v))
	})
}

// InstShortNameEqualFold applies the EqualFold predicate on the "inst_short_name" field.
func InstShortNameEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstShortName), v))
	})
}

// InstShortNameContainsFold applies the ContainsFold predicate on the "inst_short_name" field.
func InstShortNameContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstShortName), v))
	})
}

// InstAddressEQ applies the EQ predicate on the "inst_address" field.
func InstAddressEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstAddress), v))
	})
}

// InstAddressNEQ applies the NEQ predicate on the "inst_address" field.
func InstAddressNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstAddress), v))
	})
}

// InstAddressIn applies the In predicate on the "inst_address" field.
func InstAddressIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstAddress), v...))
	})
}

// InstAddressNotIn applies the NotIn predicate on the "inst_address" field.
func InstAddressNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstAddress), v...))
	})
}

// InstAddressGT applies the GT predicate on the "inst_address" field.
func InstAddressGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstAddress), v))
	})
}

// InstAddressGTE applies the GTE predicate on the "inst_address" field.
func InstAddressGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstAddress), v))
	})
}

// InstAddressLT applies the LT predicate on the "inst_address" field.
func InstAddressLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstAddress), v))
	})
}

// InstAddressLTE applies the LTE predicate on the "inst_address" field.
func InstAddressLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstAddress), v))
	})
}

// InstAddressContains applies the Contains predicate on the "inst_address" field.
func InstAddressContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstAddress), v))
	})
}

// InstAddressHasPrefix applies the HasPrefix predicate on the "inst_address" field.
func InstAddressHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstAddress), v))
	})
}

// InstAddressHasSuffix applies the HasSuffix predicate on the "inst_address" field.
func InstAddressHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstAddress), v))
	})
}

// InstAddressEqualFold applies the EqualFold predicate on the "inst_address" field.
func InstAddressEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstAddress), v))
	})
}

// InstAddressContainsFold applies the ContainsFold predicate on the "inst_address" field.
func InstAddressContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstAddress), v))
	})
}

// InstPlaceEQ applies the EQ predicate on the "inst_place" field.
func InstPlaceEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstPlace), v))
	})
}

// InstPlaceNEQ applies the NEQ predicate on the "inst_place" field.
func InstPlaceNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstPlace), v))
	})
}

// InstPlaceIn applies the In predicate on the "inst_place" field.
func InstPlaceIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstPlace), v...))
	})
}

// InstPlaceNotIn applies the NotIn predicate on the "inst_place" field.
func InstPlaceNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstPlace), v...))
	})
}

// InstPlaceGT applies the GT predicate on the "inst_place" field.
func InstPlaceGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstPlace), v))
	})
}

// InstPlaceGTE applies the GTE predicate on the "inst_place" field.
func InstPlaceGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstPlace), v))
	})
}

// InstPlaceLT applies the LT predicate on the "inst_place" field.
func InstPlaceLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstPlace), v))
	})
}

// InstPlaceLTE applies the LTE predicate on the "inst_place" field.
func InstPlaceLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstPlace), v))
	})
}

// InstPlaceContains applies the Contains predicate on the "inst_place" field.
func InstPlaceContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstPlace), v))
	})
}

// InstPlaceHasPrefix applies the HasPrefix predicate on the "inst_place" field.
func InstPlaceHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstPlace), v))
	})
}

// InstPlaceHasSuffix applies the HasSuffix predicate on the "inst_place" field.
func InstPlaceHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstPlace), v))
	})
}

// InstPlaceEqualFold applies the EqualFold predicate on the "inst_place" field.
func InstPlaceEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstPlace), v))
	})
}

// InstPlaceContainsFold applies the ContainsFold predicate on the "inst_place" field.
func InstPlaceContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstPlace), v))
	})
}

// InstStateEQ applies the EQ predicate on the "inst_state" field.
func InstStateEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstState), v))
	})
}

// InstStateNEQ applies the NEQ predicate on the "inst_state" field.
func InstStateNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstState), v))
	})
}

// InstStateIn applies the In predicate on the "inst_state" field.
func InstStateIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstState), v...))
	})
}

// InstStateNotIn applies the NotIn predicate on the "inst_state" field.
func InstStateNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstState), v...))
	})
}

// InstStateGT applies the GT predicate on the "inst_state" field.
func InstStateGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstState), v))
	})
}

// InstStateGTE applies the GTE predicate on the "inst_state" field.
func InstStateGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstState), v))
	})
}

// InstStateLT applies the LT predicate on the "inst_state" field.
func InstStateLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstState), v))
	})
}

// InstStateLTE applies the LTE predicate on the "inst_state" field.
func InstStateLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstState), v))
	})
}

// InstStateContains applies the Contains predicate on the "inst_state" field.
func InstStateContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstState), v))
	})
}

// InstStateHasPrefix applies the HasPrefix predicate on the "inst_state" field.
func InstStateHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstState), v))
	})
}

// InstStateHasSuffix applies the HasSuffix predicate on the "inst_state" field.
func InstStateHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstState), v))
	})
}

// InstStateEqualFold applies the EqualFold predicate on the "inst_state" field.
func InstStateEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstState), v))
	})
}

// InstStateContainsFold applies the ContainsFold predicate on the "inst_state" field.
func InstStateContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstState), v))
	})
}

// InstPinEQ applies the EQ predicate on the "inst_pin" field.
func InstPinEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstPin), v))
	})
}

// InstPinNEQ applies the NEQ predicate on the "inst_pin" field.
func InstPinNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstPin), v))
	})
}

// InstPinIn applies the In predicate on the "inst_pin" field.
func InstPinIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstPin), v...))
	})
}

// InstPinNotIn applies the NotIn predicate on the "inst_pin" field.
func InstPinNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstPin), v...))
	})
}

// InstPinGT applies the GT predicate on the "inst_pin" field.
func InstPinGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstPin), v))
	})
}

// InstPinGTE applies the GTE predicate on the "inst_pin" field.
func InstPinGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstPin), v))
	})
}

// InstPinLT applies the LT predicate on the "inst_pin" field.
func InstPinLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstPin), v))
	})
}

// InstPinLTE applies the LTE predicate on the "inst_pin" field.
func InstPinLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstPin), v))
	})
}

// InstPinContains applies the Contains predicate on the "inst_pin" field.
func InstPinContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstPin), v))
	})
}

// InstPinHasPrefix applies the HasPrefix predicate on the "inst_pin" field.
func InstPinHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstPin), v))
	})
}

// InstPinHasSuffix applies the HasSuffix predicate on the "inst_pin" field.
func InstPinHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstPin), v))
	})
}

// InstPinEqualFold applies the EqualFold predicate on the "inst_pin" field.
func InstPinEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstPin), v))
	})
}

// InstPinContainsFold applies the ContainsFold predicate on the "inst_pin" field.
func InstPinContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstPin), v))
	})
}

// InstContactPersonEQ applies the EQ predicate on the "inst_contact_person" field.
func InstContactPersonEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonNEQ applies the NEQ predicate on the "inst_contact_person" field.
func InstContactPersonNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonIn applies the In predicate on the "inst_contact_person" field.
func InstContactPersonIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstContactPerson), v...))
	})
}

// InstContactPersonNotIn applies the NotIn predicate on the "inst_contact_person" field.
func InstContactPersonNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstContactPerson), v...))
	})
}

// InstContactPersonGT applies the GT predicate on the "inst_contact_person" field.
func InstContactPersonGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonGTE applies the GTE predicate on the "inst_contact_person" field.
func InstContactPersonGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonLT applies the LT predicate on the "inst_contact_person" field.
func InstContactPersonLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonLTE applies the LTE predicate on the "inst_contact_person" field.
func InstContactPersonLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonContains applies the Contains predicate on the "inst_contact_person" field.
func InstContactPersonContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonHasPrefix applies the HasPrefix predicate on the "inst_contact_person" field.
func InstContactPersonHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonHasSuffix applies the HasSuffix predicate on the "inst_contact_person" field.
func InstContactPersonHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonEqualFold applies the EqualFold predicate on the "inst_contact_person" field.
func InstContactPersonEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstContactPerson), v))
	})
}

// InstContactPersonContainsFold applies the ContainsFold predicate on the "inst_contact_person" field.
func InstContactPersonContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstContactPerson), v))
	})
}

// InstPhoneEQ applies the EQ predicate on the "inst_phone" field.
func InstPhoneEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstPhone), v))
	})
}

// InstPhoneNEQ applies the NEQ predicate on the "inst_phone" field.
func InstPhoneNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstPhone), v))
	})
}

// InstPhoneIn applies the In predicate on the "inst_phone" field.
func InstPhoneIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstPhone), v...))
	})
}

// InstPhoneNotIn applies the NotIn predicate on the "inst_phone" field.
func InstPhoneNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstPhone), v...))
	})
}

// InstPhoneGT applies the GT predicate on the "inst_phone" field.
func InstPhoneGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstPhone), v))
	})
}

// InstPhoneGTE applies the GTE predicate on the "inst_phone" field.
func InstPhoneGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstPhone), v))
	})
}

// InstPhoneLT applies the LT predicate on the "inst_phone" field.
func InstPhoneLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstPhone), v))
	})
}

// InstPhoneLTE applies the LTE predicate on the "inst_phone" field.
func InstPhoneLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstPhone), v))
	})
}

// InstPhoneContains applies the Contains predicate on the "inst_phone" field.
func InstPhoneContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstPhone), v))
	})
}

// InstPhoneHasPrefix applies the HasPrefix predicate on the "inst_phone" field.
func InstPhoneHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstPhone), v))
	})
}

// InstPhoneHasSuffix applies the HasSuffix predicate on the "inst_phone" field.
func InstPhoneHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstPhone), v))
	})
}

// InstPhoneEqualFold applies the EqualFold predicate on the "inst_phone" field.
func InstPhoneEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstPhone), v))
	})
}

// InstPhoneContainsFold applies the ContainsFold predicate on the "inst_phone" field.
func InstPhoneContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstPhone), v))
	})
}

// InstEmailEQ applies the EQ predicate on the "inst_email" field.
func InstEmailEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstEmail), v))
	})
}

// InstEmailNEQ applies the NEQ predicate on the "inst_email" field.
func InstEmailNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstEmail), v))
	})
}

// InstEmailIn applies the In predicate on the "inst_email" field.
func InstEmailIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstEmail), v...))
	})
}

// InstEmailNotIn applies the NotIn predicate on the "inst_email" field.
func InstEmailNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstEmail), v...))
	})
}

// InstEmailGT applies the GT predicate on the "inst_email" field.
func InstEmailGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstEmail), v))
	})
}

// InstEmailGTE applies the GTE predicate on the "inst_email" field.
func InstEmailGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstEmail), v))
	})
}

// InstEmailLT applies the LT predicate on the "inst_email" field.
func InstEmailLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstEmail), v))
	})
}

// InstEmailLTE applies the LTE predicate on the "inst_email" field.
func InstEmailLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstEmail), v))
	})
}

// InstEmailContains applies the Contains predicate on the "inst_email" field.
func InstEmailContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstEmail), v))
	})
}

// InstEmailHasPrefix applies the HasPrefix predicate on the "inst_email" field.
func InstEmailHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstEmail), v))
	})
}

// InstEmailHasSuffix applies the HasSuffix predicate on the "inst_email" field.
func InstEmailHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstEmail), v))
	})
}

// InstEmailEqualFold applies the EqualFold predicate on the "inst_email" field.
func InstEmailEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstEmail), v))
	})
}

// InstEmailContainsFold applies the ContainsFold predicate on the "inst_email" field.
func InstEmailContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstEmail), v))
	})
}

// InstMobileEQ applies the EQ predicate on the "inst_mobile" field.
func InstMobileEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstMobile), v))
	})
}

// InstMobileNEQ applies the NEQ predicate on the "inst_mobile" field.
func InstMobileNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstMobile), v))
	})
}

// InstMobileIn applies the In predicate on the "inst_mobile" field.
func InstMobileIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstMobile), v...))
	})
}

// InstMobileNotIn applies the NotIn predicate on the "inst_mobile" field.
func InstMobileNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstMobile), v...))
	})
}

// InstMobileGT applies the GT predicate on the "inst_mobile" field.
func InstMobileGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstMobile), v))
	})
}

// InstMobileGTE applies the GTE predicate on the "inst_mobile" field.
func InstMobileGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstMobile), v))
	})
}

// InstMobileLT applies the LT predicate on the "inst_mobile" field.
func InstMobileLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstMobile), v))
	})
}

// InstMobileLTE applies the LTE predicate on the "inst_mobile" field.
func InstMobileLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstMobile), v))
	})
}

// InstMobileContains applies the Contains predicate on the "inst_mobile" field.
func InstMobileContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstMobile), v))
	})
}

// InstMobileHasPrefix applies the HasPrefix predicate on the "inst_mobile" field.
func InstMobileHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstMobile), v))
	})
}

// InstMobileHasSuffix applies the HasSuffix predicate on the "inst_mobile" field.
func InstMobileHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstMobile), v))
	})
}

// InstMobileEqualFold applies the EqualFold predicate on the "inst_mobile" field.
func InstMobileEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstMobile), v))
	})
}

// InstMobileContainsFold applies the ContainsFold predicate on the "inst_mobile" field.
func InstMobileContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstMobile), v))
	})
}

// InstURLEQ applies the EQ predicate on the "inst_url" field.
func InstURLEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstURL), v))
	})
}

// InstURLNEQ applies the NEQ predicate on the "inst_url" field.
func InstURLNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstURL), v))
	})
}

// InstURLIn applies the In predicate on the "inst_url" field.
func InstURLIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstURL), v...))
	})
}

// InstURLNotIn applies the NotIn predicate on the "inst_url" field.
func InstURLNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstURL), v...))
	})
}

// InstURLGT applies the GT predicate on the "inst_url" field.
func InstURLGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstURL), v))
	})
}

// InstURLGTE applies the GTE predicate on the "inst_url" field.
func InstURLGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstURL), v))
	})
}

// InstURLLT applies the LT predicate on the "inst_url" field.
func InstURLLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstURL), v))
	})
}

// InstURLLTE applies the LTE predicate on the "inst_url" field.
func InstURLLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstURL), v))
	})
}

// InstURLContains applies the Contains predicate on the "inst_url" field.
func InstURLContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstURL), v))
	})
}

// InstURLHasPrefix applies the HasPrefix predicate on the "inst_url" field.
func InstURLHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstURL), v))
	})
}

// InstURLHasSuffix applies the HasSuffix predicate on the "inst_url" field.
func InstURLHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstURL), v))
	})
}

// InstURLEqualFold applies the EqualFold predicate on the "inst_url" field.
func InstURLEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstURL), v))
	})
}

// InstURLContainsFold applies the ContainsFold predicate on the "inst_url" field.
func InstURLContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstURL), v))
	})
}

// InstBanner1EQ applies the EQ predicate on the "inst_banner_1" field.
func InstBanner1EQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1NEQ applies the NEQ predicate on the "inst_banner_1" field.
func InstBanner1NEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1In applies the In predicate on the "inst_banner_1" field.
func InstBanner1In(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstBanner1), v...))
	})
}

// InstBanner1NotIn applies the NotIn predicate on the "inst_banner_1" field.
func InstBanner1NotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstBanner1), v...))
	})
}

// InstBanner1GT applies the GT predicate on the "inst_banner_1" field.
func InstBanner1GT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1GTE applies the GTE predicate on the "inst_banner_1" field.
func InstBanner1GTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1LT applies the LT predicate on the "inst_banner_1" field.
func InstBanner1LT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1LTE applies the LTE predicate on the "inst_banner_1" field.
func InstBanner1LTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1Contains applies the Contains predicate on the "inst_banner_1" field.
func InstBanner1Contains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1HasPrefix applies the HasPrefix predicate on the "inst_banner_1" field.
func InstBanner1HasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1HasSuffix applies the HasSuffix predicate on the "inst_banner_1" field.
func InstBanner1HasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1EqualFold applies the EqualFold predicate on the "inst_banner_1" field.
func InstBanner1EqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstBanner1), v))
	})
}

// InstBanner1ContainsFold applies the ContainsFold predicate on the "inst_banner_1" field.
func InstBanner1ContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstBanner1), v))
	})
}

// InstBanner2EQ applies the EQ predicate on the "inst_banner_2" field.
func InstBanner2EQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2NEQ applies the NEQ predicate on the "inst_banner_2" field.
func InstBanner2NEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2In applies the In predicate on the "inst_banner_2" field.
func InstBanner2In(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstBanner2), v...))
	})
}

// InstBanner2NotIn applies the NotIn predicate on the "inst_banner_2" field.
func InstBanner2NotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstBanner2), v...))
	})
}

// InstBanner2GT applies the GT predicate on the "inst_banner_2" field.
func InstBanner2GT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2GTE applies the GTE predicate on the "inst_banner_2" field.
func InstBanner2GTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2LT applies the LT predicate on the "inst_banner_2" field.
func InstBanner2LT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2LTE applies the LTE predicate on the "inst_banner_2" field.
func InstBanner2LTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2Contains applies the Contains predicate on the "inst_banner_2" field.
func InstBanner2Contains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2HasPrefix applies the HasPrefix predicate on the "inst_banner_2" field.
func InstBanner2HasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2HasSuffix applies the HasSuffix predicate on the "inst_banner_2" field.
func InstBanner2HasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2EqualFold applies the EqualFold predicate on the "inst_banner_2" field.
func InstBanner2EqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstBanner2), v))
	})
}

// InstBanner2ContainsFold applies the ContainsFold predicate on the "inst_banner_2" field.
func InstBanner2ContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstBanner2), v))
	})
}

// InstLogoURLEQ applies the EQ predicate on the "inst_logo_url" field.
func InstLogoURLEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLNEQ applies the NEQ predicate on the "inst_logo_url" field.
func InstLogoURLNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLIn applies the In predicate on the "inst_logo_url" field.
func InstLogoURLIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstLogoURL), v...))
	})
}

// InstLogoURLNotIn applies the NotIn predicate on the "inst_logo_url" field.
func InstLogoURLNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstLogoURL), v...))
	})
}

// InstLogoURLGT applies the GT predicate on the "inst_logo_url" field.
func InstLogoURLGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLGTE applies the GTE predicate on the "inst_logo_url" field.
func InstLogoURLGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLLT applies the LT predicate on the "inst_logo_url" field.
func InstLogoURLLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLLTE applies the LTE predicate on the "inst_logo_url" field.
func InstLogoURLLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLContains applies the Contains predicate on the "inst_logo_url" field.
func InstLogoURLContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLHasPrefix applies the HasPrefix predicate on the "inst_logo_url" field.
func InstLogoURLHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLHasSuffix applies the HasSuffix predicate on the "inst_logo_url" field.
func InstLogoURLHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLEqualFold applies the EqualFold predicate on the "inst_logo_url" field.
func InstLogoURLEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstLogoURL), v))
	})
}

// InstLogoURLContainsFold applies the ContainsFold predicate on the "inst_logo_url" field.
func InstLogoURLContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstLogoURL), v))
	})
}

// InstIsActiveEQ applies the EQ predicate on the "inst_is_active" field.
func InstIsActiveEQ(v customtypes.IsActive) predicate.MstInst {
	vc := v
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstIsActive), vc))
	})
}

// InstIsActiveNEQ applies the NEQ predicate on the "inst_is_active" field.
func InstIsActiveNEQ(v customtypes.IsActive) predicate.MstInst {
	vc := v
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstIsActive), vc))
	})
}

// InstIsActiveIn applies the In predicate on the "inst_is_active" field.
func InstIsActiveIn(vs ...customtypes.IsActive) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstIsActive), v...))
	})
}

// InstIsActiveNotIn applies the NotIn predicate on the "inst_is_active" field.
func InstIsActiveNotIn(vs ...customtypes.IsActive) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstIsActive), v...))
	})
}

// InstStatusEQ applies the EQ predicate on the "inst_status" field.
func InstStatusEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstStatus), v))
	})
}

// InstStatusNEQ applies the NEQ predicate on the "inst_status" field.
func InstStatusNEQ(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstStatus), v))
	})
}

// InstStatusIn applies the In predicate on the "inst_status" field.
func InstStatusIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstStatus), v...))
	})
}

// InstStatusNotIn applies the NotIn predicate on the "inst_status" field.
func InstStatusNotIn(vs ...string) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstStatus), v...))
	})
}

// InstStatusGT applies the GT predicate on the "inst_status" field.
func InstStatusGT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstStatus), v))
	})
}

// InstStatusGTE applies the GTE predicate on the "inst_status" field.
func InstStatusGTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstStatus), v))
	})
}

// InstStatusLT applies the LT predicate on the "inst_status" field.
func InstStatusLT(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstStatus), v))
	})
}

// InstStatusLTE applies the LTE predicate on the "inst_status" field.
func InstStatusLTE(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstStatus), v))
	})
}

// InstStatusContains applies the Contains predicate on the "inst_status" field.
func InstStatusContains(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstStatus), v))
	})
}

// InstStatusHasPrefix applies the HasPrefix predicate on the "inst_status" field.
func InstStatusHasPrefix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstStatus), v))
	})
}

// InstStatusHasSuffix applies the HasSuffix predicate on the "inst_status" field.
func InstStatusHasSuffix(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstStatus), v))
	})
}

// InstStatusEqualFold applies the EqualFold predicate on the "inst_status" field.
func InstStatusEqualFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstStatus), v))
	})
}

// InstStatusContainsFold applies the ContainsFold predicate on the "inst_status" field.
func InstStatusContainsFold(v string) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstStatus), v))
	})
}

// InstTimeZoneEQ applies the EQ predicate on the "inst_time_zone" field.
func InstTimeZoneEQ(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstTimeZone), v))
	})
}

// InstTimeZoneNEQ applies the NEQ predicate on the "inst_time_zone" field.
func InstTimeZoneNEQ(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstTimeZone), v))
	})
}

// InstTimeZoneIn applies the In predicate on the "inst_time_zone" field.
func InstTimeZoneIn(vs ...time.Time) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstTimeZone), v...))
	})
}

// InstTimeZoneNotIn applies the NotIn predicate on the "inst_time_zone" field.
func InstTimeZoneNotIn(vs ...time.Time) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstTimeZone), v...))
	})
}

// InstTimeZoneGT applies the GT predicate on the "inst_time_zone" field.
func InstTimeZoneGT(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstTimeZone), v))
	})
}

// InstTimeZoneGTE applies the GTE predicate on the "inst_time_zone" field.
func InstTimeZoneGTE(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstTimeZone), v))
	})
}

// InstTimeZoneLT applies the LT predicate on the "inst_time_zone" field.
func InstTimeZoneLT(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstTimeZone), v))
	})
}

// InstTimeZoneLTE applies the LTE predicate on the "inst_time_zone" field.
func InstTimeZoneLTE(v time.Time) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstTimeZone), v))
	})
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v uuid.UUID) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...uuid.UUID) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustomerID), v...))
	})
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...uuid.UUID) predicate.MstInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstInst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustomerID), v...))
	})
}

// HasInstfromCust applies the HasEdge predicate on the "InstfromCust" edge.
func HasInstfromCust() predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstfromCustTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InstfromCustTable, InstfromCustColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstfromCustWith applies the HasEdge predicate on the "InstfromCust" edge with a given conditions (other predicates).
func HasInstfromCustWith(preds ...predicate.MstCustomer) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstfromCustInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InstfromCustTable, InstfromCustColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MstInst) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MstInst) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MstInst) predicate.MstInst {
	return predicate.MstInst(func(s *sql.Selector) {
		p(s.Not())
	})
}

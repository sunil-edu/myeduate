// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/customtypes"
	"myeduate/ent/mstcustomer"
	"myeduate/ent/mstinst"
	"myeduate/ent/predicate"
	"sync"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMstCustomer = "MstCustomer"
	TypeMstInst     = "MstInst"
)

// MstCustomerMutation represents an operation that mutates the MstCustomer nodes in the graph.
type MstCustomerMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	created_at          *time.Time
	updated_at          *time.Time
	cust_code           *string
	cust_name           *string
	cust_address        *string
	cust_place          *string
	cust_state          *string
	cust_pin            *string
	cust_contact_person *string
	cust_phone          *string
	cust_email          *string
	cust_mobile         *string
	cust_url            *string
	cust_banner_1       *string
	cust_banner_2       *string
	cust_logo_url       *string
	cust_is_active      *customtypes.IsActive
	cust_status         *string
	cust_num_inst       *int
	addcust_num_inst    *int
	cust_time_zone      *time.Time
	clearedFields       map[string]struct{}
	_Cust2Inst          map[uuid.UUID]struct{}
	removed_Cust2Inst   map[uuid.UUID]struct{}
	cleared_Cust2Inst   bool
	done                bool
	oldValue            func(context.Context) (*MstCustomer, error)
	predicates          []predicate.MstCustomer
}

var _ ent.Mutation = (*MstCustomerMutation)(nil)

// mstcustomerOption allows management of the mutation configuration using functional options.
type mstcustomerOption func(*MstCustomerMutation)

// newMstCustomerMutation creates new mutation for the MstCustomer entity.
func newMstCustomerMutation(c config, op Op, opts ...mstcustomerOption) *MstCustomerMutation {
	m := &MstCustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeMstCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMstCustomerID sets the ID field of the mutation.
func withMstCustomerID(id uuid.UUID) mstcustomerOption {
	return func(m *MstCustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *MstCustomer
		)
		m.oldValue = func(ctx context.Context) (*MstCustomer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MstCustomer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMstCustomer sets the old MstCustomer of the mutation.
func withMstCustomer(node *MstCustomer) mstcustomerOption {
	return func(m *MstCustomerMutation) {
		m.oldValue = func(context.Context) (*MstCustomer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MstCustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MstCustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MstCustomer entities.
func (m *MstCustomerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MstCustomerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MstCustomerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MstCustomer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MstCustomerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MstCustomerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MstCustomerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MstCustomerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MstCustomerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MstCustomerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCustCode sets the "cust_code" field.
func (m *MstCustomerMutation) SetCustCode(s string) {
	m.cust_code = &s
}

// CustCode returns the value of the "cust_code" field in the mutation.
func (m *MstCustomerMutation) CustCode() (r string, exists bool) {
	v := m.cust_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCustCode returns the old "cust_code" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustCode: %w", err)
	}
	return oldValue.CustCode, nil
}

// ResetCustCode resets all changes to the "cust_code" field.
func (m *MstCustomerMutation) ResetCustCode() {
	m.cust_code = nil
}

// SetCustName sets the "cust_name" field.
func (m *MstCustomerMutation) SetCustName(s string) {
	m.cust_name = &s
}

// CustName returns the value of the "cust_name" field in the mutation.
func (m *MstCustomerMutation) CustName() (r string, exists bool) {
	v := m.cust_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCustName returns the old "cust_name" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustName: %w", err)
	}
	return oldValue.CustName, nil
}

// ResetCustName resets all changes to the "cust_name" field.
func (m *MstCustomerMutation) ResetCustName() {
	m.cust_name = nil
}

// SetCustAddress sets the "cust_address" field.
func (m *MstCustomerMutation) SetCustAddress(s string) {
	m.cust_address = &s
}

// CustAddress returns the value of the "cust_address" field in the mutation.
func (m *MstCustomerMutation) CustAddress() (r string, exists bool) {
	v := m.cust_address
	if v == nil {
		return
	}
	return *v, true
}

// OldCustAddress returns the old "cust_address" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustAddress: %w", err)
	}
	return oldValue.CustAddress, nil
}

// ResetCustAddress resets all changes to the "cust_address" field.
func (m *MstCustomerMutation) ResetCustAddress() {
	m.cust_address = nil
}

// SetCustPlace sets the "cust_place" field.
func (m *MstCustomerMutation) SetCustPlace(s string) {
	m.cust_place = &s
}

// CustPlace returns the value of the "cust_place" field in the mutation.
func (m *MstCustomerMutation) CustPlace() (r string, exists bool) {
	v := m.cust_place
	if v == nil {
		return
	}
	return *v, true
}

// OldCustPlace returns the old "cust_place" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustPlace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustPlace: %w", err)
	}
	return oldValue.CustPlace, nil
}

// ResetCustPlace resets all changes to the "cust_place" field.
func (m *MstCustomerMutation) ResetCustPlace() {
	m.cust_place = nil
}

// SetCustState sets the "cust_state" field.
func (m *MstCustomerMutation) SetCustState(s string) {
	m.cust_state = &s
}

// CustState returns the value of the "cust_state" field in the mutation.
func (m *MstCustomerMutation) CustState() (r string, exists bool) {
	v := m.cust_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCustState returns the old "cust_state" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustState: %w", err)
	}
	return oldValue.CustState, nil
}

// ResetCustState resets all changes to the "cust_state" field.
func (m *MstCustomerMutation) ResetCustState() {
	m.cust_state = nil
}

// SetCustPin sets the "cust_pin" field.
func (m *MstCustomerMutation) SetCustPin(s string) {
	m.cust_pin = &s
}

// CustPin returns the value of the "cust_pin" field in the mutation.
func (m *MstCustomerMutation) CustPin() (r string, exists bool) {
	v := m.cust_pin
	if v == nil {
		return
	}
	return *v, true
}

// OldCustPin returns the old "cust_pin" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustPin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustPin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustPin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustPin: %w", err)
	}
	return oldValue.CustPin, nil
}

// ResetCustPin resets all changes to the "cust_pin" field.
func (m *MstCustomerMutation) ResetCustPin() {
	m.cust_pin = nil
}

// SetCustContactPerson sets the "cust_contact_person" field.
func (m *MstCustomerMutation) SetCustContactPerson(s string) {
	m.cust_contact_person = &s
}

// CustContactPerson returns the value of the "cust_contact_person" field in the mutation.
func (m *MstCustomerMutation) CustContactPerson() (r string, exists bool) {
	v := m.cust_contact_person
	if v == nil {
		return
	}
	return *v, true
}

// OldCustContactPerson returns the old "cust_contact_person" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustContactPerson(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustContactPerson is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustContactPerson requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustContactPerson: %w", err)
	}
	return oldValue.CustContactPerson, nil
}

// ResetCustContactPerson resets all changes to the "cust_contact_person" field.
func (m *MstCustomerMutation) ResetCustContactPerson() {
	m.cust_contact_person = nil
}

// SetCustPhone sets the "cust_phone" field.
func (m *MstCustomerMutation) SetCustPhone(s string) {
	m.cust_phone = &s
}

// CustPhone returns the value of the "cust_phone" field in the mutation.
func (m *MstCustomerMutation) CustPhone() (r string, exists bool) {
	v := m.cust_phone
	if v == nil {
		return
	}
	return *v, true
}

// OldCustPhone returns the old "cust_phone" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustPhone: %w", err)
	}
	return oldValue.CustPhone, nil
}

// ResetCustPhone resets all changes to the "cust_phone" field.
func (m *MstCustomerMutation) ResetCustPhone() {
	m.cust_phone = nil
}

// SetCustEmail sets the "cust_email" field.
func (m *MstCustomerMutation) SetCustEmail(s string) {
	m.cust_email = &s
}

// CustEmail returns the value of the "cust_email" field in the mutation.
func (m *MstCustomerMutation) CustEmail() (r string, exists bool) {
	v := m.cust_email
	if v == nil {
		return
	}
	return *v, true
}

// OldCustEmail returns the old "cust_email" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustEmail: %w", err)
	}
	return oldValue.CustEmail, nil
}

// ResetCustEmail resets all changes to the "cust_email" field.
func (m *MstCustomerMutation) ResetCustEmail() {
	m.cust_email = nil
}

// SetCustMobile sets the "cust_mobile" field.
func (m *MstCustomerMutation) SetCustMobile(s string) {
	m.cust_mobile = &s
}

// CustMobile returns the value of the "cust_mobile" field in the mutation.
func (m *MstCustomerMutation) CustMobile() (r string, exists bool) {
	v := m.cust_mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldCustMobile returns the old "cust_mobile" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustMobile: %w", err)
	}
	return oldValue.CustMobile, nil
}

// ResetCustMobile resets all changes to the "cust_mobile" field.
func (m *MstCustomerMutation) ResetCustMobile() {
	m.cust_mobile = nil
}

// SetCustURL sets the "cust_url" field.
func (m *MstCustomerMutation) SetCustURL(s string) {
	m.cust_url = &s
}

// CustURL returns the value of the "cust_url" field in the mutation.
func (m *MstCustomerMutation) CustURL() (r string, exists bool) {
	v := m.cust_url
	if v == nil {
		return
	}
	return *v, true
}

// OldCustURL returns the old "cust_url" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustURL: %w", err)
	}
	return oldValue.CustURL, nil
}

// ResetCustURL resets all changes to the "cust_url" field.
func (m *MstCustomerMutation) ResetCustURL() {
	m.cust_url = nil
}

// SetCustBanner1 sets the "cust_banner_1" field.
func (m *MstCustomerMutation) SetCustBanner1(s string) {
	m.cust_banner_1 = &s
}

// CustBanner1 returns the value of the "cust_banner_1" field in the mutation.
func (m *MstCustomerMutation) CustBanner1() (r string, exists bool) {
	v := m.cust_banner_1
	if v == nil {
		return
	}
	return *v, true
}

// OldCustBanner1 returns the old "cust_banner_1" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustBanner1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustBanner1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustBanner1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustBanner1: %w", err)
	}
	return oldValue.CustBanner1, nil
}

// ResetCustBanner1 resets all changes to the "cust_banner_1" field.
func (m *MstCustomerMutation) ResetCustBanner1() {
	m.cust_banner_1 = nil
}

// SetCustBanner2 sets the "cust_banner_2" field.
func (m *MstCustomerMutation) SetCustBanner2(s string) {
	m.cust_banner_2 = &s
}

// CustBanner2 returns the value of the "cust_banner_2" field in the mutation.
func (m *MstCustomerMutation) CustBanner2() (r string, exists bool) {
	v := m.cust_banner_2
	if v == nil {
		return
	}
	return *v, true
}

// OldCustBanner2 returns the old "cust_banner_2" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustBanner2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustBanner2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustBanner2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustBanner2: %w", err)
	}
	return oldValue.CustBanner2, nil
}

// ResetCustBanner2 resets all changes to the "cust_banner_2" field.
func (m *MstCustomerMutation) ResetCustBanner2() {
	m.cust_banner_2 = nil
}

// SetCustLogoURL sets the "cust_logo_url" field.
func (m *MstCustomerMutation) SetCustLogoURL(s string) {
	m.cust_logo_url = &s
}

// CustLogoURL returns the value of the "cust_logo_url" field in the mutation.
func (m *MstCustomerMutation) CustLogoURL() (r string, exists bool) {
	v := m.cust_logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldCustLogoURL returns the old "cust_logo_url" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustLogoURL: %w", err)
	}
	return oldValue.CustLogoURL, nil
}

// ResetCustLogoURL resets all changes to the "cust_logo_url" field.
func (m *MstCustomerMutation) ResetCustLogoURL() {
	m.cust_logo_url = nil
}

// SetCustIsActive sets the "cust_is_active" field.
func (m *MstCustomerMutation) SetCustIsActive(ca customtypes.IsActive) {
	m.cust_is_active = &ca
}

// CustIsActive returns the value of the "cust_is_active" field in the mutation.
func (m *MstCustomerMutation) CustIsActive() (r customtypes.IsActive, exists bool) {
	v := m.cust_is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldCustIsActive returns the old "cust_is_active" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustIsActive(ctx context.Context) (v customtypes.IsActive, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustIsActive: %w", err)
	}
	return oldValue.CustIsActive, nil
}

// ResetCustIsActive resets all changes to the "cust_is_active" field.
func (m *MstCustomerMutation) ResetCustIsActive() {
	m.cust_is_active = nil
}

// SetCustStatus sets the "cust_status" field.
func (m *MstCustomerMutation) SetCustStatus(s string) {
	m.cust_status = &s
}

// CustStatus returns the value of the "cust_status" field in the mutation.
func (m *MstCustomerMutation) CustStatus() (r string, exists bool) {
	v := m.cust_status
	if v == nil {
		return
	}
	return *v, true
}

// OldCustStatus returns the old "cust_status" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustStatus: %w", err)
	}
	return oldValue.CustStatus, nil
}

// ResetCustStatus resets all changes to the "cust_status" field.
func (m *MstCustomerMutation) ResetCustStatus() {
	m.cust_status = nil
}

// SetCustNumInst sets the "cust_num_inst" field.
func (m *MstCustomerMutation) SetCustNumInst(i int) {
	m.cust_num_inst = &i
	m.addcust_num_inst = nil
}

// CustNumInst returns the value of the "cust_num_inst" field in the mutation.
func (m *MstCustomerMutation) CustNumInst() (r int, exists bool) {
	v := m.cust_num_inst
	if v == nil {
		return
	}
	return *v, true
}

// OldCustNumInst returns the old "cust_num_inst" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustNumInst(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustNumInst is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustNumInst requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustNumInst: %w", err)
	}
	return oldValue.CustNumInst, nil
}

// AddCustNumInst adds i to the "cust_num_inst" field.
func (m *MstCustomerMutation) AddCustNumInst(i int) {
	if m.addcust_num_inst != nil {
		*m.addcust_num_inst += i
	} else {
		m.addcust_num_inst = &i
	}
}

// AddedCustNumInst returns the value that was added to the "cust_num_inst" field in this mutation.
func (m *MstCustomerMutation) AddedCustNumInst() (r int, exists bool) {
	v := m.addcust_num_inst
	if v == nil {
		return
	}
	return *v, true
}

// ResetCustNumInst resets all changes to the "cust_num_inst" field.
func (m *MstCustomerMutation) ResetCustNumInst() {
	m.cust_num_inst = nil
	m.addcust_num_inst = nil
}

// SetCustTimeZone sets the "cust_time_zone" field.
func (m *MstCustomerMutation) SetCustTimeZone(t time.Time) {
	m.cust_time_zone = &t
}

// CustTimeZone returns the value of the "cust_time_zone" field in the mutation.
func (m *MstCustomerMutation) CustTimeZone() (r time.Time, exists bool) {
	v := m.cust_time_zone
	if v == nil {
		return
	}
	return *v, true
}

// OldCustTimeZone returns the old "cust_time_zone" field's value of the MstCustomer entity.
// If the MstCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstCustomerMutation) OldCustTimeZone(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustTimeZone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustTimeZone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustTimeZone: %w", err)
	}
	return oldValue.CustTimeZone, nil
}

// ResetCustTimeZone resets all changes to the "cust_time_zone" field.
func (m *MstCustomerMutation) ResetCustTimeZone() {
	m.cust_time_zone = nil
}

// AddCust2InstIDs adds the "Cust2Inst" edge to the MstInst entity by ids.
func (m *MstCustomerMutation) AddCust2InstIDs(ids ...uuid.UUID) {
	if m._Cust2Inst == nil {
		m._Cust2Inst = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._Cust2Inst[ids[i]] = struct{}{}
	}
}

// ClearCust2Inst clears the "Cust2Inst" edge to the MstInst entity.
func (m *MstCustomerMutation) ClearCust2Inst() {
	m.cleared_Cust2Inst = true
}

// Cust2InstCleared reports if the "Cust2Inst" edge to the MstInst entity was cleared.
func (m *MstCustomerMutation) Cust2InstCleared() bool {
	return m.cleared_Cust2Inst
}

// RemoveCust2InstIDs removes the "Cust2Inst" edge to the MstInst entity by IDs.
func (m *MstCustomerMutation) RemoveCust2InstIDs(ids ...uuid.UUID) {
	if m.removed_Cust2Inst == nil {
		m.removed_Cust2Inst = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._Cust2Inst, ids[i])
		m.removed_Cust2Inst[ids[i]] = struct{}{}
	}
}

// RemovedCust2Inst returns the removed IDs of the "Cust2Inst" edge to the MstInst entity.
func (m *MstCustomerMutation) RemovedCust2InstIDs() (ids []uuid.UUID) {
	for id := range m.removed_Cust2Inst {
		ids = append(ids, id)
	}
	return
}

// Cust2InstIDs returns the "Cust2Inst" edge IDs in the mutation.
func (m *MstCustomerMutation) Cust2InstIDs() (ids []uuid.UUID) {
	for id := range m._Cust2Inst {
		ids = append(ids, id)
	}
	return
}

// ResetCust2Inst resets all changes to the "Cust2Inst" edge.
func (m *MstCustomerMutation) ResetCust2Inst() {
	m._Cust2Inst = nil
	m.cleared_Cust2Inst = false
	m.removed_Cust2Inst = nil
}

// Where appends a list predicates to the MstCustomerMutation builder.
func (m *MstCustomerMutation) Where(ps ...predicate.MstCustomer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MstCustomerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MstCustomer).
func (m *MstCustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MstCustomerMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.created_at != nil {
		fields = append(fields, mstcustomer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, mstcustomer.FieldUpdatedAt)
	}
	if m.cust_code != nil {
		fields = append(fields, mstcustomer.FieldCustCode)
	}
	if m.cust_name != nil {
		fields = append(fields, mstcustomer.FieldCustName)
	}
	if m.cust_address != nil {
		fields = append(fields, mstcustomer.FieldCustAddress)
	}
	if m.cust_place != nil {
		fields = append(fields, mstcustomer.FieldCustPlace)
	}
	if m.cust_state != nil {
		fields = append(fields, mstcustomer.FieldCustState)
	}
	if m.cust_pin != nil {
		fields = append(fields, mstcustomer.FieldCustPin)
	}
	if m.cust_contact_person != nil {
		fields = append(fields, mstcustomer.FieldCustContactPerson)
	}
	if m.cust_phone != nil {
		fields = append(fields, mstcustomer.FieldCustPhone)
	}
	if m.cust_email != nil {
		fields = append(fields, mstcustomer.FieldCustEmail)
	}
	if m.cust_mobile != nil {
		fields = append(fields, mstcustomer.FieldCustMobile)
	}
	if m.cust_url != nil {
		fields = append(fields, mstcustomer.FieldCustURL)
	}
	if m.cust_banner_1 != nil {
		fields = append(fields, mstcustomer.FieldCustBanner1)
	}
	if m.cust_banner_2 != nil {
		fields = append(fields, mstcustomer.FieldCustBanner2)
	}
	if m.cust_logo_url != nil {
		fields = append(fields, mstcustomer.FieldCustLogoURL)
	}
	if m.cust_is_active != nil {
		fields = append(fields, mstcustomer.FieldCustIsActive)
	}
	if m.cust_status != nil {
		fields = append(fields, mstcustomer.FieldCustStatus)
	}
	if m.cust_num_inst != nil {
		fields = append(fields, mstcustomer.FieldCustNumInst)
	}
	if m.cust_time_zone != nil {
		fields = append(fields, mstcustomer.FieldCustTimeZone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MstCustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mstcustomer.FieldCreatedAt:
		return m.CreatedAt()
	case mstcustomer.FieldUpdatedAt:
		return m.UpdatedAt()
	case mstcustomer.FieldCustCode:
		return m.CustCode()
	case mstcustomer.FieldCustName:
		return m.CustName()
	case mstcustomer.FieldCustAddress:
		return m.CustAddress()
	case mstcustomer.FieldCustPlace:
		return m.CustPlace()
	case mstcustomer.FieldCustState:
		return m.CustState()
	case mstcustomer.FieldCustPin:
		return m.CustPin()
	case mstcustomer.FieldCustContactPerson:
		return m.CustContactPerson()
	case mstcustomer.FieldCustPhone:
		return m.CustPhone()
	case mstcustomer.FieldCustEmail:
		return m.CustEmail()
	case mstcustomer.FieldCustMobile:
		return m.CustMobile()
	case mstcustomer.FieldCustURL:
		return m.CustURL()
	case mstcustomer.FieldCustBanner1:
		return m.CustBanner1()
	case mstcustomer.FieldCustBanner2:
		return m.CustBanner2()
	case mstcustomer.FieldCustLogoURL:
		return m.CustLogoURL()
	case mstcustomer.FieldCustIsActive:
		return m.CustIsActive()
	case mstcustomer.FieldCustStatus:
		return m.CustStatus()
	case mstcustomer.FieldCustNumInst:
		return m.CustNumInst()
	case mstcustomer.FieldCustTimeZone:
		return m.CustTimeZone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MstCustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mstcustomer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case mstcustomer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case mstcustomer.FieldCustCode:
		return m.OldCustCode(ctx)
	case mstcustomer.FieldCustName:
		return m.OldCustName(ctx)
	case mstcustomer.FieldCustAddress:
		return m.OldCustAddress(ctx)
	case mstcustomer.FieldCustPlace:
		return m.OldCustPlace(ctx)
	case mstcustomer.FieldCustState:
		return m.OldCustState(ctx)
	case mstcustomer.FieldCustPin:
		return m.OldCustPin(ctx)
	case mstcustomer.FieldCustContactPerson:
		return m.OldCustContactPerson(ctx)
	case mstcustomer.FieldCustPhone:
		return m.OldCustPhone(ctx)
	case mstcustomer.FieldCustEmail:
		return m.OldCustEmail(ctx)
	case mstcustomer.FieldCustMobile:
		return m.OldCustMobile(ctx)
	case mstcustomer.FieldCustURL:
		return m.OldCustURL(ctx)
	case mstcustomer.FieldCustBanner1:
		return m.OldCustBanner1(ctx)
	case mstcustomer.FieldCustBanner2:
		return m.OldCustBanner2(ctx)
	case mstcustomer.FieldCustLogoURL:
		return m.OldCustLogoURL(ctx)
	case mstcustomer.FieldCustIsActive:
		return m.OldCustIsActive(ctx)
	case mstcustomer.FieldCustStatus:
		return m.OldCustStatus(ctx)
	case mstcustomer.FieldCustNumInst:
		return m.OldCustNumInst(ctx)
	case mstcustomer.FieldCustTimeZone:
		return m.OldCustTimeZone(ctx)
	}
	return nil, fmt.Errorf("unknown MstCustomer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MstCustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mstcustomer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case mstcustomer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case mstcustomer.FieldCustCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustCode(v)
		return nil
	case mstcustomer.FieldCustName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustName(v)
		return nil
	case mstcustomer.FieldCustAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustAddress(v)
		return nil
	case mstcustomer.FieldCustPlace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustPlace(v)
		return nil
	case mstcustomer.FieldCustState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustState(v)
		return nil
	case mstcustomer.FieldCustPin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustPin(v)
		return nil
	case mstcustomer.FieldCustContactPerson:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustContactPerson(v)
		return nil
	case mstcustomer.FieldCustPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustPhone(v)
		return nil
	case mstcustomer.FieldCustEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustEmail(v)
		return nil
	case mstcustomer.FieldCustMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustMobile(v)
		return nil
	case mstcustomer.FieldCustURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustURL(v)
		return nil
	case mstcustomer.FieldCustBanner1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustBanner1(v)
		return nil
	case mstcustomer.FieldCustBanner2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustBanner2(v)
		return nil
	case mstcustomer.FieldCustLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustLogoURL(v)
		return nil
	case mstcustomer.FieldCustIsActive:
		v, ok := value.(customtypes.IsActive)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustIsActive(v)
		return nil
	case mstcustomer.FieldCustStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustStatus(v)
		return nil
	case mstcustomer.FieldCustNumInst:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustNumInst(v)
		return nil
	case mstcustomer.FieldCustTimeZone:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustTimeZone(v)
		return nil
	}
	return fmt.Errorf("unknown MstCustomer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MstCustomerMutation) AddedFields() []string {
	var fields []string
	if m.addcust_num_inst != nil {
		fields = append(fields, mstcustomer.FieldCustNumInst)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MstCustomerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mstcustomer.FieldCustNumInst:
		return m.AddedCustNumInst()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MstCustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mstcustomer.FieldCustNumInst:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCustNumInst(v)
		return nil
	}
	return fmt.Errorf("unknown MstCustomer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MstCustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MstCustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MstCustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MstCustomer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MstCustomerMutation) ResetField(name string) error {
	switch name {
	case mstcustomer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case mstcustomer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case mstcustomer.FieldCustCode:
		m.ResetCustCode()
		return nil
	case mstcustomer.FieldCustName:
		m.ResetCustName()
		return nil
	case mstcustomer.FieldCustAddress:
		m.ResetCustAddress()
		return nil
	case mstcustomer.FieldCustPlace:
		m.ResetCustPlace()
		return nil
	case mstcustomer.FieldCustState:
		m.ResetCustState()
		return nil
	case mstcustomer.FieldCustPin:
		m.ResetCustPin()
		return nil
	case mstcustomer.FieldCustContactPerson:
		m.ResetCustContactPerson()
		return nil
	case mstcustomer.FieldCustPhone:
		m.ResetCustPhone()
		return nil
	case mstcustomer.FieldCustEmail:
		m.ResetCustEmail()
		return nil
	case mstcustomer.FieldCustMobile:
		m.ResetCustMobile()
		return nil
	case mstcustomer.FieldCustURL:
		m.ResetCustURL()
		return nil
	case mstcustomer.FieldCustBanner1:
		m.ResetCustBanner1()
		return nil
	case mstcustomer.FieldCustBanner2:
		m.ResetCustBanner2()
		return nil
	case mstcustomer.FieldCustLogoURL:
		m.ResetCustLogoURL()
		return nil
	case mstcustomer.FieldCustIsActive:
		m.ResetCustIsActive()
		return nil
	case mstcustomer.FieldCustStatus:
		m.ResetCustStatus()
		return nil
	case mstcustomer.FieldCustNumInst:
		m.ResetCustNumInst()
		return nil
	case mstcustomer.FieldCustTimeZone:
		m.ResetCustTimeZone()
		return nil
	}
	return fmt.Errorf("unknown MstCustomer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MstCustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Cust2Inst != nil {
		edges = append(edges, mstcustomer.EdgeCust2Inst)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MstCustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mstcustomer.EdgeCust2Inst:
		ids := make([]ent.Value, 0, len(m._Cust2Inst))
		for id := range m._Cust2Inst {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MstCustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Cust2Inst != nil {
		edges = append(edges, mstcustomer.EdgeCust2Inst)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MstCustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mstcustomer.EdgeCust2Inst:
		ids := make([]ent.Value, 0, len(m.removed_Cust2Inst))
		for id := range m.removed_Cust2Inst {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MstCustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Cust2Inst {
		edges = append(edges, mstcustomer.EdgeCust2Inst)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MstCustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case mstcustomer.EdgeCust2Inst:
		return m.cleared_Cust2Inst
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MstCustomerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown MstCustomer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MstCustomerMutation) ResetEdge(name string) error {
	switch name {
	case mstcustomer.EdgeCust2Inst:
		m.ResetCust2Inst()
		return nil
	}
	return fmt.Errorf("unknown MstCustomer edge %s", name)
}

// MstInstMutation represents an operation that mutates the MstInst nodes in the graph.
type MstInstMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *time.Time
	updated_at           *time.Time
	inst_code            *string
	inst_name            *string
	inst_short_name      *string
	inst_address         *string
	inst_place           *string
	inst_state           *string
	inst_pin             *string
	inst_contact_person  *string
	inst_phone           *string
	inst_email           *string
	inst_mobile          *string
	inst_url             *string
	inst_banner_1        *string
	inst_banner_2        *string
	inst_logo_url        *string
	inst_is_active       *customtypes.IsActive
	inst_status          *string
	inst_time_zone       *time.Time
	test_id              *uuid.UUID
	clearedFields        map[string]struct{}
	_InstfromCust        *uuid.UUID
	cleared_InstfromCust bool
	done                 bool
	oldValue             func(context.Context) (*MstInst, error)
	predicates           []predicate.MstInst
}

var _ ent.Mutation = (*MstInstMutation)(nil)

// mstinstOption allows management of the mutation configuration using functional options.
type mstinstOption func(*MstInstMutation)

// newMstInstMutation creates new mutation for the MstInst entity.
func newMstInstMutation(c config, op Op, opts ...mstinstOption) *MstInstMutation {
	m := &MstInstMutation{
		config:        c,
		op:            op,
		typ:           TypeMstInst,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMstInstID sets the ID field of the mutation.
func withMstInstID(id uuid.UUID) mstinstOption {
	return func(m *MstInstMutation) {
		var (
			err   error
			once  sync.Once
			value *MstInst
		)
		m.oldValue = func(ctx context.Context) (*MstInst, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MstInst.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMstInst sets the old MstInst of the mutation.
func withMstInst(node *MstInst) mstinstOption {
	return func(m *MstInstMutation) {
		m.oldValue = func(context.Context) (*MstInst, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MstInstMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MstInstMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MstInst entities.
func (m *MstInstMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MstInstMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MstInstMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MstInst.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MstInstMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MstInstMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MstInstMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MstInstMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MstInstMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MstInstMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetInstCode sets the "inst_code" field.
func (m *MstInstMutation) SetInstCode(s string) {
	m.inst_code = &s
}

// InstCode returns the value of the "inst_code" field in the mutation.
func (m *MstInstMutation) InstCode() (r string, exists bool) {
	v := m.inst_code
	if v == nil {
		return
	}
	return *v, true
}

// OldInstCode returns the old "inst_code" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstCode: %w", err)
	}
	return oldValue.InstCode, nil
}

// ResetInstCode resets all changes to the "inst_code" field.
func (m *MstInstMutation) ResetInstCode() {
	m.inst_code = nil
}

// SetInstName sets the "inst_name" field.
func (m *MstInstMutation) SetInstName(s string) {
	m.inst_name = &s
}

// InstName returns the value of the "inst_name" field in the mutation.
func (m *MstInstMutation) InstName() (r string, exists bool) {
	v := m.inst_name
	if v == nil {
		return
	}
	return *v, true
}

// OldInstName returns the old "inst_name" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstName: %w", err)
	}
	return oldValue.InstName, nil
}

// ResetInstName resets all changes to the "inst_name" field.
func (m *MstInstMutation) ResetInstName() {
	m.inst_name = nil
}

// SetInstShortName sets the "inst_short_name" field.
func (m *MstInstMutation) SetInstShortName(s string) {
	m.inst_short_name = &s
}

// InstShortName returns the value of the "inst_short_name" field in the mutation.
func (m *MstInstMutation) InstShortName() (r string, exists bool) {
	v := m.inst_short_name
	if v == nil {
		return
	}
	return *v, true
}

// OldInstShortName returns the old "inst_short_name" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstShortName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstShortName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstShortName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstShortName: %w", err)
	}
	return oldValue.InstShortName, nil
}

// ResetInstShortName resets all changes to the "inst_short_name" field.
func (m *MstInstMutation) ResetInstShortName() {
	m.inst_short_name = nil
}

// SetInstAddress sets the "inst_address" field.
func (m *MstInstMutation) SetInstAddress(s string) {
	m.inst_address = &s
}

// InstAddress returns the value of the "inst_address" field in the mutation.
func (m *MstInstMutation) InstAddress() (r string, exists bool) {
	v := m.inst_address
	if v == nil {
		return
	}
	return *v, true
}

// OldInstAddress returns the old "inst_address" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstAddress: %w", err)
	}
	return oldValue.InstAddress, nil
}

// ResetInstAddress resets all changes to the "inst_address" field.
func (m *MstInstMutation) ResetInstAddress() {
	m.inst_address = nil
}

// SetInstPlace sets the "inst_place" field.
func (m *MstInstMutation) SetInstPlace(s string) {
	m.inst_place = &s
}

// InstPlace returns the value of the "inst_place" field in the mutation.
func (m *MstInstMutation) InstPlace() (r string, exists bool) {
	v := m.inst_place
	if v == nil {
		return
	}
	return *v, true
}

// OldInstPlace returns the old "inst_place" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstPlace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstPlace: %w", err)
	}
	return oldValue.InstPlace, nil
}

// ResetInstPlace resets all changes to the "inst_place" field.
func (m *MstInstMutation) ResetInstPlace() {
	m.inst_place = nil
}

// SetInstState sets the "inst_state" field.
func (m *MstInstMutation) SetInstState(s string) {
	m.inst_state = &s
}

// InstState returns the value of the "inst_state" field in the mutation.
func (m *MstInstMutation) InstState() (r string, exists bool) {
	v := m.inst_state
	if v == nil {
		return
	}
	return *v, true
}

// OldInstState returns the old "inst_state" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstState: %w", err)
	}
	return oldValue.InstState, nil
}

// ResetInstState resets all changes to the "inst_state" field.
func (m *MstInstMutation) ResetInstState() {
	m.inst_state = nil
}

// SetInstPin sets the "inst_pin" field.
func (m *MstInstMutation) SetInstPin(s string) {
	m.inst_pin = &s
}

// InstPin returns the value of the "inst_pin" field in the mutation.
func (m *MstInstMutation) InstPin() (r string, exists bool) {
	v := m.inst_pin
	if v == nil {
		return
	}
	return *v, true
}

// OldInstPin returns the old "inst_pin" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstPin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstPin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstPin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstPin: %w", err)
	}
	return oldValue.InstPin, nil
}

// ResetInstPin resets all changes to the "inst_pin" field.
func (m *MstInstMutation) ResetInstPin() {
	m.inst_pin = nil
}

// SetInstContactPerson sets the "inst_contact_person" field.
func (m *MstInstMutation) SetInstContactPerson(s string) {
	m.inst_contact_person = &s
}

// InstContactPerson returns the value of the "inst_contact_person" field in the mutation.
func (m *MstInstMutation) InstContactPerson() (r string, exists bool) {
	v := m.inst_contact_person
	if v == nil {
		return
	}
	return *v, true
}

// OldInstContactPerson returns the old "inst_contact_person" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstContactPerson(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstContactPerson is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstContactPerson requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstContactPerson: %w", err)
	}
	return oldValue.InstContactPerson, nil
}

// ResetInstContactPerson resets all changes to the "inst_contact_person" field.
func (m *MstInstMutation) ResetInstContactPerson() {
	m.inst_contact_person = nil
}

// SetInstPhone sets the "inst_phone" field.
func (m *MstInstMutation) SetInstPhone(s string) {
	m.inst_phone = &s
}

// InstPhone returns the value of the "inst_phone" field in the mutation.
func (m *MstInstMutation) InstPhone() (r string, exists bool) {
	v := m.inst_phone
	if v == nil {
		return
	}
	return *v, true
}

// OldInstPhone returns the old "inst_phone" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstPhone: %w", err)
	}
	return oldValue.InstPhone, nil
}

// ResetInstPhone resets all changes to the "inst_phone" field.
func (m *MstInstMutation) ResetInstPhone() {
	m.inst_phone = nil
}

// SetInstEmail sets the "inst_email" field.
func (m *MstInstMutation) SetInstEmail(s string) {
	m.inst_email = &s
}

// InstEmail returns the value of the "inst_email" field in the mutation.
func (m *MstInstMutation) InstEmail() (r string, exists bool) {
	v := m.inst_email
	if v == nil {
		return
	}
	return *v, true
}

// OldInstEmail returns the old "inst_email" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstEmail: %w", err)
	}
	return oldValue.InstEmail, nil
}

// ResetInstEmail resets all changes to the "inst_email" field.
func (m *MstInstMutation) ResetInstEmail() {
	m.inst_email = nil
}

// SetInstMobile sets the "inst_mobile" field.
func (m *MstInstMutation) SetInstMobile(s string) {
	m.inst_mobile = &s
}

// InstMobile returns the value of the "inst_mobile" field in the mutation.
func (m *MstInstMutation) InstMobile() (r string, exists bool) {
	v := m.inst_mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldInstMobile returns the old "inst_mobile" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstMobile: %w", err)
	}
	return oldValue.InstMobile, nil
}

// ResetInstMobile resets all changes to the "inst_mobile" field.
func (m *MstInstMutation) ResetInstMobile() {
	m.inst_mobile = nil
}

// SetInstURL sets the "inst_url" field.
func (m *MstInstMutation) SetInstURL(s string) {
	m.inst_url = &s
}

// InstURL returns the value of the "inst_url" field in the mutation.
func (m *MstInstMutation) InstURL() (r string, exists bool) {
	v := m.inst_url
	if v == nil {
		return
	}
	return *v, true
}

// OldInstURL returns the old "inst_url" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstURL: %w", err)
	}
	return oldValue.InstURL, nil
}

// ResetInstURL resets all changes to the "inst_url" field.
func (m *MstInstMutation) ResetInstURL() {
	m.inst_url = nil
}

// SetInstBanner1 sets the "inst_banner_1" field.
func (m *MstInstMutation) SetInstBanner1(s string) {
	m.inst_banner_1 = &s
}

// InstBanner1 returns the value of the "inst_banner_1" field in the mutation.
func (m *MstInstMutation) InstBanner1() (r string, exists bool) {
	v := m.inst_banner_1
	if v == nil {
		return
	}
	return *v, true
}

// OldInstBanner1 returns the old "inst_banner_1" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstBanner1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstBanner1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstBanner1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstBanner1: %w", err)
	}
	return oldValue.InstBanner1, nil
}

// ResetInstBanner1 resets all changes to the "inst_banner_1" field.
func (m *MstInstMutation) ResetInstBanner1() {
	m.inst_banner_1 = nil
}

// SetInstBanner2 sets the "inst_banner_2" field.
func (m *MstInstMutation) SetInstBanner2(s string) {
	m.inst_banner_2 = &s
}

// InstBanner2 returns the value of the "inst_banner_2" field in the mutation.
func (m *MstInstMutation) InstBanner2() (r string, exists bool) {
	v := m.inst_banner_2
	if v == nil {
		return
	}
	return *v, true
}

// OldInstBanner2 returns the old "inst_banner_2" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstBanner2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstBanner2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstBanner2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstBanner2: %w", err)
	}
	return oldValue.InstBanner2, nil
}

// ResetInstBanner2 resets all changes to the "inst_banner_2" field.
func (m *MstInstMutation) ResetInstBanner2() {
	m.inst_banner_2 = nil
}

// SetInstLogoURL sets the "inst_logo_url" field.
func (m *MstInstMutation) SetInstLogoURL(s string) {
	m.inst_logo_url = &s
}

// InstLogoURL returns the value of the "inst_logo_url" field in the mutation.
func (m *MstInstMutation) InstLogoURL() (r string, exists bool) {
	v := m.inst_logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldInstLogoURL returns the old "inst_logo_url" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstLogoURL: %w", err)
	}
	return oldValue.InstLogoURL, nil
}

// ResetInstLogoURL resets all changes to the "inst_logo_url" field.
func (m *MstInstMutation) ResetInstLogoURL() {
	m.inst_logo_url = nil
}

// SetInstIsActive sets the "inst_is_active" field.
func (m *MstInstMutation) SetInstIsActive(ca customtypes.IsActive) {
	m.inst_is_active = &ca
}

// InstIsActive returns the value of the "inst_is_active" field in the mutation.
func (m *MstInstMutation) InstIsActive() (r customtypes.IsActive, exists bool) {
	v := m.inst_is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldInstIsActive returns the old "inst_is_active" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstIsActive(ctx context.Context) (v customtypes.IsActive, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstIsActive: %w", err)
	}
	return oldValue.InstIsActive, nil
}

// ResetInstIsActive resets all changes to the "inst_is_active" field.
func (m *MstInstMutation) ResetInstIsActive() {
	m.inst_is_active = nil
}

// SetInstStatus sets the "inst_status" field.
func (m *MstInstMutation) SetInstStatus(s string) {
	m.inst_status = &s
}

// InstStatus returns the value of the "inst_status" field in the mutation.
func (m *MstInstMutation) InstStatus() (r string, exists bool) {
	v := m.inst_status
	if v == nil {
		return
	}
	return *v, true
}

// OldInstStatus returns the old "inst_status" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstStatus: %w", err)
	}
	return oldValue.InstStatus, nil
}

// ResetInstStatus resets all changes to the "inst_status" field.
func (m *MstInstMutation) ResetInstStatus() {
	m.inst_status = nil
}

// SetInstTimeZone sets the "inst_time_zone" field.
func (m *MstInstMutation) SetInstTimeZone(t time.Time) {
	m.inst_time_zone = &t
}

// InstTimeZone returns the value of the "inst_time_zone" field in the mutation.
func (m *MstInstMutation) InstTimeZone() (r time.Time, exists bool) {
	v := m.inst_time_zone
	if v == nil {
		return
	}
	return *v, true
}

// OldInstTimeZone returns the old "inst_time_zone" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldInstTimeZone(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstTimeZone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstTimeZone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstTimeZone: %w", err)
	}
	return oldValue.InstTimeZone, nil
}

// ResetInstTimeZone resets all changes to the "inst_time_zone" field.
func (m *MstInstMutation) ResetInstTimeZone() {
	m.inst_time_zone = nil
}

// SetCustomerID sets the "customer_id" field.
func (m *MstInstMutation) SetCustomerID(u uuid.UUID) {
	m._InstfromCust = &u
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *MstInstMutation) CustomerID() (r uuid.UUID, exists bool) {
	v := m._InstfromCust
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldCustomerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *MstInstMutation) ResetCustomerID() {
	m._InstfromCust = nil
}

// SetTestID sets the "test_id" field.
func (m *MstInstMutation) SetTestID(u uuid.UUID) {
	m.test_id = &u
}

// TestID returns the value of the "test_id" field in the mutation.
func (m *MstInstMutation) TestID() (r uuid.UUID, exists bool) {
	v := m.test_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTestID returns the old "test_id" field's value of the MstInst entity.
// If the MstInst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstInstMutation) OldTestID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestID: %w", err)
	}
	return oldValue.TestID, nil
}

// ResetTestID resets all changes to the "test_id" field.
func (m *MstInstMutation) ResetTestID() {
	m.test_id = nil
}

// SetInstfromCustID sets the "InstfromCust" edge to the MstCustomer entity by id.
func (m *MstInstMutation) SetInstfromCustID(id uuid.UUID) {
	m._InstfromCust = &id
}

// ClearInstfromCust clears the "InstfromCust" edge to the MstCustomer entity.
func (m *MstInstMutation) ClearInstfromCust() {
	m.cleared_InstfromCust = true
}

// InstfromCustCleared reports if the "InstfromCust" edge to the MstCustomer entity was cleared.
func (m *MstInstMutation) InstfromCustCleared() bool {
	return m.cleared_InstfromCust
}

// InstfromCustID returns the "InstfromCust" edge ID in the mutation.
func (m *MstInstMutation) InstfromCustID() (id uuid.UUID, exists bool) {
	if m._InstfromCust != nil {
		return *m._InstfromCust, true
	}
	return
}

// InstfromCustIDs returns the "InstfromCust" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InstfromCustID instead. It exists only for internal usage by the builders.
func (m *MstInstMutation) InstfromCustIDs() (ids []uuid.UUID) {
	if id := m._InstfromCust; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInstfromCust resets all changes to the "InstfromCust" edge.
func (m *MstInstMutation) ResetInstfromCust() {
	m._InstfromCust = nil
	m.cleared_InstfromCust = false
}

// Where appends a list predicates to the MstInstMutation builder.
func (m *MstInstMutation) Where(ps ...predicate.MstInst) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MstInstMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MstInst).
func (m *MstInstMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MstInstMutation) Fields() []string {
	fields := make([]string, 0, 22)
	if m.created_at != nil {
		fields = append(fields, mstinst.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, mstinst.FieldUpdatedAt)
	}
	if m.inst_code != nil {
		fields = append(fields, mstinst.FieldInstCode)
	}
	if m.inst_name != nil {
		fields = append(fields, mstinst.FieldInstName)
	}
	if m.inst_short_name != nil {
		fields = append(fields, mstinst.FieldInstShortName)
	}
	if m.inst_address != nil {
		fields = append(fields, mstinst.FieldInstAddress)
	}
	if m.inst_place != nil {
		fields = append(fields, mstinst.FieldInstPlace)
	}
	if m.inst_state != nil {
		fields = append(fields, mstinst.FieldInstState)
	}
	if m.inst_pin != nil {
		fields = append(fields, mstinst.FieldInstPin)
	}
	if m.inst_contact_person != nil {
		fields = append(fields, mstinst.FieldInstContactPerson)
	}
	if m.inst_phone != nil {
		fields = append(fields, mstinst.FieldInstPhone)
	}
	if m.inst_email != nil {
		fields = append(fields, mstinst.FieldInstEmail)
	}
	if m.inst_mobile != nil {
		fields = append(fields, mstinst.FieldInstMobile)
	}
	if m.inst_url != nil {
		fields = append(fields, mstinst.FieldInstURL)
	}
	if m.inst_banner_1 != nil {
		fields = append(fields, mstinst.FieldInstBanner1)
	}
	if m.inst_banner_2 != nil {
		fields = append(fields, mstinst.FieldInstBanner2)
	}
	if m.inst_logo_url != nil {
		fields = append(fields, mstinst.FieldInstLogoURL)
	}
	if m.inst_is_active != nil {
		fields = append(fields, mstinst.FieldInstIsActive)
	}
	if m.inst_status != nil {
		fields = append(fields, mstinst.FieldInstStatus)
	}
	if m.inst_time_zone != nil {
		fields = append(fields, mstinst.FieldInstTimeZone)
	}
	if m._InstfromCust != nil {
		fields = append(fields, mstinst.FieldCustomerID)
	}
	if m.test_id != nil {
		fields = append(fields, mstinst.FieldTestID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MstInstMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mstinst.FieldCreatedAt:
		return m.CreatedAt()
	case mstinst.FieldUpdatedAt:
		return m.UpdatedAt()
	case mstinst.FieldInstCode:
		return m.InstCode()
	case mstinst.FieldInstName:
		return m.InstName()
	case mstinst.FieldInstShortName:
		return m.InstShortName()
	case mstinst.FieldInstAddress:
		return m.InstAddress()
	case mstinst.FieldInstPlace:
		return m.InstPlace()
	case mstinst.FieldInstState:
		return m.InstState()
	case mstinst.FieldInstPin:
		return m.InstPin()
	case mstinst.FieldInstContactPerson:
		return m.InstContactPerson()
	case mstinst.FieldInstPhone:
		return m.InstPhone()
	case mstinst.FieldInstEmail:
		return m.InstEmail()
	case mstinst.FieldInstMobile:
		return m.InstMobile()
	case mstinst.FieldInstURL:
		return m.InstURL()
	case mstinst.FieldInstBanner1:
		return m.InstBanner1()
	case mstinst.FieldInstBanner2:
		return m.InstBanner2()
	case mstinst.FieldInstLogoURL:
		return m.InstLogoURL()
	case mstinst.FieldInstIsActive:
		return m.InstIsActive()
	case mstinst.FieldInstStatus:
		return m.InstStatus()
	case mstinst.FieldInstTimeZone:
		return m.InstTimeZone()
	case mstinst.FieldCustomerID:
		return m.CustomerID()
	case mstinst.FieldTestID:
		return m.TestID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MstInstMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mstinst.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case mstinst.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case mstinst.FieldInstCode:
		return m.OldInstCode(ctx)
	case mstinst.FieldInstName:
		return m.OldInstName(ctx)
	case mstinst.FieldInstShortName:
		return m.OldInstShortName(ctx)
	case mstinst.FieldInstAddress:
		return m.OldInstAddress(ctx)
	case mstinst.FieldInstPlace:
		return m.OldInstPlace(ctx)
	case mstinst.FieldInstState:
		return m.OldInstState(ctx)
	case mstinst.FieldInstPin:
		return m.OldInstPin(ctx)
	case mstinst.FieldInstContactPerson:
		return m.OldInstContactPerson(ctx)
	case mstinst.FieldInstPhone:
		return m.OldInstPhone(ctx)
	case mstinst.FieldInstEmail:
		return m.OldInstEmail(ctx)
	case mstinst.FieldInstMobile:
		return m.OldInstMobile(ctx)
	case mstinst.FieldInstURL:
		return m.OldInstURL(ctx)
	case mstinst.FieldInstBanner1:
		return m.OldInstBanner1(ctx)
	case mstinst.FieldInstBanner2:
		return m.OldInstBanner2(ctx)
	case mstinst.FieldInstLogoURL:
		return m.OldInstLogoURL(ctx)
	case mstinst.FieldInstIsActive:
		return m.OldInstIsActive(ctx)
	case mstinst.FieldInstStatus:
		return m.OldInstStatus(ctx)
	case mstinst.FieldInstTimeZone:
		return m.OldInstTimeZone(ctx)
	case mstinst.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case mstinst.FieldTestID:
		return m.OldTestID(ctx)
	}
	return nil, fmt.Errorf("unknown MstInst field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MstInstMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mstinst.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case mstinst.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case mstinst.FieldInstCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstCode(v)
		return nil
	case mstinst.FieldInstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstName(v)
		return nil
	case mstinst.FieldInstShortName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstShortName(v)
		return nil
	case mstinst.FieldInstAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstAddress(v)
		return nil
	case mstinst.FieldInstPlace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstPlace(v)
		return nil
	case mstinst.FieldInstState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstState(v)
		return nil
	case mstinst.FieldInstPin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstPin(v)
		return nil
	case mstinst.FieldInstContactPerson:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstContactPerson(v)
		return nil
	case mstinst.FieldInstPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstPhone(v)
		return nil
	case mstinst.FieldInstEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstEmail(v)
		return nil
	case mstinst.FieldInstMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstMobile(v)
		return nil
	case mstinst.FieldInstURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstURL(v)
		return nil
	case mstinst.FieldInstBanner1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstBanner1(v)
		return nil
	case mstinst.FieldInstBanner2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstBanner2(v)
		return nil
	case mstinst.FieldInstLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstLogoURL(v)
		return nil
	case mstinst.FieldInstIsActive:
		v, ok := value.(customtypes.IsActive)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstIsActive(v)
		return nil
	case mstinst.FieldInstStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstStatus(v)
		return nil
	case mstinst.FieldInstTimeZone:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstTimeZone(v)
		return nil
	case mstinst.FieldCustomerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case mstinst.FieldTestID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestID(v)
		return nil
	}
	return fmt.Errorf("unknown MstInst field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MstInstMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MstInstMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MstInstMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MstInst numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MstInstMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MstInstMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MstInstMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MstInst nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MstInstMutation) ResetField(name string) error {
	switch name {
	case mstinst.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case mstinst.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case mstinst.FieldInstCode:
		m.ResetInstCode()
		return nil
	case mstinst.FieldInstName:
		m.ResetInstName()
		return nil
	case mstinst.FieldInstShortName:
		m.ResetInstShortName()
		return nil
	case mstinst.FieldInstAddress:
		m.ResetInstAddress()
		return nil
	case mstinst.FieldInstPlace:
		m.ResetInstPlace()
		return nil
	case mstinst.FieldInstState:
		m.ResetInstState()
		return nil
	case mstinst.FieldInstPin:
		m.ResetInstPin()
		return nil
	case mstinst.FieldInstContactPerson:
		m.ResetInstContactPerson()
		return nil
	case mstinst.FieldInstPhone:
		m.ResetInstPhone()
		return nil
	case mstinst.FieldInstEmail:
		m.ResetInstEmail()
		return nil
	case mstinst.FieldInstMobile:
		m.ResetInstMobile()
		return nil
	case mstinst.FieldInstURL:
		m.ResetInstURL()
		return nil
	case mstinst.FieldInstBanner1:
		m.ResetInstBanner1()
		return nil
	case mstinst.FieldInstBanner2:
		m.ResetInstBanner2()
		return nil
	case mstinst.FieldInstLogoURL:
		m.ResetInstLogoURL()
		return nil
	case mstinst.FieldInstIsActive:
		m.ResetInstIsActive()
		return nil
	case mstinst.FieldInstStatus:
		m.ResetInstStatus()
		return nil
	case mstinst.FieldInstTimeZone:
		m.ResetInstTimeZone()
		return nil
	case mstinst.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case mstinst.FieldTestID:
		m.ResetTestID()
		return nil
	}
	return fmt.Errorf("unknown MstInst field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MstInstMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._InstfromCust != nil {
		edges = append(edges, mstinst.EdgeInstfromCust)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MstInstMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mstinst.EdgeInstfromCust:
		if id := m._InstfromCust; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MstInstMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MstInstMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MstInstMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_InstfromCust {
		edges = append(edges, mstinst.EdgeInstfromCust)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MstInstMutation) EdgeCleared(name string) bool {
	switch name {
	case mstinst.EdgeInstfromCust:
		return m.cleared_InstfromCust
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MstInstMutation) ClearEdge(name string) error {
	switch name {
	case mstinst.EdgeInstfromCust:
		m.ClearInstfromCust()
		return nil
	}
	return fmt.Errorf("unknown MstInst unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MstInstMutation) ResetEdge(name string) error {
	switch name {
	case mstinst.EdgeInstfromCust:
		m.ResetInstfromCust()
		return nil
	}
	return fmt.Errorf("unknown MstInst edge %s", name)
}

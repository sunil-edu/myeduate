// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"myeduate/ent/authparent"
	"myeduate/ent/authstaff"
	"myeduate/ent/msgchannelmessage"
	"myeduate/ent/mstcustomer"
	"myeduate/ent/mstinst"
	"myeduate/ent/mststudent"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/arsmn/fastgql/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// AuthParentEdge is the edge representation of AuthParent.
type AuthParentEdge struct {
	Node   *AuthParent `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AuthParentConnection is the connection containing edges to AuthParent.
type AuthParentConnection struct {
	Edges      []*AuthParentEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// AuthParentPaginateOption enables pagination customization.
type AuthParentPaginateOption func(*authParentPager) error

// WithAuthParentOrder configures pagination ordering.
func WithAuthParentOrder(order *AuthParentOrder) AuthParentPaginateOption {
	if order == nil {
		order = DefaultAuthParentOrder
	}
	o := *order
	return func(pager *authParentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAuthParentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAuthParentFilter configures pagination filter.
func WithAuthParentFilter(filter func(*AuthParentQuery) (*AuthParentQuery, error)) AuthParentPaginateOption {
	return func(pager *authParentPager) error {
		if filter == nil {
			return errors.New("AuthParentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type authParentPager struct {
	order  *AuthParentOrder
	filter func(*AuthParentQuery) (*AuthParentQuery, error)
}

func newAuthParentPager(opts []AuthParentPaginateOption) (*authParentPager, error) {
	pager := &authParentPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAuthParentOrder
	}
	return pager, nil
}

func (p *authParentPager) applyFilter(query *AuthParentQuery) (*AuthParentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *authParentPager) toCursor(ap *AuthParent) Cursor {
	return p.order.Field.toCursor(ap)
}

func (p *authParentPager) applyCursors(query *AuthParentQuery, after, before *Cursor) *AuthParentQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAuthParentOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *authParentPager) applyOrder(query *AuthParentQuery, reverse bool) *AuthParentQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAuthParentOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAuthParentOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to AuthParent.
func (ap *AuthParentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AuthParentPaginateOption,
) (*AuthParentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAuthParentPager(opts)
	if err != nil {
		return nil, err
	}

	if ap, err = pager.applyFilter(ap); err != nil {
		return nil, err
	}

	conn := &AuthParentConnection{Edges: []*AuthParentEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ap.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ap.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ap = pager.applyCursors(ap, after, before)
	ap = pager.applyOrder(ap, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ap = ap.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ap = ap.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ap.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *AuthParent
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AuthParent {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AuthParent {
			return nodes[i]
		}
	}

	conn.Edges = make([]*AuthParentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &AuthParentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// AuthParentOrderField defines the ordering field of AuthParent.
type AuthParentOrderField struct {
	field    string
	toCursor func(*AuthParent) Cursor
}

// AuthParentOrder defines the ordering of AuthParent.
type AuthParentOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AuthParentOrderField `json:"field"`
}

// DefaultAuthParentOrder is the default ordering of AuthParent.
var DefaultAuthParentOrder = &AuthParentOrder{
	Direction: OrderDirectionAsc,
	Field: &AuthParentOrderField{
		field: authparent.FieldID,
		toCursor: func(ap *AuthParent) Cursor {
			return Cursor{ID: ap.ID}
		},
	},
}

// ToEdge converts AuthParent into AuthParentEdge.
func (ap *AuthParent) ToEdge(order *AuthParentOrder) *AuthParentEdge {
	if order == nil {
		order = DefaultAuthParentOrder
	}
	return &AuthParentEdge{
		Node:   ap,
		Cursor: order.Field.toCursor(ap),
	}
}

// AuthStaffEdge is the edge representation of AuthStaff.
type AuthStaffEdge struct {
	Node   *AuthStaff `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// AuthStaffConnection is the connection containing edges to AuthStaff.
type AuthStaffConnection struct {
	Edges      []*AuthStaffEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

// AuthStaffPaginateOption enables pagination customization.
type AuthStaffPaginateOption func(*authStaffPager) error

// WithAuthStaffOrder configures pagination ordering.
func WithAuthStaffOrder(order *AuthStaffOrder) AuthStaffPaginateOption {
	if order == nil {
		order = DefaultAuthStaffOrder
	}
	o := *order
	return func(pager *authStaffPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAuthStaffOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAuthStaffFilter configures pagination filter.
func WithAuthStaffFilter(filter func(*AuthStaffQuery) (*AuthStaffQuery, error)) AuthStaffPaginateOption {
	return func(pager *authStaffPager) error {
		if filter == nil {
			return errors.New("AuthStaffQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type authStaffPager struct {
	order  *AuthStaffOrder
	filter func(*AuthStaffQuery) (*AuthStaffQuery, error)
}

func newAuthStaffPager(opts []AuthStaffPaginateOption) (*authStaffPager, error) {
	pager := &authStaffPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAuthStaffOrder
	}
	return pager, nil
}

func (p *authStaffPager) applyFilter(query *AuthStaffQuery) (*AuthStaffQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *authStaffPager) toCursor(as *AuthStaff) Cursor {
	return p.order.Field.toCursor(as)
}

func (p *authStaffPager) applyCursors(query *AuthStaffQuery, after, before *Cursor) *AuthStaffQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAuthStaffOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *authStaffPager) applyOrder(query *AuthStaffQuery, reverse bool) *AuthStaffQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAuthStaffOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAuthStaffOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to AuthStaff.
func (as *AuthStaffQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AuthStaffPaginateOption,
) (*AuthStaffConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAuthStaffPager(opts)
	if err != nil {
		return nil, err
	}

	if as, err = pager.applyFilter(as); err != nil {
		return nil, err
	}

	conn := &AuthStaffConnection{Edges: []*AuthStaffEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := as.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := as.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	as = pager.applyCursors(as, after, before)
	as = pager.applyOrder(as, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		as = as.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		as = as.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := as.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *AuthStaff
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AuthStaff {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AuthStaff {
			return nodes[i]
		}
	}

	conn.Edges = make([]*AuthStaffEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &AuthStaffEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// AuthStaffOrderField defines the ordering field of AuthStaff.
type AuthStaffOrderField struct {
	field    string
	toCursor func(*AuthStaff) Cursor
}

// AuthStaffOrder defines the ordering of AuthStaff.
type AuthStaffOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *AuthStaffOrderField `json:"field"`
}

// DefaultAuthStaffOrder is the default ordering of AuthStaff.
var DefaultAuthStaffOrder = &AuthStaffOrder{
	Direction: OrderDirectionAsc,
	Field: &AuthStaffOrderField{
		field: authstaff.FieldID,
		toCursor: func(as *AuthStaff) Cursor {
			return Cursor{ID: as.ID}
		},
	},
}

// ToEdge converts AuthStaff into AuthStaffEdge.
func (as *AuthStaff) ToEdge(order *AuthStaffOrder) *AuthStaffEdge {
	if order == nil {
		order = DefaultAuthStaffOrder
	}
	return &AuthStaffEdge{
		Node:   as,
		Cursor: order.Field.toCursor(as),
	}
}

// MsgChannelMessageEdge is the edge representation of MsgChannelMessage.
type MsgChannelMessageEdge struct {
	Node   *MsgChannelMessage `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// MsgChannelMessageConnection is the connection containing edges to MsgChannelMessage.
type MsgChannelMessageConnection struct {
	Edges      []*MsgChannelMessageEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

// MsgChannelMessagePaginateOption enables pagination customization.
type MsgChannelMessagePaginateOption func(*msgChannelMessagePager) error

// WithMsgChannelMessageOrder configures pagination ordering.
func WithMsgChannelMessageOrder(order *MsgChannelMessageOrder) MsgChannelMessagePaginateOption {
	if order == nil {
		order = DefaultMsgChannelMessageOrder
	}
	o := *order
	return func(pager *msgChannelMessagePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMsgChannelMessageOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMsgChannelMessageFilter configures pagination filter.
func WithMsgChannelMessageFilter(filter func(*MsgChannelMessageQuery) (*MsgChannelMessageQuery, error)) MsgChannelMessagePaginateOption {
	return func(pager *msgChannelMessagePager) error {
		if filter == nil {
			return errors.New("MsgChannelMessageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type msgChannelMessagePager struct {
	order  *MsgChannelMessageOrder
	filter func(*MsgChannelMessageQuery) (*MsgChannelMessageQuery, error)
}

func newMsgChannelMessagePager(opts []MsgChannelMessagePaginateOption) (*msgChannelMessagePager, error) {
	pager := &msgChannelMessagePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMsgChannelMessageOrder
	}
	return pager, nil
}

func (p *msgChannelMessagePager) applyFilter(query *MsgChannelMessageQuery) (*MsgChannelMessageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *msgChannelMessagePager) toCursor(mcm *MsgChannelMessage) Cursor {
	return p.order.Field.toCursor(mcm)
}

func (p *msgChannelMessagePager) applyCursors(query *MsgChannelMessageQuery, after, before *Cursor) *MsgChannelMessageQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultMsgChannelMessageOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *msgChannelMessagePager) applyOrder(query *MsgChannelMessageQuery, reverse bool) *MsgChannelMessageQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultMsgChannelMessageOrder.Field {
		query = query.Order(direction.orderFunc(DefaultMsgChannelMessageOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to MsgChannelMessage.
func (mcm *MsgChannelMessageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MsgChannelMessagePaginateOption,
) (*MsgChannelMessageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMsgChannelMessagePager(opts)
	if err != nil {
		return nil, err
	}

	if mcm, err = pager.applyFilter(mcm); err != nil {
		return nil, err
	}

	conn := &MsgChannelMessageConnection{Edges: []*MsgChannelMessageEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := mcm.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := mcm.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	mcm = pager.applyCursors(mcm, after, before)
	mcm = pager.applyOrder(mcm, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		mcm = mcm.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		mcm = mcm.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := mcm.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *MsgChannelMessage
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MsgChannelMessage {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MsgChannelMessage {
			return nodes[i]
		}
	}

	conn.Edges = make([]*MsgChannelMessageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &MsgChannelMessageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// MsgChannelMessageOrderFieldMsgDate orders MsgChannelMessage by msg_date.
	MsgChannelMessageOrderFieldMsgDate = &MsgChannelMessageOrderField{
		field: msgchannelmessage.FieldMsgDate,
		toCursor: func(mcm *MsgChannelMessage) Cursor {
			return Cursor{
				ID:    mcm.ID,
				Value: mcm.MsgDate,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MsgChannelMessageOrderField) String() string {
	var str string
	switch f.field {
	case msgchannelmessage.FieldMsgDate:
		str = "MSG_DATE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MsgChannelMessageOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MsgChannelMessageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MsgChannelMessageOrderField %T must be a string", v)
	}
	switch str {
	case "MSG_DATE":
		*f = *MsgChannelMessageOrderFieldMsgDate
	default:
		return fmt.Errorf("%s is not a valid MsgChannelMessageOrderField", str)
	}
	return nil
}

// MsgChannelMessageOrderField defines the ordering field of MsgChannelMessage.
type MsgChannelMessageOrderField struct {
	field    string
	toCursor func(*MsgChannelMessage) Cursor
}

// MsgChannelMessageOrder defines the ordering of MsgChannelMessage.
type MsgChannelMessageOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *MsgChannelMessageOrderField `json:"field"`
}

// DefaultMsgChannelMessageOrder is the default ordering of MsgChannelMessage.
var DefaultMsgChannelMessageOrder = &MsgChannelMessageOrder{
	Direction: OrderDirectionAsc,
	Field: &MsgChannelMessageOrderField{
		field: msgchannelmessage.FieldID,
		toCursor: func(mcm *MsgChannelMessage) Cursor {
			return Cursor{ID: mcm.ID}
		},
	},
}

// ToEdge converts MsgChannelMessage into MsgChannelMessageEdge.
func (mcm *MsgChannelMessage) ToEdge(order *MsgChannelMessageOrder) *MsgChannelMessageEdge {
	if order == nil {
		order = DefaultMsgChannelMessageOrder
	}
	return &MsgChannelMessageEdge{
		Node:   mcm,
		Cursor: order.Field.toCursor(mcm),
	}
}

// MstCustomerEdge is the edge representation of MstCustomer.
type MstCustomerEdge struct {
	Node   *MstCustomer `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// MstCustomerConnection is the connection containing edges to MstCustomer.
type MstCustomerConnection struct {
	Edges      []*MstCustomerEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

// MstCustomerPaginateOption enables pagination customization.
type MstCustomerPaginateOption func(*mstCustomerPager) error

// WithMstCustomerOrder configures pagination ordering.
func WithMstCustomerOrder(order *MstCustomerOrder) MstCustomerPaginateOption {
	if order == nil {
		order = DefaultMstCustomerOrder
	}
	o := *order
	return func(pager *mstCustomerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMstCustomerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMstCustomerFilter configures pagination filter.
func WithMstCustomerFilter(filter func(*MstCustomerQuery) (*MstCustomerQuery, error)) MstCustomerPaginateOption {
	return func(pager *mstCustomerPager) error {
		if filter == nil {
			return errors.New("MstCustomerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type mstCustomerPager struct {
	order  *MstCustomerOrder
	filter func(*MstCustomerQuery) (*MstCustomerQuery, error)
}

func newMstCustomerPager(opts []MstCustomerPaginateOption) (*mstCustomerPager, error) {
	pager := &mstCustomerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMstCustomerOrder
	}
	return pager, nil
}

func (p *mstCustomerPager) applyFilter(query *MstCustomerQuery) (*MstCustomerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *mstCustomerPager) toCursor(mc *MstCustomer) Cursor {
	return p.order.Field.toCursor(mc)
}

func (p *mstCustomerPager) applyCursors(query *MstCustomerQuery, after, before *Cursor) *MstCustomerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultMstCustomerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *mstCustomerPager) applyOrder(query *MstCustomerQuery, reverse bool) *MstCustomerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultMstCustomerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultMstCustomerOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to MstCustomer.
func (mc *MstCustomerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MstCustomerPaginateOption,
) (*MstCustomerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMstCustomerPager(opts)
	if err != nil {
		return nil, err
	}

	if mc, err = pager.applyFilter(mc); err != nil {
		return nil, err
	}

	conn := &MstCustomerConnection{Edges: []*MstCustomerEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := mc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := mc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	mc = pager.applyCursors(mc, after, before)
	mc = pager.applyOrder(mc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		mc = mc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		mc = mc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := mc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *MstCustomer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MstCustomer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MstCustomer {
			return nodes[i]
		}
	}

	conn.Edges = make([]*MstCustomerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &MstCustomerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// MstCustomerOrderFieldCustCode orders MstCustomer by cust_code.
	MstCustomerOrderFieldCustCode = &MstCustomerOrderField{
		field: mstcustomer.FieldCustCode,
		toCursor: func(mc *MstCustomer) Cursor {
			return Cursor{
				ID:    mc.ID,
				Value: mc.CustCode,
			}
		},
	}
	// MstCustomerOrderFieldCustName orders MstCustomer by cust_name.
	MstCustomerOrderFieldCustName = &MstCustomerOrderField{
		field: mstcustomer.FieldCustName,
		toCursor: func(mc *MstCustomer) Cursor {
			return Cursor{
				ID:    mc.ID,
				Value: mc.CustName,
			}
		},
	}
	// MstCustomerOrderFieldCustPlace orders MstCustomer by cust_place.
	MstCustomerOrderFieldCustPlace = &MstCustomerOrderField{
		field: mstcustomer.FieldCustPlace,
		toCursor: func(mc *MstCustomer) Cursor {
			return Cursor{
				ID:    mc.ID,
				Value: mc.CustPlace,
			}
		},
	}
	// MstCustomerOrderFieldCustContactPerson orders MstCustomer by cust_contact_person.
	MstCustomerOrderFieldCustContactPerson = &MstCustomerOrderField{
		field: mstcustomer.FieldCustContactPerson,
		toCursor: func(mc *MstCustomer) Cursor {
			return Cursor{
				ID:    mc.ID,
				Value: mc.CustContactPerson,
			}
		},
	}
	// MstCustomerOrderFieldCustPhone orders MstCustomer by cust_phone.
	MstCustomerOrderFieldCustPhone = &MstCustomerOrderField{
		field: mstcustomer.FieldCustPhone,
		toCursor: func(mc *MstCustomer) Cursor {
			return Cursor{
				ID:    mc.ID,
				Value: mc.CustPhone,
			}
		},
	}
	// MstCustomerOrderFieldCustStatus orders MstCustomer by cust_status.
	MstCustomerOrderFieldCustStatus = &MstCustomerOrderField{
		field: mstcustomer.FieldCustStatus,
		toCursor: func(mc *MstCustomer) Cursor {
			return Cursor{
				ID:    mc.ID,
				Value: mc.CustStatus,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MstCustomerOrderField) String() string {
	var str string
	switch f.field {
	case mstcustomer.FieldCustCode:
		str = "CUST_CODE"
	case mstcustomer.FieldCustName:
		str = "CUST_NAME"
	case mstcustomer.FieldCustPlace:
		str = "CUST_PLACE"
	case mstcustomer.FieldCustContactPerson:
		str = "CUST_CONTACT_PERSON"
	case mstcustomer.FieldCustPhone:
		str = "CUST_PHONE"
	case mstcustomer.FieldCustStatus:
		str = "STATUS"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MstCustomerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MstCustomerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MstCustomerOrderField %T must be a string", v)
	}
	switch str {
	case "CUST_CODE":
		*f = *MstCustomerOrderFieldCustCode
	case "CUST_NAME":
		*f = *MstCustomerOrderFieldCustName
	case "CUST_PLACE":
		*f = *MstCustomerOrderFieldCustPlace
	case "CUST_CONTACT_PERSON":
		*f = *MstCustomerOrderFieldCustContactPerson
	case "CUST_PHONE":
		*f = *MstCustomerOrderFieldCustPhone
	case "STATUS":
		*f = *MstCustomerOrderFieldCustStatus
	default:
		return fmt.Errorf("%s is not a valid MstCustomerOrderField", str)
	}
	return nil
}

// MstCustomerOrderField defines the ordering field of MstCustomer.
type MstCustomerOrderField struct {
	field    string
	toCursor func(*MstCustomer) Cursor
}

// MstCustomerOrder defines the ordering of MstCustomer.
type MstCustomerOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *MstCustomerOrderField `json:"field"`
}

// DefaultMstCustomerOrder is the default ordering of MstCustomer.
var DefaultMstCustomerOrder = &MstCustomerOrder{
	Direction: OrderDirectionAsc,
	Field: &MstCustomerOrderField{
		field: mstcustomer.FieldID,
		toCursor: func(mc *MstCustomer) Cursor {
			return Cursor{ID: mc.ID}
		},
	},
}

// ToEdge converts MstCustomer into MstCustomerEdge.
func (mc *MstCustomer) ToEdge(order *MstCustomerOrder) *MstCustomerEdge {
	if order == nil {
		order = DefaultMstCustomerOrder
	}
	return &MstCustomerEdge{
		Node:   mc,
		Cursor: order.Field.toCursor(mc),
	}
}

// MstInstEdge is the edge representation of MstInst.
type MstInstEdge struct {
	Node   *MstInst `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// MstInstConnection is the connection containing edges to MstInst.
type MstInstConnection struct {
	Edges      []*MstInstEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// MstInstPaginateOption enables pagination customization.
type MstInstPaginateOption func(*mstInstPager) error

// WithMstInstOrder configures pagination ordering.
func WithMstInstOrder(order *MstInstOrder) MstInstPaginateOption {
	if order == nil {
		order = DefaultMstInstOrder
	}
	o := *order
	return func(pager *mstInstPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMstInstOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMstInstFilter configures pagination filter.
func WithMstInstFilter(filter func(*MstInstQuery) (*MstInstQuery, error)) MstInstPaginateOption {
	return func(pager *mstInstPager) error {
		if filter == nil {
			return errors.New("MstInstQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type mstInstPager struct {
	order  *MstInstOrder
	filter func(*MstInstQuery) (*MstInstQuery, error)
}

func newMstInstPager(opts []MstInstPaginateOption) (*mstInstPager, error) {
	pager := &mstInstPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMstInstOrder
	}
	return pager, nil
}

func (p *mstInstPager) applyFilter(query *MstInstQuery) (*MstInstQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *mstInstPager) toCursor(mi *MstInst) Cursor {
	return p.order.Field.toCursor(mi)
}

func (p *mstInstPager) applyCursors(query *MstInstQuery, after, before *Cursor) *MstInstQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultMstInstOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *mstInstPager) applyOrder(query *MstInstQuery, reverse bool) *MstInstQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultMstInstOrder.Field {
		query = query.Order(direction.orderFunc(DefaultMstInstOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to MstInst.
func (mi *MstInstQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MstInstPaginateOption,
) (*MstInstConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMstInstPager(opts)
	if err != nil {
		return nil, err
	}

	if mi, err = pager.applyFilter(mi); err != nil {
		return nil, err
	}

	conn := &MstInstConnection{Edges: []*MstInstEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := mi.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := mi.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	mi = pager.applyCursors(mi, after, before)
	mi = pager.applyOrder(mi, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		mi = mi.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		mi = mi.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := mi.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *MstInst
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MstInst {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MstInst {
			return nodes[i]
		}
	}

	conn.Edges = make([]*MstInstEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &MstInstEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// MstInstOrderFieldInstCode orders MstInst by inst_code.
	MstInstOrderFieldInstCode = &MstInstOrderField{
		field: mstinst.FieldInstCode,
		toCursor: func(mi *MstInst) Cursor {
			return Cursor{
				ID:    mi.ID,
				Value: mi.InstCode,
			}
		},
	}
	// MstInstOrderFieldInstName orders MstInst by inst_name.
	MstInstOrderFieldInstName = &MstInstOrderField{
		field: mstinst.FieldInstName,
		toCursor: func(mi *MstInst) Cursor {
			return Cursor{
				ID:    mi.ID,
				Value: mi.InstName,
			}
		},
	}
	// MstInstOrderFieldInstPlace orders MstInst by inst_place.
	MstInstOrderFieldInstPlace = &MstInstOrderField{
		field: mstinst.FieldInstPlace,
		toCursor: func(mi *MstInst) Cursor {
			return Cursor{
				ID:    mi.ID,
				Value: mi.InstPlace,
			}
		},
	}
	// MstInstOrderFieldInstContactPerson orders MstInst by inst_contact_person.
	MstInstOrderFieldInstContactPerson = &MstInstOrderField{
		field: mstinst.FieldInstContactPerson,
		toCursor: func(mi *MstInst) Cursor {
			return Cursor{
				ID:    mi.ID,
				Value: mi.InstContactPerson,
			}
		},
	}
	// MstInstOrderFieldInstPhone orders MstInst by inst_phone.
	MstInstOrderFieldInstPhone = &MstInstOrderField{
		field: mstinst.FieldInstPhone,
		toCursor: func(mi *MstInst) Cursor {
			return Cursor{
				ID:    mi.ID,
				Value: mi.InstPhone,
			}
		},
	}
	// MstInstOrderFieldInstStatus orders MstInst by inst_status.
	MstInstOrderFieldInstStatus = &MstInstOrderField{
		field: mstinst.FieldInstStatus,
		toCursor: func(mi *MstInst) Cursor {
			return Cursor{
				ID:    mi.ID,
				Value: mi.InstStatus,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MstInstOrderField) String() string {
	var str string
	switch f.field {
	case mstinst.FieldInstCode:
		str = "INST_CODE"
	case mstinst.FieldInstName:
		str = "INST_NAME"
	case mstinst.FieldInstPlace:
		str = "INST_PLACE"
	case mstinst.FieldInstContactPerson:
		str = "INST_CONTACT_PERSON"
	case mstinst.FieldInstPhone:
		str = "INST_PHONE"
	case mstinst.FieldInstStatus:
		str = "INST_STATUS"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MstInstOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MstInstOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MstInstOrderField %T must be a string", v)
	}
	switch str {
	case "INST_CODE":
		*f = *MstInstOrderFieldInstCode
	case "INST_NAME":
		*f = *MstInstOrderFieldInstName
	case "INST_PLACE":
		*f = *MstInstOrderFieldInstPlace
	case "INST_CONTACT_PERSON":
		*f = *MstInstOrderFieldInstContactPerson
	case "INST_PHONE":
		*f = *MstInstOrderFieldInstPhone
	case "INST_STATUS":
		*f = *MstInstOrderFieldInstStatus
	default:
		return fmt.Errorf("%s is not a valid MstInstOrderField", str)
	}
	return nil
}

// MstInstOrderField defines the ordering field of MstInst.
type MstInstOrderField struct {
	field    string
	toCursor func(*MstInst) Cursor
}

// MstInstOrder defines the ordering of MstInst.
type MstInstOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *MstInstOrderField `json:"field"`
}

// DefaultMstInstOrder is the default ordering of MstInst.
var DefaultMstInstOrder = &MstInstOrder{
	Direction: OrderDirectionAsc,
	Field: &MstInstOrderField{
		field: mstinst.FieldID,
		toCursor: func(mi *MstInst) Cursor {
			return Cursor{ID: mi.ID}
		},
	},
}

// ToEdge converts MstInst into MstInstEdge.
func (mi *MstInst) ToEdge(order *MstInstOrder) *MstInstEdge {
	if order == nil {
		order = DefaultMstInstOrder
	}
	return &MstInstEdge{
		Node:   mi,
		Cursor: order.Field.toCursor(mi),
	}
}

// MstStudentEdge is the edge representation of MstStudent.
type MstStudentEdge struct {
	Node   *MstStudent `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// MstStudentConnection is the connection containing edges to MstStudent.
type MstStudentConnection struct {
	Edges      []*MstStudentEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// MstStudentPaginateOption enables pagination customization.
type MstStudentPaginateOption func(*mstStudentPager) error

// WithMstStudentOrder configures pagination ordering.
func WithMstStudentOrder(order *MstStudentOrder) MstStudentPaginateOption {
	if order == nil {
		order = DefaultMstStudentOrder
	}
	o := *order
	return func(pager *mstStudentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMstStudentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMstStudentFilter configures pagination filter.
func WithMstStudentFilter(filter func(*MstStudentQuery) (*MstStudentQuery, error)) MstStudentPaginateOption {
	return func(pager *mstStudentPager) error {
		if filter == nil {
			return errors.New("MstStudentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type mstStudentPager struct {
	order  *MstStudentOrder
	filter func(*MstStudentQuery) (*MstStudentQuery, error)
}

func newMstStudentPager(opts []MstStudentPaginateOption) (*mstStudentPager, error) {
	pager := &mstStudentPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMstStudentOrder
	}
	return pager, nil
}

func (p *mstStudentPager) applyFilter(query *MstStudentQuery) (*MstStudentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *mstStudentPager) toCursor(ms *MstStudent) Cursor {
	return p.order.Field.toCursor(ms)
}

func (p *mstStudentPager) applyCursors(query *MstStudentQuery, after, before *Cursor) *MstStudentQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultMstStudentOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *mstStudentPager) applyOrder(query *MstStudentQuery, reverse bool) *MstStudentQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultMstStudentOrder.Field {
		query = query.Order(direction.orderFunc(DefaultMstStudentOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to MstStudent.
func (ms *MstStudentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MstStudentPaginateOption,
) (*MstStudentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMstStudentPager(opts)
	if err != nil {
		return nil, err
	}

	if ms, err = pager.applyFilter(ms); err != nil {
		return nil, err
	}

	conn := &MstStudentConnection{Edges: []*MstStudentEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ms.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ms.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ms = pager.applyCursors(ms, after, before)
	ms = pager.applyOrder(ms, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ms = ms.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ms = ms.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ms.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *MstStudent
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MstStudent {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MstStudent {
			return nodes[i]
		}
	}

	conn.Edges = make([]*MstStudentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &MstStudentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// MstStudentOrderField defines the ordering field of MstStudent.
type MstStudentOrderField struct {
	field    string
	toCursor func(*MstStudent) Cursor
}

// MstStudentOrder defines the ordering of MstStudent.
type MstStudentOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *MstStudentOrderField `json:"field"`
}

// DefaultMstStudentOrder is the default ordering of MstStudent.
var DefaultMstStudentOrder = &MstStudentOrder{
	Direction: OrderDirectionAsc,
	Field: &MstStudentOrderField{
		field: mststudent.FieldID,
		toCursor: func(ms *MstStudent) Cursor {
			return Cursor{ID: ms.ID}
		},
	},
}

// ToEdge converts MstStudent into MstStudentEdge.
func (ms *MstStudent) ToEdge(order *MstStudentOrder) *MstStudentEdge {
	if order == nil {
		order = DefaultMstStudentOrder
	}
	return &MstStudentEdge{
		Node:   ms,
		Cursor: order.Field.toCursor(ms),
	}
}

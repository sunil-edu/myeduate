// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/msgchannelmessage"
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MsgChannelMessageUpdate is the builder for updating MsgChannelMessage entities.
type MsgChannelMessageUpdate struct {
	config
	hooks    []Hook
	mutation *MsgChannelMessageMutation
}

// Where appends a list predicates to the MsgChannelMessageUpdate builder.
func (mcmu *MsgChannelMessageUpdate) Where(ps ...predicate.MsgChannelMessage) *MsgChannelMessageUpdate {
	mcmu.mutation.Where(ps...)
	return mcmu
}

// SetUpdatedAt sets the "updated_at" field.
func (mcmu *MsgChannelMessageUpdate) SetUpdatedAt(t time.Time) *MsgChannelMessageUpdate {
	mcmu.mutation.SetUpdatedAt(t)
	return mcmu
}

// SetMsgDate sets the "msg_date" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgDate(t time.Time) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgDate(t)
	return mcmu
}

// SetNillableMsgDate sets the "msg_date" field if the given value is not nil.
func (mcmu *MsgChannelMessageUpdate) SetNillableMsgDate(t *time.Time) *MsgChannelMessageUpdate {
	if t != nil {
		mcmu.SetMsgDate(*t)
	}
	return mcmu
}

// ClearMsgDate clears the value of the "msg_date" field.
func (mcmu *MsgChannelMessageUpdate) ClearMsgDate() *MsgChannelMessageUpdate {
	mcmu.mutation.ClearMsgDate()
	return mcmu
}

// SetMsgIsExpiry sets the "msg_is_expiry" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgIsExpiry(b bool) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgIsExpiry(b)
	return mcmu
}

// SetNillableMsgIsExpiry sets the "msg_is_expiry" field if the given value is not nil.
func (mcmu *MsgChannelMessageUpdate) SetNillableMsgIsExpiry(b *bool) *MsgChannelMessageUpdate {
	if b != nil {
		mcmu.SetMsgIsExpiry(*b)
	}
	return mcmu
}

// SetMsgExpiryDate sets the "msg_expiry_date" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgExpiryDate(t time.Time) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgExpiryDate(t)
	return mcmu
}

// SetNillableMsgExpiryDate sets the "msg_expiry_date" field if the given value is not nil.
func (mcmu *MsgChannelMessageUpdate) SetNillableMsgExpiryDate(t *time.Time) *MsgChannelMessageUpdate {
	if t != nil {
		mcmu.SetMsgExpiryDate(*t)
	}
	return mcmu
}

// ClearMsgExpiryDate clears the value of the "msg_expiry_date" field.
func (mcmu *MsgChannelMessageUpdate) ClearMsgExpiryDate() *MsgChannelMessageUpdate {
	mcmu.mutation.ClearMsgExpiryDate()
	return mcmu
}

// SetMsgIsText sets the "msg_is_text" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgIsText(b bool) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgIsText(b)
	return mcmu
}

// SetNillableMsgIsText sets the "msg_is_text" field if the given value is not nil.
func (mcmu *MsgChannelMessageUpdate) SetNillableMsgIsText(b *bool) *MsgChannelMessageUpdate {
	if b != nil {
		mcmu.SetMsgIsText(*b)
	}
	return mcmu
}

// SetMsgContent sets the "msg_content" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgContent(s string) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgContent(s)
	return mcmu
}

// SetMsgMediaType sets the "msg_media_type" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgMediaType(s string) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgMediaType(s)
	return mcmu
}

// SetMsgMediaContent sets the "msg_media_content" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgMediaContent(s string) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgMediaContent(s)
	return mcmu
}

// SetMsgActive sets the "msg_active" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgActive(b bool) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgActive(b)
	return mcmu
}

// SetNillableMsgActive sets the "msg_active" field if the given value is not nil.
func (mcmu *MsgChannelMessageUpdate) SetNillableMsgActive(b *bool) *MsgChannelMessageUpdate {
	if b != nil {
		mcmu.SetMsgActive(*b)
	}
	return mcmu
}

// SetMsgIsIndividual sets the "msg_is_individual" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgIsIndividual(b bool) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgIsIndividual(b)
	return mcmu
}

// SetMsgRecvOrSent sets the "msg_recv_or_sent" field.
func (mcmu *MsgChannelMessageUpdate) SetMsgRecvOrSent(s string) *MsgChannelMessageUpdate {
	mcmu.mutation.SetMsgRecvOrSent(s)
	return mcmu
}

// Mutation returns the MsgChannelMessageMutation object of the builder.
func (mcmu *MsgChannelMessageUpdate) Mutation() *MsgChannelMessageMutation {
	return mcmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcmu *MsgChannelMessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mcmu.defaults()
	if len(mcmu.hooks) == 0 {
		affected, err = mcmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MsgChannelMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mcmu.mutation = mutation
			affected, err = mcmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mcmu.hooks) - 1; i >= 0; i-- {
			if mcmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcmu *MsgChannelMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mcmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcmu *MsgChannelMessageUpdate) Exec(ctx context.Context) error {
	_, err := mcmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcmu *MsgChannelMessageUpdate) ExecX(ctx context.Context) {
	if err := mcmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcmu *MsgChannelMessageUpdate) defaults() {
	if _, ok := mcmu.mutation.UpdatedAt(); !ok {
		v := msgchannelmessage.UpdateDefaultUpdatedAt()
		mcmu.mutation.SetUpdatedAt(v)
	}
}

func (mcmu *MsgChannelMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   msgchannelmessage.Table,
			Columns: msgchannelmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: msgchannelmessage.FieldID,
			},
		},
	}
	if ps := mcmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldUpdatedAt,
		})
	}
	if value, ok := mcmu.mutation.MsgDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldMsgDate,
		})
	}
	if mcmu.mutation.MsgDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: msgchannelmessage.FieldMsgDate,
		})
	}
	if value, ok := mcmu.mutation.MsgIsExpiry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgIsExpiry,
		})
	}
	if value, ok := mcmu.mutation.MsgExpiryDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldMsgExpiryDate,
		})
	}
	if mcmu.mutation.MsgExpiryDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: msgchannelmessage.FieldMsgExpiryDate,
		})
	}
	if value, ok := mcmu.mutation.MsgIsText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgIsText,
		})
	}
	if value, ok := mcmu.mutation.MsgContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgContent,
		})
	}
	if value, ok := mcmu.mutation.MsgMediaType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgMediaType,
		})
	}
	if value, ok := mcmu.mutation.MsgMediaContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgMediaContent,
		})
	}
	if value, ok := mcmu.mutation.MsgActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgActive,
		})
	}
	if value, ok := mcmu.mutation.MsgIsIndividual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgIsIndividual,
		})
	}
	if value, ok := mcmu.mutation.MsgRecvOrSent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgRecvOrSent,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgchannelmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MsgChannelMessageUpdateOne is the builder for updating a single MsgChannelMessage entity.
type MsgChannelMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgChannelMessageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetUpdatedAt(t time.Time) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetUpdatedAt(t)
	return mcmuo
}

// SetMsgDate sets the "msg_date" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgDate(t time.Time) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgDate(t)
	return mcmuo
}

// SetNillableMsgDate sets the "msg_date" field if the given value is not nil.
func (mcmuo *MsgChannelMessageUpdateOne) SetNillableMsgDate(t *time.Time) *MsgChannelMessageUpdateOne {
	if t != nil {
		mcmuo.SetMsgDate(*t)
	}
	return mcmuo
}

// ClearMsgDate clears the value of the "msg_date" field.
func (mcmuo *MsgChannelMessageUpdateOne) ClearMsgDate() *MsgChannelMessageUpdateOne {
	mcmuo.mutation.ClearMsgDate()
	return mcmuo
}

// SetMsgIsExpiry sets the "msg_is_expiry" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgIsExpiry(b bool) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgIsExpiry(b)
	return mcmuo
}

// SetNillableMsgIsExpiry sets the "msg_is_expiry" field if the given value is not nil.
func (mcmuo *MsgChannelMessageUpdateOne) SetNillableMsgIsExpiry(b *bool) *MsgChannelMessageUpdateOne {
	if b != nil {
		mcmuo.SetMsgIsExpiry(*b)
	}
	return mcmuo
}

// SetMsgExpiryDate sets the "msg_expiry_date" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgExpiryDate(t time.Time) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgExpiryDate(t)
	return mcmuo
}

// SetNillableMsgExpiryDate sets the "msg_expiry_date" field if the given value is not nil.
func (mcmuo *MsgChannelMessageUpdateOne) SetNillableMsgExpiryDate(t *time.Time) *MsgChannelMessageUpdateOne {
	if t != nil {
		mcmuo.SetMsgExpiryDate(*t)
	}
	return mcmuo
}

// ClearMsgExpiryDate clears the value of the "msg_expiry_date" field.
func (mcmuo *MsgChannelMessageUpdateOne) ClearMsgExpiryDate() *MsgChannelMessageUpdateOne {
	mcmuo.mutation.ClearMsgExpiryDate()
	return mcmuo
}

// SetMsgIsText sets the "msg_is_text" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgIsText(b bool) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgIsText(b)
	return mcmuo
}

// SetNillableMsgIsText sets the "msg_is_text" field if the given value is not nil.
func (mcmuo *MsgChannelMessageUpdateOne) SetNillableMsgIsText(b *bool) *MsgChannelMessageUpdateOne {
	if b != nil {
		mcmuo.SetMsgIsText(*b)
	}
	return mcmuo
}

// SetMsgContent sets the "msg_content" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgContent(s string) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgContent(s)
	return mcmuo
}

// SetMsgMediaType sets the "msg_media_type" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgMediaType(s string) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgMediaType(s)
	return mcmuo
}

// SetMsgMediaContent sets the "msg_media_content" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgMediaContent(s string) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgMediaContent(s)
	return mcmuo
}

// SetMsgActive sets the "msg_active" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgActive(b bool) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgActive(b)
	return mcmuo
}

// SetNillableMsgActive sets the "msg_active" field if the given value is not nil.
func (mcmuo *MsgChannelMessageUpdateOne) SetNillableMsgActive(b *bool) *MsgChannelMessageUpdateOne {
	if b != nil {
		mcmuo.SetMsgActive(*b)
	}
	return mcmuo
}

// SetMsgIsIndividual sets the "msg_is_individual" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgIsIndividual(b bool) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgIsIndividual(b)
	return mcmuo
}

// SetMsgRecvOrSent sets the "msg_recv_or_sent" field.
func (mcmuo *MsgChannelMessageUpdateOne) SetMsgRecvOrSent(s string) *MsgChannelMessageUpdateOne {
	mcmuo.mutation.SetMsgRecvOrSent(s)
	return mcmuo
}

// Mutation returns the MsgChannelMessageMutation object of the builder.
func (mcmuo *MsgChannelMessageUpdateOne) Mutation() *MsgChannelMessageMutation {
	return mcmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcmuo *MsgChannelMessageUpdateOne) Select(field string, fields ...string) *MsgChannelMessageUpdateOne {
	mcmuo.fields = append([]string{field}, fields...)
	return mcmuo
}

// Save executes the query and returns the updated MsgChannelMessage entity.
func (mcmuo *MsgChannelMessageUpdateOne) Save(ctx context.Context) (*MsgChannelMessage, error) {
	var (
		err  error
		node *MsgChannelMessage
	)
	mcmuo.defaults()
	if len(mcmuo.hooks) == 0 {
		node, err = mcmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MsgChannelMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mcmuo.mutation = mutation
			node, err = mcmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mcmuo.hooks) - 1; i >= 0; i-- {
			if mcmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcmuo *MsgChannelMessageUpdateOne) SaveX(ctx context.Context) *MsgChannelMessage {
	node, err := mcmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcmuo *MsgChannelMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := mcmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcmuo *MsgChannelMessageUpdateOne) ExecX(ctx context.Context) {
	if err := mcmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcmuo *MsgChannelMessageUpdateOne) defaults() {
	if _, ok := mcmuo.mutation.UpdatedAt(); !ok {
		v := msgchannelmessage.UpdateDefaultUpdatedAt()
		mcmuo.mutation.SetUpdatedAt(v)
	}
}

func (mcmuo *MsgChannelMessageUpdateOne) sqlSave(ctx context.Context) (_node *MsgChannelMessage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   msgchannelmessage.Table,
			Columns: msgchannelmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: msgchannelmessage.FieldID,
			},
		},
	}
	id, ok := mcmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MsgChannelMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mcmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msgchannelmessage.FieldID)
		for _, f := range fields {
			if !msgchannelmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msgchannelmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldUpdatedAt,
		})
	}
	if value, ok := mcmuo.mutation.MsgDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldMsgDate,
		})
	}
	if mcmuo.mutation.MsgDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: msgchannelmessage.FieldMsgDate,
		})
	}
	if value, ok := mcmuo.mutation.MsgIsExpiry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgIsExpiry,
		})
	}
	if value, ok := mcmuo.mutation.MsgExpiryDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldMsgExpiryDate,
		})
	}
	if mcmuo.mutation.MsgExpiryDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: msgchannelmessage.FieldMsgExpiryDate,
		})
	}
	if value, ok := mcmuo.mutation.MsgIsText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgIsText,
		})
	}
	if value, ok := mcmuo.mutation.MsgContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgContent,
		})
	}
	if value, ok := mcmuo.mutation.MsgMediaType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgMediaType,
		})
	}
	if value, ok := mcmuo.mutation.MsgMediaContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgMediaContent,
		})
	}
	if value, ok := mcmuo.mutation.MsgActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgActive,
		})
	}
	if value, ok := mcmuo.mutation.MsgIsIndividual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgIsIndividual,
		})
	}
	if value, ok := mcmuo.mutation.MsgRecvOrSent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgRecvOrSent,
		})
	}
	_node = &MsgChannelMessage{config: mcmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgchannelmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"myeduate/ent/customtypes"
	"time"
)

// CreateAuthParentInput represents a mutation input for creating authparents.
type CreateAuthParentInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	ParentFirstName  string
	ParentMiddleName string
	ParentLastName   string
	ParentAddress    string
	ParentPlace      string
	ParentState      string
	ParentPin        string
	ParentEmail      string
	ParentMobile     string
}

// Mutate applies the CreateAuthParentInput on the AuthParentCreate builder.
func (i *CreateAuthParentInput) Mutate(m *AuthParentCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetParentFirstName(i.ParentFirstName)
	m.SetParentMiddleName(i.ParentMiddleName)
	m.SetParentLastName(i.ParentLastName)
	m.SetParentAddress(i.ParentAddress)
	m.SetParentPlace(i.ParentPlace)
	m.SetParentState(i.ParentState)
	m.SetParentPin(i.ParentPin)
	m.SetParentEmail(i.ParentEmail)
	m.SetParentMobile(i.ParentMobile)
}

// SetInput applies the change-set in the CreateAuthParentInput on the create builder.
func (c *AuthParentCreate) SetInput(i CreateAuthParentInput) *AuthParentCreate {
	i.Mutate(c)
	return c
}

// UpdateAuthParentInput represents a mutation input for updating authparents.
type UpdateAuthParentInput struct {
	UpdatedAt        *time.Time
	ParentFirstName  *string
	ParentMiddleName *string
	ParentLastName   *string
	ParentAddress    *string
	ParentPlace      *string
	ParentState      *string
	ParentPin        *string
	ParentEmail      *string
	ParentMobile     *string
}

// Mutate applies the UpdateAuthParentInput on the AuthParentMutation.
func (i *UpdateAuthParentInput) Mutate(m *AuthParentMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.ParentFirstName; v != nil {
		m.SetParentFirstName(*v)
	}
	if v := i.ParentMiddleName; v != nil {
		m.SetParentMiddleName(*v)
	}
	if v := i.ParentLastName; v != nil {
		m.SetParentLastName(*v)
	}
	if v := i.ParentAddress; v != nil {
		m.SetParentAddress(*v)
	}
	if v := i.ParentPlace; v != nil {
		m.SetParentPlace(*v)
	}
	if v := i.ParentState; v != nil {
		m.SetParentState(*v)
	}
	if v := i.ParentPin; v != nil {
		m.SetParentPin(*v)
	}
	if v := i.ParentEmail; v != nil {
		m.SetParentEmail(*v)
	}
	if v := i.ParentMobile; v != nil {
		m.SetParentMobile(*v)
	}
}

// SetInput applies the change-set in the UpdateAuthParentInput on the update builder.
func (u *AuthParentUpdate) SetInput(i UpdateAuthParentInput) *AuthParentUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateAuthParentInput on the update-one builder.
func (u *AuthParentUpdateOne) SetInput(i UpdateAuthParentInput) *AuthParentUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateAuthStaffInput represents a mutation input for creating authstaffs.
type CreateAuthStaffInput struct {
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	StaffFirstName  string
	StaffMiddleName string
	StaffLastName   string
	StaffAddress    string
	StaffPlace      string
	StaffState      string
	StaffPin        string
	StaffEmail      string
	StaffMobile     string
}

// Mutate applies the CreateAuthStaffInput on the AuthStaffCreate builder.
func (i *CreateAuthStaffInput) Mutate(m *AuthStaffCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetStaffFirstName(i.StaffFirstName)
	m.SetStaffMiddleName(i.StaffMiddleName)
	m.SetStaffLastName(i.StaffLastName)
	m.SetStaffAddress(i.StaffAddress)
	m.SetStaffPlace(i.StaffPlace)
	m.SetStaffState(i.StaffState)
	m.SetStaffPin(i.StaffPin)
	m.SetStaffEmail(i.StaffEmail)
	m.SetStaffMobile(i.StaffMobile)
}

// SetInput applies the change-set in the CreateAuthStaffInput on the create builder.
func (c *AuthStaffCreate) SetInput(i CreateAuthStaffInput) *AuthStaffCreate {
	i.Mutate(c)
	return c
}

// UpdateAuthStaffInput represents a mutation input for updating authstaffs.
type UpdateAuthStaffInput struct {
	UpdatedAt       *time.Time
	StaffFirstName  *string
	StaffMiddleName *string
	StaffLastName   *string
	StaffAddress    *string
	StaffPlace      *string
	StaffState      *string
	StaffPin        *string
	StaffEmail      *string
	StaffMobile     *string
}

// Mutate applies the UpdateAuthStaffInput on the AuthStaffMutation.
func (i *UpdateAuthStaffInput) Mutate(m *AuthStaffMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.StaffFirstName; v != nil {
		m.SetStaffFirstName(*v)
	}
	if v := i.StaffMiddleName; v != nil {
		m.SetStaffMiddleName(*v)
	}
	if v := i.StaffLastName; v != nil {
		m.SetStaffLastName(*v)
	}
	if v := i.StaffAddress; v != nil {
		m.SetStaffAddress(*v)
	}
	if v := i.StaffPlace; v != nil {
		m.SetStaffPlace(*v)
	}
	if v := i.StaffState; v != nil {
		m.SetStaffState(*v)
	}
	if v := i.StaffPin; v != nil {
		m.SetStaffPin(*v)
	}
	if v := i.StaffEmail; v != nil {
		m.SetStaffEmail(*v)
	}
	if v := i.StaffMobile; v != nil {
		m.SetStaffMobile(*v)
	}
}

// SetInput applies the change-set in the UpdateAuthStaffInput on the update builder.
func (u *AuthStaffUpdate) SetInput(i UpdateAuthStaffInput) *AuthStaffUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateAuthStaffInput on the update-one builder.
func (u *AuthStaffUpdateOne) SetInput(i UpdateAuthStaffInput) *AuthStaffUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateMstCustomerInput represents a mutation input for creating mstcustomers.
type CreateMstCustomerInput struct {
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	CustCode          string
	CustName          string
	CustAddress       string
	CustPlace         string
	CustState         string
	CustPin           string
	CustContactPerson string
	CustPhone         string
	CustEmail         string
	CustMobile        string
	CustURL           string
	CustBanner1       string
	CustBanner2       string
	CustLogoURL       string
	CustIsActive      *customtypes.IsActive
	CustStatus        string
	CustNumInst       *int
	CustTimeZone      time.Time
	Cust2Inst         []int
}

// Mutate applies the CreateMstCustomerInput on the MstCustomerCreate builder.
func (i *CreateMstCustomerInput) Mutate(m *MstCustomerCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCustCode(i.CustCode)
	m.SetCustName(i.CustName)
	m.SetCustAddress(i.CustAddress)
	m.SetCustPlace(i.CustPlace)
	m.SetCustState(i.CustState)
	m.SetCustPin(i.CustPin)
	m.SetCustContactPerson(i.CustContactPerson)
	m.SetCustPhone(i.CustPhone)
	m.SetCustEmail(i.CustEmail)
	m.SetCustMobile(i.CustMobile)
	m.SetCustURL(i.CustURL)
	m.SetCustBanner1(i.CustBanner1)
	m.SetCustBanner2(i.CustBanner2)
	m.SetCustLogoURL(i.CustLogoURL)
	if v := i.CustIsActive; v != nil {
		m.SetCustIsActive(*v)
	}
	m.SetCustStatus(i.CustStatus)
	if v := i.CustNumInst; v != nil {
		m.SetCustNumInst(*v)
	}
	m.SetCustTimeZone(i.CustTimeZone)
	if ids := i.Cust2Inst; len(ids) > 0 {
		m.AddCust2InstIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateMstCustomerInput on the create builder.
func (c *MstCustomerCreate) SetInput(i CreateMstCustomerInput) *MstCustomerCreate {
	i.Mutate(c)
	return c
}

// UpdateMstCustomerInput represents a mutation input for updating mstcustomers.
type UpdateMstCustomerInput struct {
	UpdatedAt          *time.Time
	CustCode           *string
	CustName           *string
	CustAddress        *string
	CustPlace          *string
	CustState          *string
	CustPin            *string
	CustContactPerson  *string
	CustPhone          *string
	CustEmail          *string
	CustMobile         *string
	CustURL            *string
	CustBanner1        *string
	CustBanner2        *string
	CustLogoURL        *string
	CustIsActive       *customtypes.IsActive
	CustStatus         *string
	CustNumInst        *int
	CustTimeZone       *time.Time
	AddCust2InstIDs    []int
	RemoveCust2InstIDs []int
}

// Mutate applies the UpdateMstCustomerInput on the MstCustomerMutation.
func (i *UpdateMstCustomerInput) Mutate(m *MstCustomerMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CustCode; v != nil {
		m.SetCustCode(*v)
	}
	if v := i.CustName; v != nil {
		m.SetCustName(*v)
	}
	if v := i.CustAddress; v != nil {
		m.SetCustAddress(*v)
	}
	if v := i.CustPlace; v != nil {
		m.SetCustPlace(*v)
	}
	if v := i.CustState; v != nil {
		m.SetCustState(*v)
	}
	if v := i.CustPin; v != nil {
		m.SetCustPin(*v)
	}
	if v := i.CustContactPerson; v != nil {
		m.SetCustContactPerson(*v)
	}
	if v := i.CustPhone; v != nil {
		m.SetCustPhone(*v)
	}
	if v := i.CustEmail; v != nil {
		m.SetCustEmail(*v)
	}
	if v := i.CustMobile; v != nil {
		m.SetCustMobile(*v)
	}
	if v := i.CustURL; v != nil {
		m.SetCustURL(*v)
	}
	if v := i.CustBanner1; v != nil {
		m.SetCustBanner1(*v)
	}
	if v := i.CustBanner2; v != nil {
		m.SetCustBanner2(*v)
	}
	if v := i.CustLogoURL; v != nil {
		m.SetCustLogoURL(*v)
	}
	if v := i.CustIsActive; v != nil {
		m.SetCustIsActive(*v)
	}
	if v := i.CustStatus; v != nil {
		m.SetCustStatus(*v)
	}
	if v := i.CustNumInst; v != nil {
		m.SetCustNumInst(*v)
	}
	if v := i.CustTimeZone; v != nil {
		m.SetCustTimeZone(*v)
	}
	if ids := i.AddCust2InstIDs; len(ids) > 0 {
		m.AddCust2InstIDs(ids...)
	}
	if ids := i.RemoveCust2InstIDs; len(ids) > 0 {
		m.RemoveCust2InstIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateMstCustomerInput on the update builder.
func (u *MstCustomerUpdate) SetInput(i UpdateMstCustomerInput) *MstCustomerUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateMstCustomerInput on the update-one builder.
func (u *MstCustomerUpdateOne) SetInput(i UpdateMstCustomerInput) *MstCustomerUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateMstInstInput represents a mutation input for creating mstinsts.
type CreateMstInstInput struct {
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	InstCode          string
	InstName          string
	InstShortName     string
	InstAddress       string
	InstPlace         string
	InstState         string
	InstPin           string
	InstContactPerson string
	InstPhone         string
	InstEmail         string
	InstMobile        string
	InstURL           string
	InstBanner1       string
	InstBanner2       string
	InstLogoURL       string
	InstIsActive      *customtypes.IsActive
	InstStatus        string
	InstTimeZone      time.Time
	CustomerID        int
	InstfromCust      int
}

// Mutate applies the CreateMstInstInput on the MstInstCreate builder.
func (i *CreateMstInstInput) Mutate(m *MstInstCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetInstCode(i.InstCode)
	m.SetInstName(i.InstName)
	m.SetInstShortName(i.InstShortName)
	m.SetInstAddress(i.InstAddress)
	m.SetInstPlace(i.InstPlace)
	m.SetInstState(i.InstState)
	m.SetInstPin(i.InstPin)
	m.SetInstContactPerson(i.InstContactPerson)
	m.SetInstPhone(i.InstPhone)
	m.SetInstEmail(i.InstEmail)
	m.SetInstMobile(i.InstMobile)
	m.SetInstURL(i.InstURL)
	m.SetInstBanner1(i.InstBanner1)
	m.SetInstBanner2(i.InstBanner2)
	m.SetInstLogoURL(i.InstLogoURL)
	if v := i.InstIsActive; v != nil {
		m.SetInstIsActive(*v)
	}
	m.SetInstStatus(i.InstStatus)
	m.SetInstTimeZone(i.InstTimeZone)
	m.SetCustomerID(i.CustomerID)
	m.SetInstfromCustID(i.InstfromCust)
}

// SetInput applies the change-set in the CreateMstInstInput on the create builder.
func (c *MstInstCreate) SetInput(i CreateMstInstInput) *MstInstCreate {
	i.Mutate(c)
	return c
}

// UpdateMstInstInput represents a mutation input for updating mstinsts.
type UpdateMstInstInput struct {
	UpdatedAt         *time.Time
	InstCode          *string
	InstName          *string
	InstShortName     *string
	InstAddress       *string
	InstPlace         *string
	InstState         *string
	InstPin           *string
	InstContactPerson *string
	InstPhone         *string
	InstEmail         *string
	InstMobile        *string
	InstURL           *string
	InstBanner1       *string
	InstBanner2       *string
	InstLogoURL       *string
	InstIsActive      *customtypes.IsActive
	InstStatus        *string
	InstTimeZone      *time.Time
	CustomerID        *int
	InstfromCust      *int
	ClearInstfromCust bool
}

// Mutate applies the UpdateMstInstInput on the MstInstMutation.
func (i *UpdateMstInstInput) Mutate(m *MstInstMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.InstCode; v != nil {
		m.SetInstCode(*v)
	}
	if v := i.InstName; v != nil {
		m.SetInstName(*v)
	}
	if v := i.InstShortName; v != nil {
		m.SetInstShortName(*v)
	}
	if v := i.InstAddress; v != nil {
		m.SetInstAddress(*v)
	}
	if v := i.InstPlace; v != nil {
		m.SetInstPlace(*v)
	}
	if v := i.InstState; v != nil {
		m.SetInstState(*v)
	}
	if v := i.InstPin; v != nil {
		m.SetInstPin(*v)
	}
	if v := i.InstContactPerson; v != nil {
		m.SetInstContactPerson(*v)
	}
	if v := i.InstPhone; v != nil {
		m.SetInstPhone(*v)
	}
	if v := i.InstEmail; v != nil {
		m.SetInstEmail(*v)
	}
	if v := i.InstMobile; v != nil {
		m.SetInstMobile(*v)
	}
	if v := i.InstURL; v != nil {
		m.SetInstURL(*v)
	}
	if v := i.InstBanner1; v != nil {
		m.SetInstBanner1(*v)
	}
	if v := i.InstBanner2; v != nil {
		m.SetInstBanner2(*v)
	}
	if v := i.InstLogoURL; v != nil {
		m.SetInstLogoURL(*v)
	}
	if v := i.InstIsActive; v != nil {
		m.SetInstIsActive(*v)
	}
	if v := i.InstStatus; v != nil {
		m.SetInstStatus(*v)
	}
	if v := i.InstTimeZone; v != nil {
		m.SetInstTimeZone(*v)
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if i.ClearInstfromCust {
		m.ClearInstfromCust()
	}
	if v := i.InstfromCust; v != nil {
		m.SetInstfromCustID(*v)
	}
}

// SetInput applies the change-set in the UpdateMstInstInput on the update builder.
func (u *MstInstUpdate) SetInput(i UpdateMstInstInput) *MstInstUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateMstInstInput on the update-one builder.
func (u *MstInstUpdateOne) SetInput(i UpdateMstInstInput) *MstInstUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateMstStudentInput represents a mutation input for creating mststudents.
type CreateMstStudentInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	StdFirstName  string
	StdMiddleName string
	StdLastName   string
	StdStudying   *bool
	StdStatus     *customtypes.StdStatus
	StdSex        customtypes.Sex
	StdRegNo      string
}

// Mutate applies the CreateMstStudentInput on the MstStudentCreate builder.
func (i *CreateMstStudentInput) Mutate(m *MstStudentCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetStdFirstName(i.StdFirstName)
	m.SetStdMiddleName(i.StdMiddleName)
	m.SetStdLastName(i.StdLastName)
	if v := i.StdStudying; v != nil {
		m.SetStdStudying(*v)
	}
	if v := i.StdStatus; v != nil {
		m.SetStdStatus(*v)
	}
	m.SetStdSex(i.StdSex)
	m.SetStdRegNo(i.StdRegNo)
}

// SetInput applies the change-set in the CreateMstStudentInput on the create builder.
func (c *MstStudentCreate) SetInput(i CreateMstStudentInput) *MstStudentCreate {
	i.Mutate(c)
	return c
}

// UpdateMstStudentInput represents a mutation input for updating mststudents.
type UpdateMstStudentInput struct {
	UpdatedAt     *time.Time
	StdFirstName  *string
	StdMiddleName *string
	StdLastName   *string
	StdStudying   *bool
	StdStatus     *customtypes.StdStatus
	StdSex        *customtypes.Sex
	StdRegNo      *string
}

// Mutate applies the UpdateMstStudentInput on the MstStudentMutation.
func (i *UpdateMstStudentInput) Mutate(m *MstStudentMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.StdFirstName; v != nil {
		m.SetStdFirstName(*v)
	}
	if v := i.StdMiddleName; v != nil {
		m.SetStdMiddleName(*v)
	}
	if v := i.StdLastName; v != nil {
		m.SetStdLastName(*v)
	}
	if v := i.StdStudying; v != nil {
		m.SetStdStudying(*v)
	}
	if v := i.StdStatus; v != nil {
		m.SetStdStatus(*v)
	}
	if v := i.StdSex; v != nil {
		m.SetStdSex(*v)
	}
	if v := i.StdRegNo; v != nil {
		m.SetStdRegNo(*v)
	}
}

// SetInput applies the change-set in the UpdateMstStudentInput on the update builder.
func (u *MstStudentUpdate) SetInput(i UpdateMstStudentInput) *MstStudentUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateMstStudentInput on the update-one builder.
func (u *MstStudentUpdateOne) SetInput(i UpdateMstStudentInput) *MstStudentUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"myeduate/ent/customtypes"
	"time"

	"github.com/google/uuid"
)

// CreateMstCustomerInput represents a mutation input for creating mstcustomers.
type CreateMstCustomerInput struct {
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	CustCode          string
	CustName          string
	CustAddress       string
	CustPlace         string
	CustState         string
	CustPin           string
	CustContactPerson string
	CustPhone         string
	CustEmail         string
	CustMobile        string
	CustURL           string
	CustBanner1       string
	CustBanner2       string
	CustLogoURL       string
	CustIsActive      *customtypes.IsActive
	CustStatus        string
	CustNumInst       *int
	CustTimeZone      time.Time
	Cust2Inst         []uuid.UUID
}

// Mutate applies the CreateMstCustomerInput on the MstCustomerCreate builder.
func (i *CreateMstCustomerInput) Mutate(m *MstCustomerCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCustCode(i.CustCode)
	m.SetCustName(i.CustName)
	m.SetCustAddress(i.CustAddress)
	m.SetCustPlace(i.CustPlace)
	m.SetCustState(i.CustState)
	m.SetCustPin(i.CustPin)
	m.SetCustContactPerson(i.CustContactPerson)
	m.SetCustPhone(i.CustPhone)
	m.SetCustEmail(i.CustEmail)
	m.SetCustMobile(i.CustMobile)
	m.SetCustURL(i.CustURL)
	m.SetCustBanner1(i.CustBanner1)
	m.SetCustBanner2(i.CustBanner2)
	m.SetCustLogoURL(i.CustLogoURL)
	if v := i.CustIsActive; v != nil {
		m.SetCustIsActive(*v)
	}
	m.SetCustStatus(i.CustStatus)
	if v := i.CustNumInst; v != nil {
		m.SetCustNumInst(*v)
	}
	m.SetCustTimeZone(i.CustTimeZone)
	if ids := i.Cust2Inst; len(ids) > 0 {
		m.AddCust2InstIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateMstCustomerInput on the create builder.
func (c *MstCustomerCreate) SetInput(i CreateMstCustomerInput) *MstCustomerCreate {
	i.Mutate(c)
	return c
}

// UpdateMstCustomerInput represents a mutation input for updating mstcustomers.
type UpdateMstCustomerInput struct {
	UpdatedAt          *time.Time
	CustCode           *string
	CustName           *string
	CustAddress        *string
	CustPlace          *string
	CustState          *string
	CustPin            *string
	CustContactPerson  *string
	CustPhone          *string
	CustEmail          *string
	CustMobile         *string
	CustURL            *string
	CustBanner1        *string
	CustBanner2        *string
	CustLogoURL        *string
	CustIsActive       *customtypes.IsActive
	CustStatus         *string
	CustNumInst        *int
	CustTimeZone       *time.Time
	AddCust2InstIDs    []uuid.UUID
	RemoveCust2InstIDs []uuid.UUID
}

// Mutate applies the UpdateMstCustomerInput on the MstCustomerMutation.
func (i *UpdateMstCustomerInput) Mutate(m *MstCustomerMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CustCode; v != nil {
		m.SetCustCode(*v)
	}
	if v := i.CustName; v != nil {
		m.SetCustName(*v)
	}
	if v := i.CustAddress; v != nil {
		m.SetCustAddress(*v)
	}
	if v := i.CustPlace; v != nil {
		m.SetCustPlace(*v)
	}
	if v := i.CustState; v != nil {
		m.SetCustState(*v)
	}
	if v := i.CustPin; v != nil {
		m.SetCustPin(*v)
	}
	if v := i.CustContactPerson; v != nil {
		m.SetCustContactPerson(*v)
	}
	if v := i.CustPhone; v != nil {
		m.SetCustPhone(*v)
	}
	if v := i.CustEmail; v != nil {
		m.SetCustEmail(*v)
	}
	if v := i.CustMobile; v != nil {
		m.SetCustMobile(*v)
	}
	if v := i.CustURL; v != nil {
		m.SetCustURL(*v)
	}
	if v := i.CustBanner1; v != nil {
		m.SetCustBanner1(*v)
	}
	if v := i.CustBanner2; v != nil {
		m.SetCustBanner2(*v)
	}
	if v := i.CustLogoURL; v != nil {
		m.SetCustLogoURL(*v)
	}
	if v := i.CustIsActive; v != nil {
		m.SetCustIsActive(*v)
	}
	if v := i.CustStatus; v != nil {
		m.SetCustStatus(*v)
	}
	if v := i.CustNumInst; v != nil {
		m.SetCustNumInst(*v)
	}
	if v := i.CustTimeZone; v != nil {
		m.SetCustTimeZone(*v)
	}
	if ids := i.AddCust2InstIDs; len(ids) > 0 {
		m.AddCust2InstIDs(ids...)
	}
	if ids := i.RemoveCust2InstIDs; len(ids) > 0 {
		m.RemoveCust2InstIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateMstCustomerInput on the update builder.
func (u *MstCustomerUpdate) SetInput(i UpdateMstCustomerInput) *MstCustomerUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateMstCustomerInput on the update-one builder.
func (u *MstCustomerUpdateOne) SetInput(i UpdateMstCustomerInput) *MstCustomerUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateMstInstInput represents a mutation input for creating mstinsts.
type CreateMstInstInput struct {
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	InstCode          string
	InstName          string
	InstShortName     string
	InstAddress       string
	InstPlace         string
	InstState         string
	InstPin           string
	InstContactPerson string
	InstPhone         string
	InstEmail         string
	InstMobile        string
	InstURL           string
	InstBanner1       string
	InstBanner2       string
	InstLogoURL       string
	InstIsActive      *customtypes.IsActive
	InstStatus        string
	InstTimeZone      time.Time
	CustomerID        uuid.UUID
	TestID            uuid.UUID
	InstfromCust      uuid.UUID
}

// Mutate applies the CreateMstInstInput on the MstInstCreate builder.
func (i *CreateMstInstInput) Mutate(m *MstInstCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetInstCode(i.InstCode)
	m.SetInstName(i.InstName)
	m.SetInstShortName(i.InstShortName)
	m.SetInstAddress(i.InstAddress)
	m.SetInstPlace(i.InstPlace)
	m.SetInstState(i.InstState)
	m.SetInstPin(i.InstPin)
	m.SetInstContactPerson(i.InstContactPerson)
	m.SetInstPhone(i.InstPhone)
	m.SetInstEmail(i.InstEmail)
	m.SetInstMobile(i.InstMobile)
	m.SetInstURL(i.InstURL)
	m.SetInstBanner1(i.InstBanner1)
	m.SetInstBanner2(i.InstBanner2)
	m.SetInstLogoURL(i.InstLogoURL)
	if v := i.InstIsActive; v != nil {
		m.SetInstIsActive(*v)
	}
	m.SetInstStatus(i.InstStatus)
	m.SetInstTimeZone(i.InstTimeZone)
	m.SetCustomerID(i.CustomerID)
	m.SetTestID(i.TestID)
	m.SetInstfromCustID(i.InstfromCust)
}

// SetInput applies the change-set in the CreateMstInstInput on the create builder.
func (c *MstInstCreate) SetInput(i CreateMstInstInput) *MstInstCreate {
	i.Mutate(c)
	return c
}

// UpdateMstInstInput represents a mutation input for updating mstinsts.
type UpdateMstInstInput struct {
	UpdatedAt         *time.Time
	InstCode          *string
	InstName          *string
	InstShortName     *string
	InstAddress       *string
	InstPlace         *string
	InstState         *string
	InstPin           *string
	InstContactPerson *string
	InstPhone         *string
	InstEmail         *string
	InstMobile        *string
	InstURL           *string
	InstBanner1       *string
	InstBanner2       *string
	InstLogoURL       *string
	InstIsActive      *customtypes.IsActive
	InstStatus        *string
	InstTimeZone      *time.Time
	CustomerID        *uuid.UUID
	TestID            *uuid.UUID
	InstfromCust      *uuid.UUID
	ClearInstfromCust bool
}

// Mutate applies the UpdateMstInstInput on the MstInstMutation.
func (i *UpdateMstInstInput) Mutate(m *MstInstMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.InstCode; v != nil {
		m.SetInstCode(*v)
	}
	if v := i.InstName; v != nil {
		m.SetInstName(*v)
	}
	if v := i.InstShortName; v != nil {
		m.SetInstShortName(*v)
	}
	if v := i.InstAddress; v != nil {
		m.SetInstAddress(*v)
	}
	if v := i.InstPlace; v != nil {
		m.SetInstPlace(*v)
	}
	if v := i.InstState; v != nil {
		m.SetInstState(*v)
	}
	if v := i.InstPin; v != nil {
		m.SetInstPin(*v)
	}
	if v := i.InstContactPerson; v != nil {
		m.SetInstContactPerson(*v)
	}
	if v := i.InstPhone; v != nil {
		m.SetInstPhone(*v)
	}
	if v := i.InstEmail; v != nil {
		m.SetInstEmail(*v)
	}
	if v := i.InstMobile; v != nil {
		m.SetInstMobile(*v)
	}
	if v := i.InstURL; v != nil {
		m.SetInstURL(*v)
	}
	if v := i.InstBanner1; v != nil {
		m.SetInstBanner1(*v)
	}
	if v := i.InstBanner2; v != nil {
		m.SetInstBanner2(*v)
	}
	if v := i.InstLogoURL; v != nil {
		m.SetInstLogoURL(*v)
	}
	if v := i.InstIsActive; v != nil {
		m.SetInstIsActive(*v)
	}
	if v := i.InstStatus; v != nil {
		m.SetInstStatus(*v)
	}
	if v := i.InstTimeZone; v != nil {
		m.SetInstTimeZone(*v)
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if v := i.TestID; v != nil {
		m.SetTestID(*v)
	}
	if i.ClearInstfromCust {
		m.ClearInstfromCust()
	}
	if v := i.InstfromCust; v != nil {
		m.SetInstfromCustID(*v)
	}
}

// SetInput applies the change-set in the UpdateMstInstInput on the update builder.
func (u *MstInstUpdate) SetInput(i UpdateMstInstInput) *MstInstUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateMstInstInput on the update-one builder.
func (u *MstInstUpdateOne) SetInput(i UpdateMstInstInput) *MstInstUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

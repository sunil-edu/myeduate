// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/authparent"
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthParentUpdate is the builder for updating AuthParent entities.
type AuthParentUpdate struct {
	config
	hooks    []Hook
	mutation *AuthParentMutation
}

// Where appends a list predicates to the AuthParentUpdate builder.
func (apu *AuthParentUpdate) Where(ps ...predicate.AuthParent) *AuthParentUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *AuthParentUpdate) SetUpdatedAt(t time.Time) *AuthParentUpdate {
	apu.mutation.SetUpdatedAt(t)
	return apu
}

// SetParentFirstName sets the "parent_first_name" field.
func (apu *AuthParentUpdate) SetParentFirstName(s string) *AuthParentUpdate {
	apu.mutation.SetParentFirstName(s)
	return apu
}

// SetParentMiddleName sets the "parent_middle_name" field.
func (apu *AuthParentUpdate) SetParentMiddleName(s string) *AuthParentUpdate {
	apu.mutation.SetParentMiddleName(s)
	return apu
}

// SetParentLastName sets the "parent_last_name" field.
func (apu *AuthParentUpdate) SetParentLastName(s string) *AuthParentUpdate {
	apu.mutation.SetParentLastName(s)
	return apu
}

// SetParentAddress sets the "parent_address" field.
func (apu *AuthParentUpdate) SetParentAddress(s string) *AuthParentUpdate {
	apu.mutation.SetParentAddress(s)
	return apu
}

// SetParentPlace sets the "parent_place" field.
func (apu *AuthParentUpdate) SetParentPlace(s string) *AuthParentUpdate {
	apu.mutation.SetParentPlace(s)
	return apu
}

// SetParentState sets the "parent_state" field.
func (apu *AuthParentUpdate) SetParentState(s string) *AuthParentUpdate {
	apu.mutation.SetParentState(s)
	return apu
}

// SetParentPin sets the "parent_pin" field.
func (apu *AuthParentUpdate) SetParentPin(s string) *AuthParentUpdate {
	apu.mutation.SetParentPin(s)
	return apu
}

// SetParentEmail sets the "parent_email" field.
func (apu *AuthParentUpdate) SetParentEmail(s string) *AuthParentUpdate {
	apu.mutation.SetParentEmail(s)
	return apu
}

// SetParentMobile sets the "parent_mobile" field.
func (apu *AuthParentUpdate) SetParentMobile(s string) *AuthParentUpdate {
	apu.mutation.SetParentMobile(s)
	return apu
}

// Mutation returns the AuthParentMutation object of the builder.
func (apu *AuthParentUpdate) Mutation() *AuthParentMutation {
	return apu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AuthParentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	apu.defaults()
	if len(apu.hooks) == 0 {
		if err = apu.check(); err != nil {
			return 0, err
		}
		affected, err = apu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthParentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apu.check(); err != nil {
				return 0, err
			}
			apu.mutation = mutation
			affected, err = apu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apu.hooks) - 1; i >= 0; i-- {
			if apu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AuthParentUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AuthParentUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AuthParentUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AuthParentUpdate) defaults() {
	if _, ok := apu.mutation.UpdatedAt(); !ok {
		v := authparent.UpdateDefaultUpdatedAt()
		apu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apu *AuthParentUpdate) check() error {
	if v, ok := apu.mutation.ParentFirstName(); ok {
		if err := authparent.ParentFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "parent_first_name", err: fmt.Errorf(`ent: validator failed for field "AuthParent.parent_first_name": %w`, err)}
		}
	}
	if v, ok := apu.mutation.ParentEmail(); ok {
		if err := authparent.ParentEmailValidator(v); err != nil {
			return &ValidationError{Name: "parent_email", err: fmt.Errorf(`ent: validator failed for field "AuthParent.parent_email": %w`, err)}
		}
	}
	if v, ok := apu.mutation.ParentMobile(); ok {
		if err := authparent.ParentMobileValidator(v); err != nil {
			return &ValidationError{Name: "parent_mobile", err: fmt.Errorf(`ent: validator failed for field "AuthParent.parent_mobile": %w`, err)}
		}
	}
	return nil
}

func (apu *AuthParentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authparent.Table,
			Columns: authparent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authparent.FieldID,
			},
		},
	}
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authparent.FieldUpdatedAt,
		})
	}
	if value, ok := apu.mutation.ParentFirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentFirstName,
		})
	}
	if value, ok := apu.mutation.ParentMiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentMiddleName,
		})
	}
	if value, ok := apu.mutation.ParentLastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentLastName,
		})
	}
	if value, ok := apu.mutation.ParentAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentAddress,
		})
	}
	if value, ok := apu.mutation.ParentPlace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentPlace,
		})
	}
	if value, ok := apu.mutation.ParentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentState,
		})
	}
	if value, ok := apu.mutation.ParentPin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentPin,
		})
	}
	if value, ok := apu.mutation.ParentEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentEmail,
		})
	}
	if value, ok := apu.mutation.ParentMobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentMobile,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authparent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AuthParentUpdateOne is the builder for updating a single AuthParent entity.
type AuthParentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthParentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *AuthParentUpdateOne) SetUpdatedAt(t time.Time) *AuthParentUpdateOne {
	apuo.mutation.SetUpdatedAt(t)
	return apuo
}

// SetParentFirstName sets the "parent_first_name" field.
func (apuo *AuthParentUpdateOne) SetParentFirstName(s string) *AuthParentUpdateOne {
	apuo.mutation.SetParentFirstName(s)
	return apuo
}

// SetParentMiddleName sets the "parent_middle_name" field.
func (apuo *AuthParentUpdateOne) SetParentMiddleName(s string) *AuthParentUpdateOne {
	apuo.mutation.SetParentMiddleName(s)
	return apuo
}

// SetParentLastName sets the "parent_last_name" field.
func (apuo *AuthParentUpdateOne) SetParentLastName(s string) *AuthParentUpdateOne {
	apuo.mutation.SetParentLastName(s)
	return apuo
}

// SetParentAddress sets the "parent_address" field.
func (apuo *AuthParentUpdateOne) SetParentAddress(s string) *AuthParentUpdateOne {
	apuo.mutation.SetParentAddress(s)
	return apuo
}

// SetParentPlace sets the "parent_place" field.
func (apuo *AuthParentUpdateOne) SetParentPlace(s string) *AuthParentUpdateOne {
	apuo.mutation.SetParentPlace(s)
	return apuo
}

// SetParentState sets the "parent_state" field.
func (apuo *AuthParentUpdateOne) SetParentState(s string) *AuthParentUpdateOne {
	apuo.mutation.SetParentState(s)
	return apuo
}

// SetParentPin sets the "parent_pin" field.
func (apuo *AuthParentUpdateOne) SetParentPin(s string) *AuthParentUpdateOne {
	apuo.mutation.SetParentPin(s)
	return apuo
}

// SetParentEmail sets the "parent_email" field.
func (apuo *AuthParentUpdateOne) SetParentEmail(s string) *AuthParentUpdateOne {
	apuo.mutation.SetParentEmail(s)
	return apuo
}

// SetParentMobile sets the "parent_mobile" field.
func (apuo *AuthParentUpdateOne) SetParentMobile(s string) *AuthParentUpdateOne {
	apuo.mutation.SetParentMobile(s)
	return apuo
}

// Mutation returns the AuthParentMutation object of the builder.
func (apuo *AuthParentUpdateOne) Mutation() *AuthParentMutation {
	return apuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AuthParentUpdateOne) Select(field string, fields ...string) *AuthParentUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AuthParent entity.
func (apuo *AuthParentUpdateOne) Save(ctx context.Context) (*AuthParent, error) {
	var (
		err  error
		node *AuthParent
	)
	apuo.defaults()
	if len(apuo.hooks) == 0 {
		if err = apuo.check(); err != nil {
			return nil, err
		}
		node, err = apuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthParentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apuo.check(); err != nil {
				return nil, err
			}
			apuo.mutation = mutation
			node, err = apuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apuo.hooks) - 1; i >= 0; i-- {
			if apuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AuthParentUpdateOne) SaveX(ctx context.Context) *AuthParent {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AuthParentUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AuthParentUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AuthParentUpdateOne) defaults() {
	if _, ok := apuo.mutation.UpdatedAt(); !ok {
		v := authparent.UpdateDefaultUpdatedAt()
		apuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apuo *AuthParentUpdateOne) check() error {
	if v, ok := apuo.mutation.ParentFirstName(); ok {
		if err := authparent.ParentFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "parent_first_name", err: fmt.Errorf(`ent: validator failed for field "AuthParent.parent_first_name": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.ParentEmail(); ok {
		if err := authparent.ParentEmailValidator(v); err != nil {
			return &ValidationError{Name: "parent_email", err: fmt.Errorf(`ent: validator failed for field "AuthParent.parent_email": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.ParentMobile(); ok {
		if err := authparent.ParentMobileValidator(v); err != nil {
			return &ValidationError{Name: "parent_mobile", err: fmt.Errorf(`ent: validator failed for field "AuthParent.parent_mobile": %w`, err)}
		}
	}
	return nil
}

func (apuo *AuthParentUpdateOne) sqlSave(ctx context.Context) (_node *AuthParent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authparent.Table,
			Columns: authparent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authparent.FieldID,
			},
		},
	}
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthParent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authparent.FieldID)
		for _, f := range fields {
			if !authparent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authparent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authparent.FieldUpdatedAt,
		})
	}
	if value, ok := apuo.mutation.ParentFirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentFirstName,
		})
	}
	if value, ok := apuo.mutation.ParentMiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentMiddleName,
		})
	}
	if value, ok := apuo.mutation.ParentLastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentLastName,
		})
	}
	if value, ok := apuo.mutation.ParentAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentAddress,
		})
	}
	if value, ok := apuo.mutation.ParentPlace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentPlace,
		})
	}
	if value, ok := apuo.mutation.ParentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentState,
		})
	}
	if value, ok := apuo.mutation.ParentPin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentPin,
		})
	}
	if value, ok := apuo.mutation.ParentEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentEmail,
		})
	}
	if value, ok := apuo.mutation.ParentMobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authparent.FieldParentMobile,
		})
	}
	_node = &AuthParent{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authparent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

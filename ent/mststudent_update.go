// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/customtypes"
	"myeduate/ent/mststudent"
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MstStudentUpdate is the builder for updating MstStudent entities.
type MstStudentUpdate struct {
	config
	hooks    []Hook
	mutation *MstStudentMutation
}

// Where appends a list predicates to the MstStudentUpdate builder.
func (msu *MstStudentUpdate) Where(ps ...predicate.MstStudent) *MstStudentUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetUpdatedAt sets the "updated_at" field.
func (msu *MstStudentUpdate) SetUpdatedAt(t time.Time) *MstStudentUpdate {
	msu.mutation.SetUpdatedAt(t)
	return msu
}

// SetStdFirstName sets the "std_first_name" field.
func (msu *MstStudentUpdate) SetStdFirstName(s string) *MstStudentUpdate {
	msu.mutation.SetStdFirstName(s)
	return msu
}

// SetStdMiddleName sets the "std_middle_name" field.
func (msu *MstStudentUpdate) SetStdMiddleName(s string) *MstStudentUpdate {
	msu.mutation.SetStdMiddleName(s)
	return msu
}

// SetStdLastName sets the "std_last_name" field.
func (msu *MstStudentUpdate) SetStdLastName(s string) *MstStudentUpdate {
	msu.mutation.SetStdLastName(s)
	return msu
}

// SetStdStudying sets the "std_studying" field.
func (msu *MstStudentUpdate) SetStdStudying(b bool) *MstStudentUpdate {
	msu.mutation.SetStdStudying(b)
	return msu
}

// SetNillableStdStudying sets the "std_studying" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdStudying(b *bool) *MstStudentUpdate {
	if b != nil {
		msu.SetStdStudying(*b)
	}
	return msu
}

// SetStdStatus sets the "std_status" field.
func (msu *MstStudentUpdate) SetStdStatus(cs customtypes.StdStatus) *MstStudentUpdate {
	msu.mutation.SetStdStatus(cs)
	return msu
}

// SetNillableStdStatus sets the "std_status" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdStatus(cs *customtypes.StdStatus) *MstStudentUpdate {
	if cs != nil {
		msu.SetStdStatus(*cs)
	}
	return msu
}

// SetStdSex sets the "std_sex" field.
func (msu *MstStudentUpdate) SetStdSex(c customtypes.Sex) *MstStudentUpdate {
	msu.mutation.SetStdSex(c)
	return msu
}

// SetStdRegNo sets the "std_reg_no" field.
func (msu *MstStudentUpdate) SetStdRegNo(s string) *MstStudentUpdate {
	msu.mutation.SetStdRegNo(s)
	return msu
}

// Mutation returns the MstStudentMutation object of the builder.
func (msu *MstStudentUpdate) Mutation() *MstStudentMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MstStudentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	msu.defaults()
	if len(msu.hooks) == 0 {
		if err = msu.check(); err != nil {
			return 0, err
		}
		affected, err = msu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstStudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = msu.check(); err != nil {
				return 0, err
			}
			msu.mutation = mutation
			affected, err = msu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(msu.hooks) - 1; i >= 0; i-- {
			if msu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MstStudentUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MstStudentUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MstStudentUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msu *MstStudentUpdate) defaults() {
	if _, ok := msu.mutation.UpdatedAt(); !ok {
		v := mststudent.UpdateDefaultUpdatedAt()
		msu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msu *MstStudentUpdate) check() error {
	if v, ok := msu.mutation.StdFirstName(); ok {
		if err := mststudent.StdFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "std_first_name", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_first_name": %w`, err)}
		}
	}
	if v, ok := msu.mutation.StdStatus(); ok {
		if err := mststudent.StdStatusValidator(v); err != nil {
			return &ValidationError{Name: "std_status", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_status": %w`, err)}
		}
	}
	if v, ok := msu.mutation.StdSex(); ok {
		if err := mststudent.StdSexValidator(v); err != nil {
			return &ValidationError{Name: "std_sex", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_sex": %w`, err)}
		}
	}
	return nil
}

func (msu *MstStudentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mststudent.Table,
			Columns: mststudent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mststudent.FieldID,
			},
		},
	}
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldUpdatedAt,
		})
	}
	if value, ok := msu.mutation.StdFirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdFirstName,
		})
	}
	if value, ok := msu.mutation.StdMiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdMiddleName,
		})
	}
	if value, ok := msu.mutation.StdLastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdLastName,
		})
	}
	if value, ok := msu.mutation.StdStudying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mststudent.FieldStdStudying,
		})
	}
	if value, ok := msu.mutation.StdStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mststudent.FieldStdStatus,
		})
	}
	if value, ok := msu.mutation.StdSex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mststudent.FieldStdSex,
		})
	}
	if value, ok := msu.mutation.StdRegNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdRegNo,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mststudent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MstStudentUpdateOne is the builder for updating a single MstStudent entity.
type MstStudentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MstStudentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (msuo *MstStudentUpdateOne) SetUpdatedAt(t time.Time) *MstStudentUpdateOne {
	msuo.mutation.SetUpdatedAt(t)
	return msuo
}

// SetStdFirstName sets the "std_first_name" field.
func (msuo *MstStudentUpdateOne) SetStdFirstName(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdFirstName(s)
	return msuo
}

// SetStdMiddleName sets the "std_middle_name" field.
func (msuo *MstStudentUpdateOne) SetStdMiddleName(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdMiddleName(s)
	return msuo
}

// SetStdLastName sets the "std_last_name" field.
func (msuo *MstStudentUpdateOne) SetStdLastName(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdLastName(s)
	return msuo
}

// SetStdStudying sets the "std_studying" field.
func (msuo *MstStudentUpdateOne) SetStdStudying(b bool) *MstStudentUpdateOne {
	msuo.mutation.SetStdStudying(b)
	return msuo
}

// SetNillableStdStudying sets the "std_studying" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdStudying(b *bool) *MstStudentUpdateOne {
	if b != nil {
		msuo.SetStdStudying(*b)
	}
	return msuo
}

// SetStdStatus sets the "std_status" field.
func (msuo *MstStudentUpdateOne) SetStdStatus(cs customtypes.StdStatus) *MstStudentUpdateOne {
	msuo.mutation.SetStdStatus(cs)
	return msuo
}

// SetNillableStdStatus sets the "std_status" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdStatus(cs *customtypes.StdStatus) *MstStudentUpdateOne {
	if cs != nil {
		msuo.SetStdStatus(*cs)
	}
	return msuo
}

// SetStdSex sets the "std_sex" field.
func (msuo *MstStudentUpdateOne) SetStdSex(c customtypes.Sex) *MstStudentUpdateOne {
	msuo.mutation.SetStdSex(c)
	return msuo
}

// SetStdRegNo sets the "std_reg_no" field.
func (msuo *MstStudentUpdateOne) SetStdRegNo(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdRegNo(s)
	return msuo
}

// Mutation returns the MstStudentMutation object of the builder.
func (msuo *MstStudentUpdateOne) Mutation() *MstStudentMutation {
	return msuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MstStudentUpdateOne) Select(field string, fields ...string) *MstStudentUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MstStudent entity.
func (msuo *MstStudentUpdateOne) Save(ctx context.Context) (*MstStudent, error) {
	var (
		err  error
		node *MstStudent
	)
	msuo.defaults()
	if len(msuo.hooks) == 0 {
		if err = msuo.check(); err != nil {
			return nil, err
		}
		node, err = msuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstStudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = msuo.check(); err != nil {
				return nil, err
			}
			msuo.mutation = mutation
			node, err = msuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(msuo.hooks) - 1; i >= 0; i-- {
			if msuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MstStudentUpdateOne) SaveX(ctx context.Context) *MstStudent {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MstStudentUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MstStudentUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msuo *MstStudentUpdateOne) defaults() {
	if _, ok := msuo.mutation.UpdatedAt(); !ok {
		v := mststudent.UpdateDefaultUpdatedAt()
		msuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msuo *MstStudentUpdateOne) check() error {
	if v, ok := msuo.mutation.StdFirstName(); ok {
		if err := mststudent.StdFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "std_first_name", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_first_name": %w`, err)}
		}
	}
	if v, ok := msuo.mutation.StdStatus(); ok {
		if err := mststudent.StdStatusValidator(v); err != nil {
			return &ValidationError{Name: "std_status", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_status": %w`, err)}
		}
	}
	if v, ok := msuo.mutation.StdSex(); ok {
		if err := mststudent.StdSexValidator(v); err != nil {
			return &ValidationError{Name: "std_sex", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_sex": %w`, err)}
		}
	}
	return nil
}

func (msuo *MstStudentUpdateOne) sqlSave(ctx context.Context) (_node *MstStudent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mststudent.Table,
			Columns: mststudent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mststudent.FieldID,
			},
		},
	}
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MstStudent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mststudent.FieldID)
		for _, f := range fields {
			if !mststudent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mststudent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldUpdatedAt,
		})
	}
	if value, ok := msuo.mutation.StdFirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdFirstName,
		})
	}
	if value, ok := msuo.mutation.StdMiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdMiddleName,
		})
	}
	if value, ok := msuo.mutation.StdLastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdLastName,
		})
	}
	if value, ok := msuo.mutation.StdStudying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mststudent.FieldStdStudying,
		})
	}
	if value, ok := msuo.mutation.StdStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mststudent.FieldStdStatus,
		})
	}
	if value, ok := msuo.mutation.StdSex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mststudent.FieldStdSex,
		})
	}
	if value, ok := msuo.mutation.StdRegNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdRegNo,
		})
	}
	_node = &MstStudent{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mststudent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

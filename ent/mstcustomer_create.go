// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/customtypes"
	"myeduate/ent/mstcustomer"
	"myeduate/ent/mstinst"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MstCustomerCreate is the builder for creating a MstCustomer entity.
type MstCustomerCreate struct {
	config
	mutation *MstCustomerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mcc *MstCustomerCreate) SetCreatedAt(t time.Time) *MstCustomerCreate {
	mcc.mutation.SetCreatedAt(t)
	return mcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mcc *MstCustomerCreate) SetNillableCreatedAt(t *time.Time) *MstCustomerCreate {
	if t != nil {
		mcc.SetCreatedAt(*t)
	}
	return mcc
}

// SetUpdatedAt sets the "updated_at" field.
func (mcc *MstCustomerCreate) SetUpdatedAt(t time.Time) *MstCustomerCreate {
	mcc.mutation.SetUpdatedAt(t)
	return mcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mcc *MstCustomerCreate) SetNillableUpdatedAt(t *time.Time) *MstCustomerCreate {
	if t != nil {
		mcc.SetUpdatedAt(*t)
	}
	return mcc
}

// SetCustCode sets the "cust_code" field.
func (mcc *MstCustomerCreate) SetCustCode(s string) *MstCustomerCreate {
	mcc.mutation.SetCustCode(s)
	return mcc
}

// SetCustName sets the "cust_name" field.
func (mcc *MstCustomerCreate) SetCustName(s string) *MstCustomerCreate {
	mcc.mutation.SetCustName(s)
	return mcc
}

// SetCustAddress sets the "cust_address" field.
func (mcc *MstCustomerCreate) SetCustAddress(s string) *MstCustomerCreate {
	mcc.mutation.SetCustAddress(s)
	return mcc
}

// SetCustPlace sets the "cust_place" field.
func (mcc *MstCustomerCreate) SetCustPlace(s string) *MstCustomerCreate {
	mcc.mutation.SetCustPlace(s)
	return mcc
}

// SetCustState sets the "cust_state" field.
func (mcc *MstCustomerCreate) SetCustState(s string) *MstCustomerCreate {
	mcc.mutation.SetCustState(s)
	return mcc
}

// SetCustPin sets the "cust_pin" field.
func (mcc *MstCustomerCreate) SetCustPin(s string) *MstCustomerCreate {
	mcc.mutation.SetCustPin(s)
	return mcc
}

// SetCustContactPerson sets the "cust_contact_person" field.
func (mcc *MstCustomerCreate) SetCustContactPerson(s string) *MstCustomerCreate {
	mcc.mutation.SetCustContactPerson(s)
	return mcc
}

// SetCustPhone sets the "cust_phone" field.
func (mcc *MstCustomerCreate) SetCustPhone(s string) *MstCustomerCreate {
	mcc.mutation.SetCustPhone(s)
	return mcc
}

// SetCustEmail sets the "cust_email" field.
func (mcc *MstCustomerCreate) SetCustEmail(s string) *MstCustomerCreate {
	mcc.mutation.SetCustEmail(s)
	return mcc
}

// SetCustMobile sets the "cust_mobile" field.
func (mcc *MstCustomerCreate) SetCustMobile(s string) *MstCustomerCreate {
	mcc.mutation.SetCustMobile(s)
	return mcc
}

// SetCustURL sets the "cust_url" field.
func (mcc *MstCustomerCreate) SetCustURL(s string) *MstCustomerCreate {
	mcc.mutation.SetCustURL(s)
	return mcc
}

// SetCustBanner1 sets the "cust_banner_1" field.
func (mcc *MstCustomerCreate) SetCustBanner1(s string) *MstCustomerCreate {
	mcc.mutation.SetCustBanner1(s)
	return mcc
}

// SetCustBanner2 sets the "cust_banner_2" field.
func (mcc *MstCustomerCreate) SetCustBanner2(s string) *MstCustomerCreate {
	mcc.mutation.SetCustBanner2(s)
	return mcc
}

// SetCustLogoURL sets the "cust_logo_url" field.
func (mcc *MstCustomerCreate) SetCustLogoURL(s string) *MstCustomerCreate {
	mcc.mutation.SetCustLogoURL(s)
	return mcc
}

// SetCustIsActive sets the "cust_is_active" field.
func (mcc *MstCustomerCreate) SetCustIsActive(ca customtypes.IsActive) *MstCustomerCreate {
	mcc.mutation.SetCustIsActive(ca)
	return mcc
}

// SetNillableCustIsActive sets the "cust_is_active" field if the given value is not nil.
func (mcc *MstCustomerCreate) SetNillableCustIsActive(ca *customtypes.IsActive) *MstCustomerCreate {
	if ca != nil {
		mcc.SetCustIsActive(*ca)
	}
	return mcc
}

// SetCustStatus sets the "cust_status" field.
func (mcc *MstCustomerCreate) SetCustStatus(s string) *MstCustomerCreate {
	mcc.mutation.SetCustStatus(s)
	return mcc
}

// SetCustNumInst sets the "cust_num_inst" field.
func (mcc *MstCustomerCreate) SetCustNumInst(i int) *MstCustomerCreate {
	mcc.mutation.SetCustNumInst(i)
	return mcc
}

// SetNillableCustNumInst sets the "cust_num_inst" field if the given value is not nil.
func (mcc *MstCustomerCreate) SetNillableCustNumInst(i *int) *MstCustomerCreate {
	if i != nil {
		mcc.SetCustNumInst(*i)
	}
	return mcc
}

// SetCustTimeZone sets the "cust_time_zone" field.
func (mcc *MstCustomerCreate) SetCustTimeZone(t time.Time) *MstCustomerCreate {
	mcc.mutation.SetCustTimeZone(t)
	return mcc
}

// AddCust2InstIDs adds the "Cust2Inst" edge to the MstInst entity by IDs.
func (mcc *MstCustomerCreate) AddCust2InstIDs(ids ...int) *MstCustomerCreate {
	mcc.mutation.AddCust2InstIDs(ids...)
	return mcc
}

// AddCust2Inst adds the "Cust2Inst" edges to the MstInst entity.
func (mcc *MstCustomerCreate) AddCust2Inst(m ...*MstInst) *MstCustomerCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcc.AddCust2InstIDs(ids...)
}

// Mutation returns the MstCustomerMutation object of the builder.
func (mcc *MstCustomerCreate) Mutation() *MstCustomerMutation {
	return mcc.mutation
}

// Save creates the MstCustomer in the database.
func (mcc *MstCustomerCreate) Save(ctx context.Context) (*MstCustomer, error) {
	var (
		err  error
		node *MstCustomer
	)
	mcc.defaults()
	if len(mcc.hooks) == 0 {
		if err = mcc.check(); err != nil {
			return nil, err
		}
		node, err = mcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstCustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mcc.check(); err != nil {
				return nil, err
			}
			mcc.mutation = mutation
			if node, err = mcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mcc.hooks) - 1; i >= 0; i-- {
			if mcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mcc *MstCustomerCreate) SaveX(ctx context.Context) *MstCustomer {
	v, err := mcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcc *MstCustomerCreate) Exec(ctx context.Context) error {
	_, err := mcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcc *MstCustomerCreate) ExecX(ctx context.Context) {
	if err := mcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcc *MstCustomerCreate) defaults() {
	if _, ok := mcc.mutation.CreatedAt(); !ok {
		v := mstcustomer.DefaultCreatedAt()
		mcc.mutation.SetCreatedAt(v)
	}
	if _, ok := mcc.mutation.UpdatedAt(); !ok {
		v := mstcustomer.DefaultUpdatedAt()
		mcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mcc.mutation.CustIsActive(); !ok {
		v := mstcustomer.DefaultCustIsActive
		mcc.mutation.SetCustIsActive(v)
	}
	if _, ok := mcc.mutation.CustNumInst(); !ok {
		v := mstcustomer.DefaultCustNumInst
		mcc.mutation.SetCustNumInst(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcc *MstCustomerCreate) check() error {
	if _, ok := mcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MstCustomer.created_at"`)}
	}
	if _, ok := mcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MstCustomer.updated_at"`)}
	}
	if _, ok := mcc.mutation.CustCode(); !ok {
		return &ValidationError{Name: "cust_code", err: errors.New(`ent: missing required field "MstCustomer.cust_code"`)}
	}
	if _, ok := mcc.mutation.CustName(); !ok {
		return &ValidationError{Name: "cust_name", err: errors.New(`ent: missing required field "MstCustomer.cust_name"`)}
	}
	if v, ok := mcc.mutation.CustName(); ok {
		if err := mstcustomer.CustNameValidator(v); err != nil {
			return &ValidationError{Name: "cust_name", err: fmt.Errorf(`ent: validator failed for field "MstCustomer.cust_name": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustAddress(); !ok {
		return &ValidationError{Name: "cust_address", err: errors.New(`ent: missing required field "MstCustomer.cust_address"`)}
	}
	if _, ok := mcc.mutation.CustPlace(); !ok {
		return &ValidationError{Name: "cust_place", err: errors.New(`ent: missing required field "MstCustomer.cust_place"`)}
	}
	if _, ok := mcc.mutation.CustState(); !ok {
		return &ValidationError{Name: "cust_state", err: errors.New(`ent: missing required field "MstCustomer.cust_state"`)}
	}
	if _, ok := mcc.mutation.CustPin(); !ok {
		return &ValidationError{Name: "cust_pin", err: errors.New(`ent: missing required field "MstCustomer.cust_pin"`)}
	}
	if _, ok := mcc.mutation.CustContactPerson(); !ok {
		return &ValidationError{Name: "cust_contact_person", err: errors.New(`ent: missing required field "MstCustomer.cust_contact_person"`)}
	}
	if _, ok := mcc.mutation.CustPhone(); !ok {
		return &ValidationError{Name: "cust_phone", err: errors.New(`ent: missing required field "MstCustomer.cust_phone"`)}
	}
	if _, ok := mcc.mutation.CustEmail(); !ok {
		return &ValidationError{Name: "cust_email", err: errors.New(`ent: missing required field "MstCustomer.cust_email"`)}
	}
	if _, ok := mcc.mutation.CustMobile(); !ok {
		return &ValidationError{Name: "cust_mobile", err: errors.New(`ent: missing required field "MstCustomer.cust_mobile"`)}
	}
	if _, ok := mcc.mutation.CustURL(); !ok {
		return &ValidationError{Name: "cust_url", err: errors.New(`ent: missing required field "MstCustomer.cust_url"`)}
	}
	if _, ok := mcc.mutation.CustBanner1(); !ok {
		return &ValidationError{Name: "cust_banner_1", err: errors.New(`ent: missing required field "MstCustomer.cust_banner_1"`)}
	}
	if _, ok := mcc.mutation.CustBanner2(); !ok {
		return &ValidationError{Name: "cust_banner_2", err: errors.New(`ent: missing required field "MstCustomer.cust_banner_2"`)}
	}
	if _, ok := mcc.mutation.CustLogoURL(); !ok {
		return &ValidationError{Name: "cust_logo_url", err: errors.New(`ent: missing required field "MstCustomer.cust_logo_url"`)}
	}
	if _, ok := mcc.mutation.CustIsActive(); !ok {
		return &ValidationError{Name: "cust_is_active", err: errors.New(`ent: missing required field "MstCustomer.cust_is_active"`)}
	}
	if v, ok := mcc.mutation.CustIsActive(); ok {
		if err := mstcustomer.CustIsActiveValidator(v); err != nil {
			return &ValidationError{Name: "cust_is_active", err: fmt.Errorf(`ent: validator failed for field "MstCustomer.cust_is_active": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.CustStatus(); !ok {
		return &ValidationError{Name: "cust_status", err: errors.New(`ent: missing required field "MstCustomer.cust_status"`)}
	}
	if _, ok := mcc.mutation.CustNumInst(); !ok {
		return &ValidationError{Name: "cust_num_inst", err: errors.New(`ent: missing required field "MstCustomer.cust_num_inst"`)}
	}
	if _, ok := mcc.mutation.CustTimeZone(); !ok {
		return &ValidationError{Name: "cust_time_zone", err: errors.New(`ent: missing required field "MstCustomer.cust_time_zone"`)}
	}
	return nil
}

func (mcc *MstCustomerCreate) sqlSave(ctx context.Context) (*MstCustomer, error) {
	_node, _spec := mcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mcc *MstCustomerCreate) createSpec() (*MstCustomer, *sqlgraph.CreateSpec) {
	var (
		_node = &MstCustomer{config: mcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mstcustomer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mstcustomer.FieldID,
			},
		}
	)
	if value, ok := mcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mstcustomer.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mstcustomer.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mcc.mutation.CustCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustCode,
		})
		_node.CustCode = value
	}
	if value, ok := mcc.mutation.CustName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustName,
		})
		_node.CustName = value
	}
	if value, ok := mcc.mutation.CustAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustAddress,
		})
		_node.CustAddress = value
	}
	if value, ok := mcc.mutation.CustPlace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustPlace,
		})
		_node.CustPlace = value
	}
	if value, ok := mcc.mutation.CustState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustState,
		})
		_node.CustState = value
	}
	if value, ok := mcc.mutation.CustPin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustPin,
		})
		_node.CustPin = value
	}
	if value, ok := mcc.mutation.CustContactPerson(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustContactPerson,
		})
		_node.CustContactPerson = value
	}
	if value, ok := mcc.mutation.CustPhone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustPhone,
		})
		_node.CustPhone = value
	}
	if value, ok := mcc.mutation.CustEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustEmail,
		})
		_node.CustEmail = value
	}
	if value, ok := mcc.mutation.CustMobile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustMobile,
		})
		_node.CustMobile = value
	}
	if value, ok := mcc.mutation.CustURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustURL,
		})
		_node.CustURL = value
	}
	if value, ok := mcc.mutation.CustBanner1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustBanner1,
		})
		_node.CustBanner1 = value
	}
	if value, ok := mcc.mutation.CustBanner2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustBanner2,
		})
		_node.CustBanner2 = value
	}
	if value, ok := mcc.mutation.CustLogoURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustLogoURL,
		})
		_node.CustLogoURL = value
	}
	if value, ok := mcc.mutation.CustIsActive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mstcustomer.FieldCustIsActive,
		})
		_node.CustIsActive = value
	}
	if value, ok := mcc.mutation.CustStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstcustomer.FieldCustStatus,
		})
		_node.CustStatus = value
	}
	if value, ok := mcc.mutation.CustNumInst(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mstcustomer.FieldCustNumInst,
		})
		_node.CustNumInst = value
	}
	if value, ok := mcc.mutation.CustTimeZone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mstcustomer.FieldCustTimeZone,
		})
		_node.CustTimeZone = value
	}
	if nodes := mcc.mutation.Cust2InstIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mstcustomer.Cust2InstTable,
			Columns: []string{mstcustomer.Cust2InstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mstinst.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MstCustomerCreateBulk is the builder for creating many MstCustomer entities in bulk.
type MstCustomerCreateBulk struct {
	config
	builders []*MstCustomerCreate
}

// Save creates the MstCustomer entities in the database.
func (mccb *MstCustomerCreateBulk) Save(ctx context.Context) ([]*MstCustomer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mccb.builders))
	nodes := make([]*MstCustomer, len(mccb.builders))
	mutators := make([]Mutator, len(mccb.builders))
	for i := range mccb.builders {
		func(i int, root context.Context) {
			builder := mccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MstCustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mccb *MstCustomerCreateBulk) SaveX(ctx context.Context) []*MstCustomer {
	v, err := mccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mccb *MstCustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := mccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mccb *MstCustomerCreateBulk) ExecX(ctx context.Context) {
	if err := mccb.Exec(ctx); err != nil {
		panic(err)
	}
}

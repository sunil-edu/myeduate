// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"myeduate/ent/mstcustomer"
	"myeduate/ent/mstinst"
	"myeduate/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mstcustomer.Table,
			Columns: mstcustomer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mstcustomer.FieldID,
			},
		},
		Type: "MstCustomer",
		Fields: map[string]*sqlgraph.FieldSpec{
			mstcustomer.FieldCreatedAt:         {Type: field.TypeTime, Column: mstcustomer.FieldCreatedAt},
			mstcustomer.FieldUpdatedAt:         {Type: field.TypeTime, Column: mstcustomer.FieldUpdatedAt},
			mstcustomer.FieldCustCode:          {Type: field.TypeString, Column: mstcustomer.FieldCustCode},
			mstcustomer.FieldCustName:          {Type: field.TypeString, Column: mstcustomer.FieldCustName},
			mstcustomer.FieldCustAddress:       {Type: field.TypeString, Column: mstcustomer.FieldCustAddress},
			mstcustomer.FieldCustPlace:         {Type: field.TypeString, Column: mstcustomer.FieldCustPlace},
			mstcustomer.FieldCustState:         {Type: field.TypeString, Column: mstcustomer.FieldCustState},
			mstcustomer.FieldCustPin:           {Type: field.TypeString, Column: mstcustomer.FieldCustPin},
			mstcustomer.FieldCustContactPerson: {Type: field.TypeString, Column: mstcustomer.FieldCustContactPerson},
			mstcustomer.FieldCustPhone:         {Type: field.TypeString, Column: mstcustomer.FieldCustPhone},
			mstcustomer.FieldCustEmail:         {Type: field.TypeString, Column: mstcustomer.FieldCustEmail},
			mstcustomer.FieldCustMobile:        {Type: field.TypeString, Column: mstcustomer.FieldCustMobile},
			mstcustomer.FieldCustURL:           {Type: field.TypeString, Column: mstcustomer.FieldCustURL},
			mstcustomer.FieldCustBanner1:       {Type: field.TypeString, Column: mstcustomer.FieldCustBanner1},
			mstcustomer.FieldCustBanner2:       {Type: field.TypeString, Column: mstcustomer.FieldCustBanner2},
			mstcustomer.FieldCustLogoURL:       {Type: field.TypeString, Column: mstcustomer.FieldCustLogoURL},
			mstcustomer.FieldCustIsActive:      {Type: field.TypeEnum, Column: mstcustomer.FieldCustIsActive},
			mstcustomer.FieldCustStatus:        {Type: field.TypeString, Column: mstcustomer.FieldCustStatus},
			mstcustomer.FieldCustNumInst:       {Type: field.TypeInt, Column: mstcustomer.FieldCustNumInst},
			mstcustomer.FieldCustTimeZone:      {Type: field.TypeTime, Column: mstcustomer.FieldCustTimeZone},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mstinst.Table,
			Columns: mstinst.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mstinst.FieldID,
			},
		},
		Type: "MstInst",
		Fields: map[string]*sqlgraph.FieldSpec{
			mstinst.FieldCreatedAt:         {Type: field.TypeTime, Column: mstinst.FieldCreatedAt},
			mstinst.FieldUpdatedAt:         {Type: field.TypeTime, Column: mstinst.FieldUpdatedAt},
			mstinst.FieldInstCode:          {Type: field.TypeString, Column: mstinst.FieldInstCode},
			mstinst.FieldInstName:          {Type: field.TypeString, Column: mstinst.FieldInstName},
			mstinst.FieldInstShortName:     {Type: field.TypeString, Column: mstinst.FieldInstShortName},
			mstinst.FieldInstAddress:       {Type: field.TypeString, Column: mstinst.FieldInstAddress},
			mstinst.FieldInstPlace:         {Type: field.TypeString, Column: mstinst.FieldInstPlace},
			mstinst.FieldInstState:         {Type: field.TypeString, Column: mstinst.FieldInstState},
			mstinst.FieldInstPin:           {Type: field.TypeString, Column: mstinst.FieldInstPin},
			mstinst.FieldInstContactPerson: {Type: field.TypeString, Column: mstinst.FieldInstContactPerson},
			mstinst.FieldInstPhone:         {Type: field.TypeString, Column: mstinst.FieldInstPhone},
			mstinst.FieldInstEmail:         {Type: field.TypeString, Column: mstinst.FieldInstEmail},
			mstinst.FieldInstMobile:        {Type: field.TypeString, Column: mstinst.FieldInstMobile},
			mstinst.FieldInstURL:           {Type: field.TypeString, Column: mstinst.FieldInstURL},
			mstinst.FieldInstBanner1:       {Type: field.TypeString, Column: mstinst.FieldInstBanner1},
			mstinst.FieldInstBanner2:       {Type: field.TypeString, Column: mstinst.FieldInstBanner2},
			mstinst.FieldInstLogoURL:       {Type: field.TypeString, Column: mstinst.FieldInstLogoURL},
			mstinst.FieldInstIsActive:      {Type: field.TypeEnum, Column: mstinst.FieldInstIsActive},
			mstinst.FieldInstStatus:        {Type: field.TypeString, Column: mstinst.FieldInstStatus},
			mstinst.FieldInstTimeZone:      {Type: field.TypeTime, Column: mstinst.FieldInstTimeZone},
			mstinst.FieldCustomerID:        {Type: field.TypeInt, Column: mstinst.FieldCustomerID},
		},
	}
	graph.MustAddE(
		"Cust2Inst",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mstcustomer.Cust2InstTable,
			Columns: []string{mstcustomer.Cust2InstColumn},
			Bidi:    false,
		},
		"MstCustomer",
		"MstInst",
	)
	graph.MustAddE(
		"InstfromCust",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mstinst.InstfromCustTable,
			Columns: []string{mstinst.InstfromCustColumn},
			Bidi:    false,
		},
		"MstInst",
		"MstCustomer",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (mcq *MstCustomerQuery) addPredicate(pred func(s *sql.Selector)) {
	mcq.predicates = append(mcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MstCustomerQuery builder.
func (mcq *MstCustomerQuery) Filter() *MstCustomerFilter {
	return &MstCustomerFilter{mcq}
}

// addPredicate implements the predicateAdder interface.
func (m *MstCustomerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MstCustomerMutation builder.
func (m *MstCustomerMutation) Filter() *MstCustomerFilter {
	return &MstCustomerFilter{m}
}

// MstCustomerFilter provides a generic filtering capability at runtime for MstCustomerQuery.
type MstCustomerFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *MstCustomerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *MstCustomerFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(mstcustomer.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MstCustomerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(mstcustomer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MstCustomerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(mstcustomer.FieldUpdatedAt))
}

// WhereCustCode applies the entql string predicate on the cust_code field.
func (f *MstCustomerFilter) WhereCustCode(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustCode))
}

// WhereCustName applies the entql string predicate on the cust_name field.
func (f *MstCustomerFilter) WhereCustName(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustName))
}

// WhereCustAddress applies the entql string predicate on the cust_address field.
func (f *MstCustomerFilter) WhereCustAddress(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustAddress))
}

// WhereCustPlace applies the entql string predicate on the cust_place field.
func (f *MstCustomerFilter) WhereCustPlace(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustPlace))
}

// WhereCustState applies the entql string predicate on the cust_state field.
func (f *MstCustomerFilter) WhereCustState(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustState))
}

// WhereCustPin applies the entql string predicate on the cust_pin field.
func (f *MstCustomerFilter) WhereCustPin(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustPin))
}

// WhereCustContactPerson applies the entql string predicate on the cust_contact_person field.
func (f *MstCustomerFilter) WhereCustContactPerson(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustContactPerson))
}

// WhereCustPhone applies the entql string predicate on the cust_phone field.
func (f *MstCustomerFilter) WhereCustPhone(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustPhone))
}

// WhereCustEmail applies the entql string predicate on the cust_email field.
func (f *MstCustomerFilter) WhereCustEmail(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustEmail))
}

// WhereCustMobile applies the entql string predicate on the cust_mobile field.
func (f *MstCustomerFilter) WhereCustMobile(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustMobile))
}

// WhereCustURL applies the entql string predicate on the cust_url field.
func (f *MstCustomerFilter) WhereCustURL(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustURL))
}

// WhereCustBanner1 applies the entql string predicate on the cust_banner_1 field.
func (f *MstCustomerFilter) WhereCustBanner1(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustBanner1))
}

// WhereCustBanner2 applies the entql string predicate on the cust_banner_2 field.
func (f *MstCustomerFilter) WhereCustBanner2(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustBanner2))
}

// WhereCustLogoURL applies the entql string predicate on the cust_logo_url field.
func (f *MstCustomerFilter) WhereCustLogoURL(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustLogoURL))
}

// WhereCustIsActive applies the entql string predicate on the cust_is_active field.
func (f *MstCustomerFilter) WhereCustIsActive(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustIsActive))
}

// WhereCustStatus applies the entql string predicate on the cust_status field.
func (f *MstCustomerFilter) WhereCustStatus(p entql.StringP) {
	f.Where(p.Field(mstcustomer.FieldCustStatus))
}

// WhereCustNumInst applies the entql int predicate on the cust_num_inst field.
func (f *MstCustomerFilter) WhereCustNumInst(p entql.IntP) {
	f.Where(p.Field(mstcustomer.FieldCustNumInst))
}

// WhereCustTimeZone applies the entql time.Time predicate on the cust_time_zone field.
func (f *MstCustomerFilter) WhereCustTimeZone(p entql.TimeP) {
	f.Where(p.Field(mstcustomer.FieldCustTimeZone))
}

// WhereHasCust2Inst applies a predicate to check if query has an edge Cust2Inst.
func (f *MstCustomerFilter) WhereHasCust2Inst() {
	f.Where(entql.HasEdge("Cust2Inst"))
}

// WhereHasCust2InstWith applies a predicate to check if query has an edge Cust2Inst with a given conditions (other predicates).
func (f *MstCustomerFilter) WhereHasCust2InstWith(preds ...predicate.MstInst) {
	f.Where(entql.HasEdgeWith("Cust2Inst", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (miq *MstInstQuery) addPredicate(pred func(s *sql.Selector)) {
	miq.predicates = append(miq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MstInstQuery builder.
func (miq *MstInstQuery) Filter() *MstInstFilter {
	return &MstInstFilter{miq}
}

// addPredicate implements the predicateAdder interface.
func (m *MstInstMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MstInstMutation builder.
func (m *MstInstMutation) Filter() *MstInstFilter {
	return &MstInstFilter{m}
}

// MstInstFilter provides a generic filtering capability at runtime for MstInstQuery.
type MstInstFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *MstInstFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *MstInstFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(mstinst.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MstInstFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(mstinst.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MstInstFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(mstinst.FieldUpdatedAt))
}

// WhereInstCode applies the entql string predicate on the inst_code field.
func (f *MstInstFilter) WhereInstCode(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstCode))
}

// WhereInstName applies the entql string predicate on the inst_name field.
func (f *MstInstFilter) WhereInstName(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstName))
}

// WhereInstShortName applies the entql string predicate on the inst_short_name field.
func (f *MstInstFilter) WhereInstShortName(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstShortName))
}

// WhereInstAddress applies the entql string predicate on the inst_address field.
func (f *MstInstFilter) WhereInstAddress(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstAddress))
}

// WhereInstPlace applies the entql string predicate on the inst_place field.
func (f *MstInstFilter) WhereInstPlace(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstPlace))
}

// WhereInstState applies the entql string predicate on the inst_state field.
func (f *MstInstFilter) WhereInstState(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstState))
}

// WhereInstPin applies the entql string predicate on the inst_pin field.
func (f *MstInstFilter) WhereInstPin(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstPin))
}

// WhereInstContactPerson applies the entql string predicate on the inst_contact_person field.
func (f *MstInstFilter) WhereInstContactPerson(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstContactPerson))
}

// WhereInstPhone applies the entql string predicate on the inst_phone field.
func (f *MstInstFilter) WhereInstPhone(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstPhone))
}

// WhereInstEmail applies the entql string predicate on the inst_email field.
func (f *MstInstFilter) WhereInstEmail(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstEmail))
}

// WhereInstMobile applies the entql string predicate on the inst_mobile field.
func (f *MstInstFilter) WhereInstMobile(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstMobile))
}

// WhereInstURL applies the entql string predicate on the inst_url field.
func (f *MstInstFilter) WhereInstURL(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstURL))
}

// WhereInstBanner1 applies the entql string predicate on the inst_banner_1 field.
func (f *MstInstFilter) WhereInstBanner1(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstBanner1))
}

// WhereInstBanner2 applies the entql string predicate on the inst_banner_2 field.
func (f *MstInstFilter) WhereInstBanner2(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstBanner2))
}

// WhereInstLogoURL applies the entql string predicate on the inst_logo_url field.
func (f *MstInstFilter) WhereInstLogoURL(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstLogoURL))
}

// WhereInstIsActive applies the entql string predicate on the inst_is_active field.
func (f *MstInstFilter) WhereInstIsActive(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstIsActive))
}

// WhereInstStatus applies the entql string predicate on the inst_status field.
func (f *MstInstFilter) WhereInstStatus(p entql.StringP) {
	f.Where(p.Field(mstinst.FieldInstStatus))
}

// WhereInstTimeZone applies the entql time.Time predicate on the inst_time_zone field.
func (f *MstInstFilter) WhereInstTimeZone(p entql.TimeP) {
	f.Where(p.Field(mstinst.FieldInstTimeZone))
}

// WhereCustomerID applies the entql int predicate on the customer_id field.
func (f *MstInstFilter) WhereCustomerID(p entql.IntP) {
	f.Where(p.Field(mstinst.FieldCustomerID))
}

// WhereHasInstfromCust applies a predicate to check if query has an edge InstfromCust.
func (f *MstInstFilter) WhereHasInstfromCust() {
	f.Where(entql.HasEdge("InstfromCust"))
}

// WhereHasInstfromCustWith applies a predicate to check if query has an edge InstfromCust with a given conditions (other predicates).
func (f *MstInstFilter) WhereHasInstfromCustWith(preds ...predicate.MstCustomer) {
	f.Where(entql.HasEdgeWith("InstfromCust", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package mstcustomer

import (
	"myeduate/ent/customtypes"
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CustCode applies equality check predicate on the "cust_code" field. It's identical to CustCodeEQ.
func CustCode(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustCode), v))
	})
}

// CustName applies equality check predicate on the "cust_name" field. It's identical to CustNameEQ.
func CustName(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustName), v))
	})
}

// CustAddress applies equality check predicate on the "cust_address" field. It's identical to CustAddressEQ.
func CustAddress(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustAddress), v))
	})
}

// CustPlace applies equality check predicate on the "cust_place" field. It's identical to CustPlaceEQ.
func CustPlace(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustPlace), v))
	})
}

// CustState applies equality check predicate on the "cust_state" field. It's identical to CustStateEQ.
func CustState(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustState), v))
	})
}

// CustPin applies equality check predicate on the "cust_pin" field. It's identical to CustPinEQ.
func CustPin(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustPin), v))
	})
}

// CustContactPerson applies equality check predicate on the "cust_contact_person" field. It's identical to CustContactPersonEQ.
func CustContactPerson(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustContactPerson), v))
	})
}

// CustPhone applies equality check predicate on the "cust_phone" field. It's identical to CustPhoneEQ.
func CustPhone(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustPhone), v))
	})
}

// CustEmail applies equality check predicate on the "cust_email" field. It's identical to CustEmailEQ.
func CustEmail(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustEmail), v))
	})
}

// CustMobile applies equality check predicate on the "cust_mobile" field. It's identical to CustMobileEQ.
func CustMobile(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustMobile), v))
	})
}

// CustURL applies equality check predicate on the "cust_url" field. It's identical to CustURLEQ.
func CustURL(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustURL), v))
	})
}

// CustBanner1 applies equality check predicate on the "cust_banner_1" field. It's identical to CustBanner1EQ.
func CustBanner1(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustBanner1), v))
	})
}

// CustBanner2 applies equality check predicate on the "cust_banner_2" field. It's identical to CustBanner2EQ.
func CustBanner2(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustBanner2), v))
	})
}

// CustLogoURL applies equality check predicate on the "cust_logo_url" field. It's identical to CustLogoURLEQ.
func CustLogoURL(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustLogoURL), v))
	})
}

// CustStatus applies equality check predicate on the "cust_status" field. It's identical to CustStatusEQ.
func CustStatus(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustStatus), v))
	})
}

// CustNumInst applies equality check predicate on the "cust_num_inst" field. It's identical to CustNumInstEQ.
func CustNumInst(v int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustNumInst), v))
	})
}

// CustTimeZone applies equality check predicate on the "cust_time_zone" field. It's identical to CustTimeZoneEQ.
func CustTimeZone(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustTimeZone), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CustCodeEQ applies the EQ predicate on the "cust_code" field.
func CustCodeEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustCode), v))
	})
}

// CustCodeNEQ applies the NEQ predicate on the "cust_code" field.
func CustCodeNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustCode), v))
	})
}

// CustCodeIn applies the In predicate on the "cust_code" field.
func CustCodeIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustCode), v...))
	})
}

// CustCodeNotIn applies the NotIn predicate on the "cust_code" field.
func CustCodeNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustCode), v...))
	})
}

// CustCodeGT applies the GT predicate on the "cust_code" field.
func CustCodeGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustCode), v))
	})
}

// CustCodeGTE applies the GTE predicate on the "cust_code" field.
func CustCodeGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustCode), v))
	})
}

// CustCodeLT applies the LT predicate on the "cust_code" field.
func CustCodeLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustCode), v))
	})
}

// CustCodeLTE applies the LTE predicate on the "cust_code" field.
func CustCodeLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustCode), v))
	})
}

// CustCodeContains applies the Contains predicate on the "cust_code" field.
func CustCodeContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustCode), v))
	})
}

// CustCodeHasPrefix applies the HasPrefix predicate on the "cust_code" field.
func CustCodeHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustCode), v))
	})
}

// CustCodeHasSuffix applies the HasSuffix predicate on the "cust_code" field.
func CustCodeHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustCode), v))
	})
}

// CustCodeEqualFold applies the EqualFold predicate on the "cust_code" field.
func CustCodeEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustCode), v))
	})
}

// CustCodeContainsFold applies the ContainsFold predicate on the "cust_code" field.
func CustCodeContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustCode), v))
	})
}

// CustNameEQ applies the EQ predicate on the "cust_name" field.
func CustNameEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustName), v))
	})
}

// CustNameNEQ applies the NEQ predicate on the "cust_name" field.
func CustNameNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustName), v))
	})
}

// CustNameIn applies the In predicate on the "cust_name" field.
func CustNameIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustName), v...))
	})
}

// CustNameNotIn applies the NotIn predicate on the "cust_name" field.
func CustNameNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustName), v...))
	})
}

// CustNameGT applies the GT predicate on the "cust_name" field.
func CustNameGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustName), v))
	})
}

// CustNameGTE applies the GTE predicate on the "cust_name" field.
func CustNameGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustName), v))
	})
}

// CustNameLT applies the LT predicate on the "cust_name" field.
func CustNameLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustName), v))
	})
}

// CustNameLTE applies the LTE predicate on the "cust_name" field.
func CustNameLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustName), v))
	})
}

// CustNameContains applies the Contains predicate on the "cust_name" field.
func CustNameContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustName), v))
	})
}

// CustNameHasPrefix applies the HasPrefix predicate on the "cust_name" field.
func CustNameHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustName), v))
	})
}

// CustNameHasSuffix applies the HasSuffix predicate on the "cust_name" field.
func CustNameHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustName), v))
	})
}

// CustNameEqualFold applies the EqualFold predicate on the "cust_name" field.
func CustNameEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustName), v))
	})
}

// CustNameContainsFold applies the ContainsFold predicate on the "cust_name" field.
func CustNameContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustName), v))
	})
}

// CustAddressEQ applies the EQ predicate on the "cust_address" field.
func CustAddressEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustAddress), v))
	})
}

// CustAddressNEQ applies the NEQ predicate on the "cust_address" field.
func CustAddressNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustAddress), v))
	})
}

// CustAddressIn applies the In predicate on the "cust_address" field.
func CustAddressIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustAddress), v...))
	})
}

// CustAddressNotIn applies the NotIn predicate on the "cust_address" field.
func CustAddressNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustAddress), v...))
	})
}

// CustAddressGT applies the GT predicate on the "cust_address" field.
func CustAddressGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustAddress), v))
	})
}

// CustAddressGTE applies the GTE predicate on the "cust_address" field.
func CustAddressGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustAddress), v))
	})
}

// CustAddressLT applies the LT predicate on the "cust_address" field.
func CustAddressLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustAddress), v))
	})
}

// CustAddressLTE applies the LTE predicate on the "cust_address" field.
func CustAddressLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustAddress), v))
	})
}

// CustAddressContains applies the Contains predicate on the "cust_address" field.
func CustAddressContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustAddress), v))
	})
}

// CustAddressHasPrefix applies the HasPrefix predicate on the "cust_address" field.
func CustAddressHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustAddress), v))
	})
}

// CustAddressHasSuffix applies the HasSuffix predicate on the "cust_address" field.
func CustAddressHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustAddress), v))
	})
}

// CustAddressEqualFold applies the EqualFold predicate on the "cust_address" field.
func CustAddressEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustAddress), v))
	})
}

// CustAddressContainsFold applies the ContainsFold predicate on the "cust_address" field.
func CustAddressContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustAddress), v))
	})
}

// CustPlaceEQ applies the EQ predicate on the "cust_place" field.
func CustPlaceEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustPlace), v))
	})
}

// CustPlaceNEQ applies the NEQ predicate on the "cust_place" field.
func CustPlaceNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustPlace), v))
	})
}

// CustPlaceIn applies the In predicate on the "cust_place" field.
func CustPlaceIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustPlace), v...))
	})
}

// CustPlaceNotIn applies the NotIn predicate on the "cust_place" field.
func CustPlaceNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustPlace), v...))
	})
}

// CustPlaceGT applies the GT predicate on the "cust_place" field.
func CustPlaceGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustPlace), v))
	})
}

// CustPlaceGTE applies the GTE predicate on the "cust_place" field.
func CustPlaceGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustPlace), v))
	})
}

// CustPlaceLT applies the LT predicate on the "cust_place" field.
func CustPlaceLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustPlace), v))
	})
}

// CustPlaceLTE applies the LTE predicate on the "cust_place" field.
func CustPlaceLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustPlace), v))
	})
}

// CustPlaceContains applies the Contains predicate on the "cust_place" field.
func CustPlaceContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustPlace), v))
	})
}

// CustPlaceHasPrefix applies the HasPrefix predicate on the "cust_place" field.
func CustPlaceHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustPlace), v))
	})
}

// CustPlaceHasSuffix applies the HasSuffix predicate on the "cust_place" field.
func CustPlaceHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustPlace), v))
	})
}

// CustPlaceEqualFold applies the EqualFold predicate on the "cust_place" field.
func CustPlaceEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustPlace), v))
	})
}

// CustPlaceContainsFold applies the ContainsFold predicate on the "cust_place" field.
func CustPlaceContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustPlace), v))
	})
}

// CustStateEQ applies the EQ predicate on the "cust_state" field.
func CustStateEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustState), v))
	})
}

// CustStateNEQ applies the NEQ predicate on the "cust_state" field.
func CustStateNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustState), v))
	})
}

// CustStateIn applies the In predicate on the "cust_state" field.
func CustStateIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustState), v...))
	})
}

// CustStateNotIn applies the NotIn predicate on the "cust_state" field.
func CustStateNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustState), v...))
	})
}

// CustStateGT applies the GT predicate on the "cust_state" field.
func CustStateGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustState), v))
	})
}

// CustStateGTE applies the GTE predicate on the "cust_state" field.
func CustStateGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustState), v))
	})
}

// CustStateLT applies the LT predicate on the "cust_state" field.
func CustStateLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustState), v))
	})
}

// CustStateLTE applies the LTE predicate on the "cust_state" field.
func CustStateLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustState), v))
	})
}

// CustStateContains applies the Contains predicate on the "cust_state" field.
func CustStateContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustState), v))
	})
}

// CustStateHasPrefix applies the HasPrefix predicate on the "cust_state" field.
func CustStateHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustState), v))
	})
}

// CustStateHasSuffix applies the HasSuffix predicate on the "cust_state" field.
func CustStateHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustState), v))
	})
}

// CustStateEqualFold applies the EqualFold predicate on the "cust_state" field.
func CustStateEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustState), v))
	})
}

// CustStateContainsFold applies the ContainsFold predicate on the "cust_state" field.
func CustStateContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustState), v))
	})
}

// CustPinEQ applies the EQ predicate on the "cust_pin" field.
func CustPinEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustPin), v))
	})
}

// CustPinNEQ applies the NEQ predicate on the "cust_pin" field.
func CustPinNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustPin), v))
	})
}

// CustPinIn applies the In predicate on the "cust_pin" field.
func CustPinIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustPin), v...))
	})
}

// CustPinNotIn applies the NotIn predicate on the "cust_pin" field.
func CustPinNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustPin), v...))
	})
}

// CustPinGT applies the GT predicate on the "cust_pin" field.
func CustPinGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustPin), v))
	})
}

// CustPinGTE applies the GTE predicate on the "cust_pin" field.
func CustPinGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustPin), v))
	})
}

// CustPinLT applies the LT predicate on the "cust_pin" field.
func CustPinLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustPin), v))
	})
}

// CustPinLTE applies the LTE predicate on the "cust_pin" field.
func CustPinLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustPin), v))
	})
}

// CustPinContains applies the Contains predicate on the "cust_pin" field.
func CustPinContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustPin), v))
	})
}

// CustPinHasPrefix applies the HasPrefix predicate on the "cust_pin" field.
func CustPinHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustPin), v))
	})
}

// CustPinHasSuffix applies the HasSuffix predicate on the "cust_pin" field.
func CustPinHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustPin), v))
	})
}

// CustPinEqualFold applies the EqualFold predicate on the "cust_pin" field.
func CustPinEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustPin), v))
	})
}

// CustPinContainsFold applies the ContainsFold predicate on the "cust_pin" field.
func CustPinContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustPin), v))
	})
}

// CustContactPersonEQ applies the EQ predicate on the "cust_contact_person" field.
func CustContactPersonEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonNEQ applies the NEQ predicate on the "cust_contact_person" field.
func CustContactPersonNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonIn applies the In predicate on the "cust_contact_person" field.
func CustContactPersonIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustContactPerson), v...))
	})
}

// CustContactPersonNotIn applies the NotIn predicate on the "cust_contact_person" field.
func CustContactPersonNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustContactPerson), v...))
	})
}

// CustContactPersonGT applies the GT predicate on the "cust_contact_person" field.
func CustContactPersonGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonGTE applies the GTE predicate on the "cust_contact_person" field.
func CustContactPersonGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonLT applies the LT predicate on the "cust_contact_person" field.
func CustContactPersonLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonLTE applies the LTE predicate on the "cust_contact_person" field.
func CustContactPersonLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonContains applies the Contains predicate on the "cust_contact_person" field.
func CustContactPersonContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonHasPrefix applies the HasPrefix predicate on the "cust_contact_person" field.
func CustContactPersonHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonHasSuffix applies the HasSuffix predicate on the "cust_contact_person" field.
func CustContactPersonHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonEqualFold applies the EqualFold predicate on the "cust_contact_person" field.
func CustContactPersonEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustContactPerson), v))
	})
}

// CustContactPersonContainsFold applies the ContainsFold predicate on the "cust_contact_person" field.
func CustContactPersonContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustContactPerson), v))
	})
}

// CustPhoneEQ applies the EQ predicate on the "cust_phone" field.
func CustPhoneEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustPhone), v))
	})
}

// CustPhoneNEQ applies the NEQ predicate on the "cust_phone" field.
func CustPhoneNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustPhone), v))
	})
}

// CustPhoneIn applies the In predicate on the "cust_phone" field.
func CustPhoneIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustPhone), v...))
	})
}

// CustPhoneNotIn applies the NotIn predicate on the "cust_phone" field.
func CustPhoneNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustPhone), v...))
	})
}

// CustPhoneGT applies the GT predicate on the "cust_phone" field.
func CustPhoneGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustPhone), v))
	})
}

// CustPhoneGTE applies the GTE predicate on the "cust_phone" field.
func CustPhoneGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustPhone), v))
	})
}

// CustPhoneLT applies the LT predicate on the "cust_phone" field.
func CustPhoneLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustPhone), v))
	})
}

// CustPhoneLTE applies the LTE predicate on the "cust_phone" field.
func CustPhoneLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustPhone), v))
	})
}

// CustPhoneContains applies the Contains predicate on the "cust_phone" field.
func CustPhoneContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustPhone), v))
	})
}

// CustPhoneHasPrefix applies the HasPrefix predicate on the "cust_phone" field.
func CustPhoneHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustPhone), v))
	})
}

// CustPhoneHasSuffix applies the HasSuffix predicate on the "cust_phone" field.
func CustPhoneHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustPhone), v))
	})
}

// CustPhoneEqualFold applies the EqualFold predicate on the "cust_phone" field.
func CustPhoneEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustPhone), v))
	})
}

// CustPhoneContainsFold applies the ContainsFold predicate on the "cust_phone" field.
func CustPhoneContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustPhone), v))
	})
}

// CustEmailEQ applies the EQ predicate on the "cust_email" field.
func CustEmailEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustEmail), v))
	})
}

// CustEmailNEQ applies the NEQ predicate on the "cust_email" field.
func CustEmailNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustEmail), v))
	})
}

// CustEmailIn applies the In predicate on the "cust_email" field.
func CustEmailIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustEmail), v...))
	})
}

// CustEmailNotIn applies the NotIn predicate on the "cust_email" field.
func CustEmailNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustEmail), v...))
	})
}

// CustEmailGT applies the GT predicate on the "cust_email" field.
func CustEmailGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustEmail), v))
	})
}

// CustEmailGTE applies the GTE predicate on the "cust_email" field.
func CustEmailGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustEmail), v))
	})
}

// CustEmailLT applies the LT predicate on the "cust_email" field.
func CustEmailLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustEmail), v))
	})
}

// CustEmailLTE applies the LTE predicate on the "cust_email" field.
func CustEmailLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustEmail), v))
	})
}

// CustEmailContains applies the Contains predicate on the "cust_email" field.
func CustEmailContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustEmail), v))
	})
}

// CustEmailHasPrefix applies the HasPrefix predicate on the "cust_email" field.
func CustEmailHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustEmail), v))
	})
}

// CustEmailHasSuffix applies the HasSuffix predicate on the "cust_email" field.
func CustEmailHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustEmail), v))
	})
}

// CustEmailEqualFold applies the EqualFold predicate on the "cust_email" field.
func CustEmailEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustEmail), v))
	})
}

// CustEmailContainsFold applies the ContainsFold predicate on the "cust_email" field.
func CustEmailContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustEmail), v))
	})
}

// CustMobileEQ applies the EQ predicate on the "cust_mobile" field.
func CustMobileEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustMobile), v))
	})
}

// CustMobileNEQ applies the NEQ predicate on the "cust_mobile" field.
func CustMobileNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustMobile), v))
	})
}

// CustMobileIn applies the In predicate on the "cust_mobile" field.
func CustMobileIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustMobile), v...))
	})
}

// CustMobileNotIn applies the NotIn predicate on the "cust_mobile" field.
func CustMobileNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustMobile), v...))
	})
}

// CustMobileGT applies the GT predicate on the "cust_mobile" field.
func CustMobileGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustMobile), v))
	})
}

// CustMobileGTE applies the GTE predicate on the "cust_mobile" field.
func CustMobileGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustMobile), v))
	})
}

// CustMobileLT applies the LT predicate on the "cust_mobile" field.
func CustMobileLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustMobile), v))
	})
}

// CustMobileLTE applies the LTE predicate on the "cust_mobile" field.
func CustMobileLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustMobile), v))
	})
}

// CustMobileContains applies the Contains predicate on the "cust_mobile" field.
func CustMobileContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustMobile), v))
	})
}

// CustMobileHasPrefix applies the HasPrefix predicate on the "cust_mobile" field.
func CustMobileHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustMobile), v))
	})
}

// CustMobileHasSuffix applies the HasSuffix predicate on the "cust_mobile" field.
func CustMobileHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustMobile), v))
	})
}

// CustMobileEqualFold applies the EqualFold predicate on the "cust_mobile" field.
func CustMobileEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustMobile), v))
	})
}

// CustMobileContainsFold applies the ContainsFold predicate on the "cust_mobile" field.
func CustMobileContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustMobile), v))
	})
}

// CustURLEQ applies the EQ predicate on the "cust_url" field.
func CustURLEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustURL), v))
	})
}

// CustURLNEQ applies the NEQ predicate on the "cust_url" field.
func CustURLNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustURL), v))
	})
}

// CustURLIn applies the In predicate on the "cust_url" field.
func CustURLIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustURL), v...))
	})
}

// CustURLNotIn applies the NotIn predicate on the "cust_url" field.
func CustURLNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustURL), v...))
	})
}

// CustURLGT applies the GT predicate on the "cust_url" field.
func CustURLGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustURL), v))
	})
}

// CustURLGTE applies the GTE predicate on the "cust_url" field.
func CustURLGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustURL), v))
	})
}

// CustURLLT applies the LT predicate on the "cust_url" field.
func CustURLLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustURL), v))
	})
}

// CustURLLTE applies the LTE predicate on the "cust_url" field.
func CustURLLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustURL), v))
	})
}

// CustURLContains applies the Contains predicate on the "cust_url" field.
func CustURLContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustURL), v))
	})
}

// CustURLHasPrefix applies the HasPrefix predicate on the "cust_url" field.
func CustURLHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustURL), v))
	})
}

// CustURLHasSuffix applies the HasSuffix predicate on the "cust_url" field.
func CustURLHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustURL), v))
	})
}

// CustURLEqualFold applies the EqualFold predicate on the "cust_url" field.
func CustURLEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustURL), v))
	})
}

// CustURLContainsFold applies the ContainsFold predicate on the "cust_url" field.
func CustURLContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustURL), v))
	})
}

// CustBanner1EQ applies the EQ predicate on the "cust_banner_1" field.
func CustBanner1EQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1NEQ applies the NEQ predicate on the "cust_banner_1" field.
func CustBanner1NEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1In applies the In predicate on the "cust_banner_1" field.
func CustBanner1In(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustBanner1), v...))
	})
}

// CustBanner1NotIn applies the NotIn predicate on the "cust_banner_1" field.
func CustBanner1NotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustBanner1), v...))
	})
}

// CustBanner1GT applies the GT predicate on the "cust_banner_1" field.
func CustBanner1GT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1GTE applies the GTE predicate on the "cust_banner_1" field.
func CustBanner1GTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1LT applies the LT predicate on the "cust_banner_1" field.
func CustBanner1LT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1LTE applies the LTE predicate on the "cust_banner_1" field.
func CustBanner1LTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1Contains applies the Contains predicate on the "cust_banner_1" field.
func CustBanner1Contains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1HasPrefix applies the HasPrefix predicate on the "cust_banner_1" field.
func CustBanner1HasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1HasSuffix applies the HasSuffix predicate on the "cust_banner_1" field.
func CustBanner1HasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1EqualFold applies the EqualFold predicate on the "cust_banner_1" field.
func CustBanner1EqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustBanner1), v))
	})
}

// CustBanner1ContainsFold applies the ContainsFold predicate on the "cust_banner_1" field.
func CustBanner1ContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustBanner1), v))
	})
}

// CustBanner2EQ applies the EQ predicate on the "cust_banner_2" field.
func CustBanner2EQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2NEQ applies the NEQ predicate on the "cust_banner_2" field.
func CustBanner2NEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2In applies the In predicate on the "cust_banner_2" field.
func CustBanner2In(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustBanner2), v...))
	})
}

// CustBanner2NotIn applies the NotIn predicate on the "cust_banner_2" field.
func CustBanner2NotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustBanner2), v...))
	})
}

// CustBanner2GT applies the GT predicate on the "cust_banner_2" field.
func CustBanner2GT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2GTE applies the GTE predicate on the "cust_banner_2" field.
func CustBanner2GTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2LT applies the LT predicate on the "cust_banner_2" field.
func CustBanner2LT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2LTE applies the LTE predicate on the "cust_banner_2" field.
func CustBanner2LTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2Contains applies the Contains predicate on the "cust_banner_2" field.
func CustBanner2Contains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2HasPrefix applies the HasPrefix predicate on the "cust_banner_2" field.
func CustBanner2HasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2HasSuffix applies the HasSuffix predicate on the "cust_banner_2" field.
func CustBanner2HasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2EqualFold applies the EqualFold predicate on the "cust_banner_2" field.
func CustBanner2EqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustBanner2), v))
	})
}

// CustBanner2ContainsFold applies the ContainsFold predicate on the "cust_banner_2" field.
func CustBanner2ContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustBanner2), v))
	})
}

// CustLogoURLEQ applies the EQ predicate on the "cust_logo_url" field.
func CustLogoURLEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLNEQ applies the NEQ predicate on the "cust_logo_url" field.
func CustLogoURLNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLIn applies the In predicate on the "cust_logo_url" field.
func CustLogoURLIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustLogoURL), v...))
	})
}

// CustLogoURLNotIn applies the NotIn predicate on the "cust_logo_url" field.
func CustLogoURLNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustLogoURL), v...))
	})
}

// CustLogoURLGT applies the GT predicate on the "cust_logo_url" field.
func CustLogoURLGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLGTE applies the GTE predicate on the "cust_logo_url" field.
func CustLogoURLGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLLT applies the LT predicate on the "cust_logo_url" field.
func CustLogoURLLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLLTE applies the LTE predicate on the "cust_logo_url" field.
func CustLogoURLLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLContains applies the Contains predicate on the "cust_logo_url" field.
func CustLogoURLContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLHasPrefix applies the HasPrefix predicate on the "cust_logo_url" field.
func CustLogoURLHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLHasSuffix applies the HasSuffix predicate on the "cust_logo_url" field.
func CustLogoURLHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLEqualFold applies the EqualFold predicate on the "cust_logo_url" field.
func CustLogoURLEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustLogoURL), v))
	})
}

// CustLogoURLContainsFold applies the ContainsFold predicate on the "cust_logo_url" field.
func CustLogoURLContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustLogoURL), v))
	})
}

// CustIsActiveEQ applies the EQ predicate on the "cust_is_active" field.
func CustIsActiveEQ(v customtypes.IsActive) predicate.MstCustomer {
	vc := v
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustIsActive), vc))
	})
}

// CustIsActiveNEQ applies the NEQ predicate on the "cust_is_active" field.
func CustIsActiveNEQ(v customtypes.IsActive) predicate.MstCustomer {
	vc := v
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustIsActive), vc))
	})
}

// CustIsActiveIn applies the In predicate on the "cust_is_active" field.
func CustIsActiveIn(vs ...customtypes.IsActive) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustIsActive), v...))
	})
}

// CustIsActiveNotIn applies the NotIn predicate on the "cust_is_active" field.
func CustIsActiveNotIn(vs ...customtypes.IsActive) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustIsActive), v...))
	})
}

// CustStatusEQ applies the EQ predicate on the "cust_status" field.
func CustStatusEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustStatus), v))
	})
}

// CustStatusNEQ applies the NEQ predicate on the "cust_status" field.
func CustStatusNEQ(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustStatus), v))
	})
}

// CustStatusIn applies the In predicate on the "cust_status" field.
func CustStatusIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustStatus), v...))
	})
}

// CustStatusNotIn applies the NotIn predicate on the "cust_status" field.
func CustStatusNotIn(vs ...string) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustStatus), v...))
	})
}

// CustStatusGT applies the GT predicate on the "cust_status" field.
func CustStatusGT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustStatus), v))
	})
}

// CustStatusGTE applies the GTE predicate on the "cust_status" field.
func CustStatusGTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustStatus), v))
	})
}

// CustStatusLT applies the LT predicate on the "cust_status" field.
func CustStatusLT(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustStatus), v))
	})
}

// CustStatusLTE applies the LTE predicate on the "cust_status" field.
func CustStatusLTE(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustStatus), v))
	})
}

// CustStatusContains applies the Contains predicate on the "cust_status" field.
func CustStatusContains(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustStatus), v))
	})
}

// CustStatusHasPrefix applies the HasPrefix predicate on the "cust_status" field.
func CustStatusHasPrefix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustStatus), v))
	})
}

// CustStatusHasSuffix applies the HasSuffix predicate on the "cust_status" field.
func CustStatusHasSuffix(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustStatus), v))
	})
}

// CustStatusEqualFold applies the EqualFold predicate on the "cust_status" field.
func CustStatusEqualFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustStatus), v))
	})
}

// CustStatusContainsFold applies the ContainsFold predicate on the "cust_status" field.
func CustStatusContainsFold(v string) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustStatus), v))
	})
}

// CustNumInstEQ applies the EQ predicate on the "cust_num_inst" field.
func CustNumInstEQ(v int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustNumInst), v))
	})
}

// CustNumInstNEQ applies the NEQ predicate on the "cust_num_inst" field.
func CustNumInstNEQ(v int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustNumInst), v))
	})
}

// CustNumInstIn applies the In predicate on the "cust_num_inst" field.
func CustNumInstIn(vs ...int) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustNumInst), v...))
	})
}

// CustNumInstNotIn applies the NotIn predicate on the "cust_num_inst" field.
func CustNumInstNotIn(vs ...int) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustNumInst), v...))
	})
}

// CustNumInstGT applies the GT predicate on the "cust_num_inst" field.
func CustNumInstGT(v int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustNumInst), v))
	})
}

// CustNumInstGTE applies the GTE predicate on the "cust_num_inst" field.
func CustNumInstGTE(v int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustNumInst), v))
	})
}

// CustNumInstLT applies the LT predicate on the "cust_num_inst" field.
func CustNumInstLT(v int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustNumInst), v))
	})
}

// CustNumInstLTE applies the LTE predicate on the "cust_num_inst" field.
func CustNumInstLTE(v int) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustNumInst), v))
	})
}

// CustTimeZoneEQ applies the EQ predicate on the "cust_time_zone" field.
func CustTimeZoneEQ(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustTimeZone), v))
	})
}

// CustTimeZoneNEQ applies the NEQ predicate on the "cust_time_zone" field.
func CustTimeZoneNEQ(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustTimeZone), v))
	})
}

// CustTimeZoneIn applies the In predicate on the "cust_time_zone" field.
func CustTimeZoneIn(vs ...time.Time) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustTimeZone), v...))
	})
}

// CustTimeZoneNotIn applies the NotIn predicate on the "cust_time_zone" field.
func CustTimeZoneNotIn(vs ...time.Time) predicate.MstCustomer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstCustomer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustTimeZone), v...))
	})
}

// CustTimeZoneGT applies the GT predicate on the "cust_time_zone" field.
func CustTimeZoneGT(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustTimeZone), v))
	})
}

// CustTimeZoneGTE applies the GTE predicate on the "cust_time_zone" field.
func CustTimeZoneGTE(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustTimeZone), v))
	})
}

// CustTimeZoneLT applies the LT predicate on the "cust_time_zone" field.
func CustTimeZoneLT(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustTimeZone), v))
	})
}

// CustTimeZoneLTE applies the LTE predicate on the "cust_time_zone" field.
func CustTimeZoneLTE(v time.Time) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustTimeZone), v))
	})
}

// HasCust2Inst applies the HasEdge predicate on the "Cust2Inst" edge.
func HasCust2Inst() predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Cust2InstTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, Cust2InstTable, Cust2InstColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCust2InstWith applies the HasEdge predicate on the "Cust2Inst" edge with a given conditions (other predicates).
func HasCust2InstWith(preds ...predicate.MstInst) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Cust2InstInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, Cust2InstTable, Cust2InstColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MstCustomer) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MstCustomer) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MstCustomer) predicate.MstCustomer {
	return predicate.MstCustomer(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ap *AuthParentQuery) CollectFields(ctx context.Context, satisfies ...string) *AuthParentQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ap = ap.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ap
}

func (ap *AuthParentQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AuthParentQuery {
	return ap
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (as *AuthStaffQuery) CollectFields(ctx context.Context, satisfies ...string) *AuthStaffQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		as = as.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return as
}

func (as *AuthStaffQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AuthStaffQuery {
	return as
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (mcm *MsgChannelMessageQuery) CollectFields(ctx context.Context, satisfies ...string) *MsgChannelMessageQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		mcm = mcm.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return mcm
}

func (mcm *MsgChannelMessageQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MsgChannelMessageQuery {
	return mcm
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (mc *MstCustomerQuery) CollectFields(ctx context.Context, satisfies ...string) *MstCustomerQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		mc = mc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return mc
}

func (mc *MstCustomerQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MstCustomerQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "Cust2Inst":
			mc = mc.WithCust2Inst(func(query *MstInstQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return mc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (mi *MstInstQuery) CollectFields(ctx context.Context, satisfies ...string) *MstInstQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		mi = mi.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return mi
}

func (mi *MstInstQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MstInstQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "InstfromCust":
			mi = mi.WithInstfromCust(func(query *MstCustomerQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return mi
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ms *MstStudentQuery) CollectFields(ctx context.Context, satisfies ...string) *MstStudentQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ms = ms.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ms
}

func (ms *MstStudentQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MstStudentQuery {
	return ms
}

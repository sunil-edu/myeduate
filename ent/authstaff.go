// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"myeduate/ent/authstaff"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AuthStaff is the model entity for the AuthStaff schema.
type AuthStaff struct {
	config `gqlgen:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// StaffFirstName holds the value of the "staff_first_name" field.
	StaffFirstName string `json:"staff_first_name,omitempty" gqlgen:"first_name"`
	// StaffMiddleName holds the value of the "staff_middle_name" field.
	StaffMiddleName string `json:"staff_middle_name,omitempty" gqlgen:"middle_name"`
	// StaffLastName holds the value of the "staff_last_name" field.
	StaffLastName string `json:"staff_last_name,omitempty" gqlgen:"last_name"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthStaff) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case authstaff.FieldID:
			values[i] = new(sql.NullInt64)
		case authstaff.FieldStaffFirstName, authstaff.FieldStaffMiddleName, authstaff.FieldStaffLastName:
			values[i] = new(sql.NullString)
		case authstaff.FieldCreatedAt, authstaff.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthStaff", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthStaff fields.
func (as *AuthStaff) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authstaff.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case authstaff.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				as.CreatedAt = value.Time
			}
		case authstaff.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				as.UpdatedAt = value.Time
			}
		case authstaff.FieldStaffFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field staff_first_name", values[i])
			} else if value.Valid {
				as.StaffFirstName = value.String
			}
		case authstaff.FieldStaffMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field staff_middle_name", values[i])
			} else if value.Valid {
				as.StaffMiddleName = value.String
			}
		case authstaff.FieldStaffLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field staff_last_name", values[i])
			} else if value.Valid {
				as.StaffLastName = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AuthStaff.
// Note that you need to call AuthStaff.Unwrap() before calling this method if this AuthStaff
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AuthStaff) Update() *AuthStaffUpdateOne {
	return (&AuthStaffClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the AuthStaff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AuthStaff) Unwrap() *AuthStaff {
	tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthStaff is not a transactional entity")
	}
	as.config.driver = tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AuthStaff) String() string {
	var builder strings.Builder
	builder.WriteString("AuthStaff(")
	builder.WriteString(fmt.Sprintf("id=%v", as.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(as.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(as.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", staff_first_name=")
	builder.WriteString(as.StaffFirstName)
	builder.WriteString(", staff_middle_name=")
	builder.WriteString(as.StaffMiddleName)
	builder.WriteString(", staff_last_name=")
	builder.WriteString(as.StaffLastName)
	builder.WriteByte(')')
	return builder.String()
}

// AuthStaffs is a parsable slice of AuthStaff.
type AuthStaffs []*AuthStaff

func (as AuthStaffs) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}

// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package mststudent

import (
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// StdFirstName applies equality check predicate on the "std_first_name" field. It's identical to StdFirstNameEQ.
func StdFirstName(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdFirstName), v))
	})
}

// StdMiddleName applies equality check predicate on the "std_middle_name" field. It's identical to StdMiddleNameEQ.
func StdMiddleName(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdMiddleName), v))
	})
}

// StdLastName applies equality check predicate on the "std_last_name" field. It's identical to StdLastNameEQ.
func StdLastName(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdLastName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// StdFirstNameEQ applies the EQ predicate on the "std_first_name" field.
func StdFirstNameEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameNEQ applies the NEQ predicate on the "std_first_name" field.
func StdFirstNameNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameIn applies the In predicate on the "std_first_name" field.
func StdFirstNameIn(vs ...string) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStdFirstName), v...))
	})
}

// StdFirstNameNotIn applies the NotIn predicate on the "std_first_name" field.
func StdFirstNameNotIn(vs ...string) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStdFirstName), v...))
	})
}

// StdFirstNameGT applies the GT predicate on the "std_first_name" field.
func StdFirstNameGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameGTE applies the GTE predicate on the "std_first_name" field.
func StdFirstNameGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameLT applies the LT predicate on the "std_first_name" field.
func StdFirstNameLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameLTE applies the LTE predicate on the "std_first_name" field.
func StdFirstNameLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameContains applies the Contains predicate on the "std_first_name" field.
func StdFirstNameContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameHasPrefix applies the HasPrefix predicate on the "std_first_name" field.
func StdFirstNameHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameHasSuffix applies the HasSuffix predicate on the "std_first_name" field.
func StdFirstNameHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameEqualFold applies the EqualFold predicate on the "std_first_name" field.
func StdFirstNameEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdFirstName), v))
	})
}

// StdFirstNameContainsFold applies the ContainsFold predicate on the "std_first_name" field.
func StdFirstNameContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdFirstName), v))
	})
}

// StdMiddleNameEQ applies the EQ predicate on the "std_middle_name" field.
func StdMiddleNameEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameNEQ applies the NEQ predicate on the "std_middle_name" field.
func StdMiddleNameNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameIn applies the In predicate on the "std_middle_name" field.
func StdMiddleNameIn(vs ...string) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStdMiddleName), v...))
	})
}

// StdMiddleNameNotIn applies the NotIn predicate on the "std_middle_name" field.
func StdMiddleNameNotIn(vs ...string) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStdMiddleName), v...))
	})
}

// StdMiddleNameGT applies the GT predicate on the "std_middle_name" field.
func StdMiddleNameGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameGTE applies the GTE predicate on the "std_middle_name" field.
func StdMiddleNameGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameLT applies the LT predicate on the "std_middle_name" field.
func StdMiddleNameLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameLTE applies the LTE predicate on the "std_middle_name" field.
func StdMiddleNameLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameContains applies the Contains predicate on the "std_middle_name" field.
func StdMiddleNameContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameHasPrefix applies the HasPrefix predicate on the "std_middle_name" field.
func StdMiddleNameHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameHasSuffix applies the HasSuffix predicate on the "std_middle_name" field.
func StdMiddleNameHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameEqualFold applies the EqualFold predicate on the "std_middle_name" field.
func StdMiddleNameEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdMiddleName), v))
	})
}

// StdMiddleNameContainsFold applies the ContainsFold predicate on the "std_middle_name" field.
func StdMiddleNameContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdMiddleName), v))
	})
}

// StdLastNameEQ applies the EQ predicate on the "std_last_name" field.
func StdLastNameEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdLastName), v))
	})
}

// StdLastNameNEQ applies the NEQ predicate on the "std_last_name" field.
func StdLastNameNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdLastName), v))
	})
}

// StdLastNameIn applies the In predicate on the "std_last_name" field.
func StdLastNameIn(vs ...string) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStdLastName), v...))
	})
}

// StdLastNameNotIn applies the NotIn predicate on the "std_last_name" field.
func StdLastNameNotIn(vs ...string) predicate.MstStudent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStdLastName), v...))
	})
}

// StdLastNameGT applies the GT predicate on the "std_last_name" field.
func StdLastNameGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdLastName), v))
	})
}

// StdLastNameGTE applies the GTE predicate on the "std_last_name" field.
func StdLastNameGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdLastName), v))
	})
}

// StdLastNameLT applies the LT predicate on the "std_last_name" field.
func StdLastNameLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdLastName), v))
	})
}

// StdLastNameLTE applies the LTE predicate on the "std_last_name" field.
func StdLastNameLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdLastName), v))
	})
}

// StdLastNameContains applies the Contains predicate on the "std_last_name" field.
func StdLastNameContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdLastName), v))
	})
}

// StdLastNameHasPrefix applies the HasPrefix predicate on the "std_last_name" field.
func StdLastNameHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdLastName), v))
	})
}

// StdLastNameHasSuffix applies the HasSuffix predicate on the "std_last_name" field.
func StdLastNameHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdLastName), v))
	})
}

// StdLastNameEqualFold applies the EqualFold predicate on the "std_last_name" field.
func StdLastNameEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdLastName), v))
	})
}

// StdLastNameContainsFold applies the ContainsFold predicate on the "std_last_name" field.
func StdLastNameContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdLastName), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MstStudent) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MstStudent) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MstStudent) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		p(s.Not())
	})
}

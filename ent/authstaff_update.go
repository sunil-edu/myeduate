// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/authstaff"
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthStaffUpdate is the builder for updating AuthStaff entities.
type AuthStaffUpdate struct {
	config
	hooks    []Hook
	mutation *AuthStaffMutation
}

// Where appends a list predicates to the AuthStaffUpdate builder.
func (asu *AuthStaffUpdate) Where(ps ...predicate.AuthStaff) *AuthStaffUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AuthStaffUpdate) SetUpdatedAt(t time.Time) *AuthStaffUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// SetStaffFirstName sets the "staff_first_name" field.
func (asu *AuthStaffUpdate) SetStaffFirstName(s string) *AuthStaffUpdate {
	asu.mutation.SetStaffFirstName(s)
	return asu
}

// SetStaffMiddleName sets the "staff_middle_name" field.
func (asu *AuthStaffUpdate) SetStaffMiddleName(s string) *AuthStaffUpdate {
	asu.mutation.SetStaffMiddleName(s)
	return asu
}

// SetStaffLastName sets the "staff_last_name" field.
func (asu *AuthStaffUpdate) SetStaffLastName(s string) *AuthStaffUpdate {
	asu.mutation.SetStaffLastName(s)
	return asu
}

// Mutation returns the AuthStaffMutation object of the builder.
func (asu *AuthStaffUpdate) Mutation() *AuthStaffMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AuthStaffUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	asu.defaults()
	if len(asu.hooks) == 0 {
		if err = asu.check(); err != nil {
			return 0, err
		}
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthStaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asu.check(); err != nil {
				return 0, err
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			if asu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AuthStaffUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AuthStaffUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AuthStaffUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AuthStaffUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		v := authstaff.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AuthStaffUpdate) check() error {
	if v, ok := asu.mutation.StaffFirstName(); ok {
		if err := authstaff.StaffFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "staff_first_name", err: fmt.Errorf(`ent: validator failed for field "AuthStaff.staff_first_name": %w`, err)}
		}
	}
	return nil
}

func (asu *AuthStaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authstaff.Table,
			Columns: authstaff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authstaff.FieldID,
			},
		},
	}
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authstaff.FieldUpdatedAt,
		})
	}
	if value, ok := asu.mutation.StaffFirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffFirstName,
		})
	}
	if value, ok := asu.mutation.StaffMiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffMiddleName,
		})
	}
	if value, ok := asu.mutation.StaffLastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffLastName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authstaff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AuthStaffUpdateOne is the builder for updating a single AuthStaff entity.
type AuthStaffUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthStaffMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AuthStaffUpdateOne) SetUpdatedAt(t time.Time) *AuthStaffUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// SetStaffFirstName sets the "staff_first_name" field.
func (asuo *AuthStaffUpdateOne) SetStaffFirstName(s string) *AuthStaffUpdateOne {
	asuo.mutation.SetStaffFirstName(s)
	return asuo
}

// SetStaffMiddleName sets the "staff_middle_name" field.
func (asuo *AuthStaffUpdateOne) SetStaffMiddleName(s string) *AuthStaffUpdateOne {
	asuo.mutation.SetStaffMiddleName(s)
	return asuo
}

// SetStaffLastName sets the "staff_last_name" field.
func (asuo *AuthStaffUpdateOne) SetStaffLastName(s string) *AuthStaffUpdateOne {
	asuo.mutation.SetStaffLastName(s)
	return asuo
}

// Mutation returns the AuthStaffMutation object of the builder.
func (asuo *AuthStaffUpdateOne) Mutation() *AuthStaffMutation {
	return asuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AuthStaffUpdateOne) Select(field string, fields ...string) *AuthStaffUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AuthStaff entity.
func (asuo *AuthStaffUpdateOne) Save(ctx context.Context) (*AuthStaff, error) {
	var (
		err  error
		node *AuthStaff
	)
	asuo.defaults()
	if len(asuo.hooks) == 0 {
		if err = asuo.check(); err != nil {
			return nil, err
		}
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthStaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asuo.check(); err != nil {
				return nil, err
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			if asuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AuthStaffUpdateOne) SaveX(ctx context.Context) *AuthStaff {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AuthStaffUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AuthStaffUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AuthStaffUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		v := authstaff.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AuthStaffUpdateOne) check() error {
	if v, ok := asuo.mutation.StaffFirstName(); ok {
		if err := authstaff.StaffFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "staff_first_name", err: fmt.Errorf(`ent: validator failed for field "AuthStaff.staff_first_name": %w`, err)}
		}
	}
	return nil
}

func (asuo *AuthStaffUpdateOne) sqlSave(ctx context.Context) (_node *AuthStaff, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authstaff.Table,
			Columns: authstaff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authstaff.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthStaff.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authstaff.FieldID)
		for _, f := range fields {
			if !authstaff.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authstaff.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authstaff.FieldUpdatedAt,
		})
	}
	if value, ok := asuo.mutation.StaffFirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffFirstName,
		})
	}
	if value, ok := asuo.mutation.StaffMiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffMiddleName,
		})
	}
	if value, ok := asuo.mutation.StaffLastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authstaff.FieldStaffLastName,
		})
	}
	_node = &AuthStaff{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authstaff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

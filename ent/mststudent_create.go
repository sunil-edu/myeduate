// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/customtypes"
	"myeduate/ent/mststudent"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MstStudentCreate is the builder for creating a MstStudent entity.
type MstStudentCreate struct {
	config
	mutation *MstStudentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (msc *MstStudentCreate) SetCreatedAt(t time.Time) *MstStudentCreate {
	msc.mutation.SetCreatedAt(t)
	return msc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableCreatedAt(t *time.Time) *MstStudentCreate {
	if t != nil {
		msc.SetCreatedAt(*t)
	}
	return msc
}

// SetUpdatedAt sets the "updated_at" field.
func (msc *MstStudentCreate) SetUpdatedAt(t time.Time) *MstStudentCreate {
	msc.mutation.SetUpdatedAt(t)
	return msc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableUpdatedAt(t *time.Time) *MstStudentCreate {
	if t != nil {
		msc.SetUpdatedAt(*t)
	}
	return msc
}

// SetStdFirstName sets the "std_first_name" field.
func (msc *MstStudentCreate) SetStdFirstName(s string) *MstStudentCreate {
	msc.mutation.SetStdFirstName(s)
	return msc
}

// SetStdMiddleName sets the "std_middle_name" field.
func (msc *MstStudentCreate) SetStdMiddleName(s string) *MstStudentCreate {
	msc.mutation.SetStdMiddleName(s)
	return msc
}

// SetStdLastName sets the "std_last_name" field.
func (msc *MstStudentCreate) SetStdLastName(s string) *MstStudentCreate {
	msc.mutation.SetStdLastName(s)
	return msc
}

// SetStdStudying sets the "std_studying" field.
func (msc *MstStudentCreate) SetStdStudying(b bool) *MstStudentCreate {
	msc.mutation.SetStdStudying(b)
	return msc
}

// SetNillableStdStudying sets the "std_studying" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdStudying(b *bool) *MstStudentCreate {
	if b != nil {
		msc.SetStdStudying(*b)
	}
	return msc
}

// SetStdStatus sets the "std_status" field.
func (msc *MstStudentCreate) SetStdStatus(cs customtypes.StdStatus) *MstStudentCreate {
	msc.mutation.SetStdStatus(cs)
	return msc
}

// SetNillableStdStatus sets the "std_status" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdStatus(cs *customtypes.StdStatus) *MstStudentCreate {
	if cs != nil {
		msc.SetStdStatus(*cs)
	}
	return msc
}

// SetStdSex sets the "std_sex" field.
func (msc *MstStudentCreate) SetStdSex(c customtypes.Sex) *MstStudentCreate {
	msc.mutation.SetStdSex(c)
	return msc
}

// SetStdRegNo sets the "std_reg_no" field.
func (msc *MstStudentCreate) SetStdRegNo(s string) *MstStudentCreate {
	msc.mutation.SetStdRegNo(s)
	return msc
}

// Mutation returns the MstStudentMutation object of the builder.
func (msc *MstStudentCreate) Mutation() *MstStudentMutation {
	return msc.mutation
}

// Save creates the MstStudent in the database.
func (msc *MstStudentCreate) Save(ctx context.Context) (*MstStudent, error) {
	var (
		err  error
		node *MstStudent
	)
	msc.defaults()
	if len(msc.hooks) == 0 {
		if err = msc.check(); err != nil {
			return nil, err
		}
		node, err = msc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstStudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = msc.check(); err != nil {
				return nil, err
			}
			msc.mutation = mutation
			if node, err = msc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(msc.hooks) - 1; i >= 0; i-- {
			if msc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MstStudentCreate) SaveX(ctx context.Context) *MstStudent {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MstStudentCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MstStudentCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msc *MstStudentCreate) defaults() {
	if _, ok := msc.mutation.CreatedAt(); !ok {
		v := mststudent.DefaultCreatedAt()
		msc.mutation.SetCreatedAt(v)
	}
	if _, ok := msc.mutation.UpdatedAt(); !ok {
		v := mststudent.DefaultUpdatedAt()
		msc.mutation.SetUpdatedAt(v)
	}
	if _, ok := msc.mutation.StdStudying(); !ok {
		v := mststudent.DefaultStdStudying
		msc.mutation.SetStdStudying(v)
	}
	if _, ok := msc.mutation.StdStatus(); !ok {
		v := mststudent.DefaultStdStatus
		msc.mutation.SetStdStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MstStudentCreate) check() error {
	if _, ok := msc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MstStudent.created_at"`)}
	}
	if _, ok := msc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MstStudent.updated_at"`)}
	}
	if _, ok := msc.mutation.StdFirstName(); !ok {
		return &ValidationError{Name: "std_first_name", err: errors.New(`ent: missing required field "MstStudent.std_first_name"`)}
	}
	if v, ok := msc.mutation.StdFirstName(); ok {
		if err := mststudent.StdFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "std_first_name", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_first_name": %w`, err)}
		}
	}
	if _, ok := msc.mutation.StdMiddleName(); !ok {
		return &ValidationError{Name: "std_middle_name", err: errors.New(`ent: missing required field "MstStudent.std_middle_name"`)}
	}
	if _, ok := msc.mutation.StdLastName(); !ok {
		return &ValidationError{Name: "std_last_name", err: errors.New(`ent: missing required field "MstStudent.std_last_name"`)}
	}
	if _, ok := msc.mutation.StdStudying(); !ok {
		return &ValidationError{Name: "std_studying", err: errors.New(`ent: missing required field "MstStudent.std_studying"`)}
	}
	if _, ok := msc.mutation.StdStatus(); !ok {
		return &ValidationError{Name: "std_status", err: errors.New(`ent: missing required field "MstStudent.std_status"`)}
	}
	if v, ok := msc.mutation.StdStatus(); ok {
		if err := mststudent.StdStatusValidator(v); err != nil {
			return &ValidationError{Name: "std_status", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_status": %w`, err)}
		}
	}
	if _, ok := msc.mutation.StdSex(); !ok {
		return &ValidationError{Name: "std_sex", err: errors.New(`ent: missing required field "MstStudent.std_sex"`)}
	}
	if v, ok := msc.mutation.StdSex(); ok {
		if err := mststudent.StdSexValidator(v); err != nil {
			return &ValidationError{Name: "std_sex", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_sex": %w`, err)}
		}
	}
	if _, ok := msc.mutation.StdRegNo(); !ok {
		return &ValidationError{Name: "std_reg_no", err: errors.New(`ent: missing required field "MstStudent.std_reg_no"`)}
	}
	return nil
}

func (msc *MstStudentCreate) sqlSave(ctx context.Context) (*MstStudent, error) {
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (msc *MstStudentCreate) createSpec() (*MstStudent, *sqlgraph.CreateSpec) {
	var (
		_node = &MstStudent{config: msc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mststudent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mststudent.FieldID,
			},
		}
	)
	if value, ok := msc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := msc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := msc.mutation.StdFirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdFirstName,
		})
		_node.StdFirstName = value
	}
	if value, ok := msc.mutation.StdMiddleName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdMiddleName,
		})
		_node.StdMiddleName = value
	}
	if value, ok := msc.mutation.StdLastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdLastName,
		})
		_node.StdLastName = value
	}
	if value, ok := msc.mutation.StdStudying(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mststudent.FieldStdStudying,
		})
		_node.StdStudying = value
	}
	if value, ok := msc.mutation.StdStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mststudent.FieldStdStatus,
		})
		_node.StdStatus = value
	}
	if value, ok := msc.mutation.StdSex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mststudent.FieldStdSex,
		})
		_node.StdSex = value
	}
	if value, ok := msc.mutation.StdRegNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdRegNo,
		})
		_node.StdRegNo = value
	}
	return _node, _spec
}

// MstStudentCreateBulk is the builder for creating many MstStudent entities in bulk.
type MstStudentCreateBulk struct {
	config
	builders []*MstStudentCreate
}

// Save creates the MstStudent entities in the database.
func (mscb *MstStudentCreateBulk) Save(ctx context.Context) ([]*MstStudent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MstStudent, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MstStudentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MstStudentCreateBulk) SaveX(ctx context.Context) []*MstStudent {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MstStudentCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MstStudentCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}

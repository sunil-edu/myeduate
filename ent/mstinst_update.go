// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/customtypes"
	"myeduate/ent/mstcustomer"
	"myeduate/ent/mstinst"
	"myeduate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MstInstUpdate is the builder for updating MstInst entities.
type MstInstUpdate struct {
	config
	hooks    []Hook
	mutation *MstInstMutation
}

// Where appends a list predicates to the MstInstUpdate builder.
func (miu *MstInstUpdate) Where(ps ...predicate.MstInst) *MstInstUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetUpdatedAt sets the "updated_at" field.
func (miu *MstInstUpdate) SetUpdatedAt(t time.Time) *MstInstUpdate {
	miu.mutation.SetUpdatedAt(t)
	return miu
}

// SetInstCode sets the "inst_code" field.
func (miu *MstInstUpdate) SetInstCode(s string) *MstInstUpdate {
	miu.mutation.SetInstCode(s)
	return miu
}

// SetInstName sets the "inst_name" field.
func (miu *MstInstUpdate) SetInstName(s string) *MstInstUpdate {
	miu.mutation.SetInstName(s)
	return miu
}

// SetInstShortName sets the "inst_short_name" field.
func (miu *MstInstUpdate) SetInstShortName(s string) *MstInstUpdate {
	miu.mutation.SetInstShortName(s)
	return miu
}

// SetInstAddress sets the "inst_address" field.
func (miu *MstInstUpdate) SetInstAddress(s string) *MstInstUpdate {
	miu.mutation.SetInstAddress(s)
	return miu
}

// SetInstPlace sets the "inst_place" field.
func (miu *MstInstUpdate) SetInstPlace(s string) *MstInstUpdate {
	miu.mutation.SetInstPlace(s)
	return miu
}

// SetInstState sets the "inst_state" field.
func (miu *MstInstUpdate) SetInstState(s string) *MstInstUpdate {
	miu.mutation.SetInstState(s)
	return miu
}

// SetInstPin sets the "inst_pin" field.
func (miu *MstInstUpdate) SetInstPin(s string) *MstInstUpdate {
	miu.mutation.SetInstPin(s)
	return miu
}

// SetInstContactPerson sets the "inst_contact_person" field.
func (miu *MstInstUpdate) SetInstContactPerson(s string) *MstInstUpdate {
	miu.mutation.SetInstContactPerson(s)
	return miu
}

// SetInstPhone sets the "inst_phone" field.
func (miu *MstInstUpdate) SetInstPhone(s string) *MstInstUpdate {
	miu.mutation.SetInstPhone(s)
	return miu
}

// SetInstEmail sets the "inst_email" field.
func (miu *MstInstUpdate) SetInstEmail(s string) *MstInstUpdate {
	miu.mutation.SetInstEmail(s)
	return miu
}

// SetInstMobile sets the "inst_mobile" field.
func (miu *MstInstUpdate) SetInstMobile(s string) *MstInstUpdate {
	miu.mutation.SetInstMobile(s)
	return miu
}

// SetInstURL sets the "inst_url" field.
func (miu *MstInstUpdate) SetInstURL(s string) *MstInstUpdate {
	miu.mutation.SetInstURL(s)
	return miu
}

// SetInstBanner1 sets the "inst_banner_1" field.
func (miu *MstInstUpdate) SetInstBanner1(s string) *MstInstUpdate {
	miu.mutation.SetInstBanner1(s)
	return miu
}

// SetInstBanner2 sets the "inst_banner_2" field.
func (miu *MstInstUpdate) SetInstBanner2(s string) *MstInstUpdate {
	miu.mutation.SetInstBanner2(s)
	return miu
}

// SetInstLogoURL sets the "inst_logo_url" field.
func (miu *MstInstUpdate) SetInstLogoURL(s string) *MstInstUpdate {
	miu.mutation.SetInstLogoURL(s)
	return miu
}

// SetInstIsActive sets the "inst_is_active" field.
func (miu *MstInstUpdate) SetInstIsActive(ca customtypes.IsActive) *MstInstUpdate {
	miu.mutation.SetInstIsActive(ca)
	return miu
}

// SetNillableInstIsActive sets the "inst_is_active" field if the given value is not nil.
func (miu *MstInstUpdate) SetNillableInstIsActive(ca *customtypes.IsActive) *MstInstUpdate {
	if ca != nil {
		miu.SetInstIsActive(*ca)
	}
	return miu
}

// SetInstStatus sets the "inst_status" field.
func (miu *MstInstUpdate) SetInstStatus(s string) *MstInstUpdate {
	miu.mutation.SetInstStatus(s)
	return miu
}

// SetInstTimeZone sets the "inst_time_zone" field.
func (miu *MstInstUpdate) SetInstTimeZone(t time.Time) *MstInstUpdate {
	miu.mutation.SetInstTimeZone(t)
	return miu
}

// SetCustomerID sets the "customer_id" field.
func (miu *MstInstUpdate) SetCustomerID(u uuid.UUID) *MstInstUpdate {
	miu.mutation.SetCustomerID(u)
	return miu
}

// SetTestID sets the "test_id" field.
func (miu *MstInstUpdate) SetTestID(u uuid.UUID) *MstInstUpdate {
	miu.mutation.SetTestID(u)
	return miu
}

// SetInstfromCustID sets the "InstfromCust" edge to the MstCustomer entity by ID.
func (miu *MstInstUpdate) SetInstfromCustID(id uuid.UUID) *MstInstUpdate {
	miu.mutation.SetInstfromCustID(id)
	return miu
}

// SetInstfromCust sets the "InstfromCust" edge to the MstCustomer entity.
func (miu *MstInstUpdate) SetInstfromCust(m *MstCustomer) *MstInstUpdate {
	return miu.SetInstfromCustID(m.ID)
}

// Mutation returns the MstInstMutation object of the builder.
func (miu *MstInstUpdate) Mutation() *MstInstMutation {
	return miu.mutation
}

// ClearInstfromCust clears the "InstfromCust" edge to the MstCustomer entity.
func (miu *MstInstUpdate) ClearInstfromCust() *MstInstUpdate {
	miu.mutation.ClearInstfromCust()
	return miu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *MstInstUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	miu.defaults()
	if len(miu.hooks) == 0 {
		if err = miu.check(); err != nil {
			return 0, err
		}
		affected, err = miu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstInstMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = miu.check(); err != nil {
				return 0, err
			}
			miu.mutation = mutation
			affected, err = miu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(miu.hooks) - 1; i >= 0; i-- {
			if miu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = miu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, miu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (miu *MstInstUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *MstInstUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *MstInstUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miu *MstInstUpdate) defaults() {
	if _, ok := miu.mutation.UpdatedAt(); !ok {
		v := mstinst.UpdateDefaultUpdatedAt()
		miu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miu *MstInstUpdate) check() error {
	if v, ok := miu.mutation.InstCode(); ok {
		if err := mstinst.InstCodeValidator(v); err != nil {
			return &ValidationError{Name: "inst_code", err: fmt.Errorf(`ent: validator failed for field "MstInst.inst_code": %w`, err)}
		}
	}
	if v, ok := miu.mutation.InstName(); ok {
		if err := mstinst.InstNameValidator(v); err != nil {
			return &ValidationError{Name: "inst_name", err: fmt.Errorf(`ent: validator failed for field "MstInst.inst_name": %w`, err)}
		}
	}
	if v, ok := miu.mutation.InstIsActive(); ok {
		if err := mstinst.InstIsActiveValidator(v); err != nil {
			return &ValidationError{Name: "inst_is_active", err: fmt.Errorf(`ent: validator failed for field "MstInst.inst_is_active": %w`, err)}
		}
	}
	if _, ok := miu.mutation.InstfromCustID(); miu.mutation.InstfromCustCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MstInst.InstfromCust"`)
	}
	return nil
}

func (miu *MstInstUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mstinst.Table,
			Columns: mstinst.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mstinst.FieldID,
			},
		},
	}
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mstinst.FieldUpdatedAt,
		})
	}
	if value, ok := miu.mutation.InstCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstCode,
		})
	}
	if value, ok := miu.mutation.InstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstName,
		})
	}
	if value, ok := miu.mutation.InstShortName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstShortName,
		})
	}
	if value, ok := miu.mutation.InstAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstAddress,
		})
	}
	if value, ok := miu.mutation.InstPlace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstPlace,
		})
	}
	if value, ok := miu.mutation.InstState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstState,
		})
	}
	if value, ok := miu.mutation.InstPin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstPin,
		})
	}
	if value, ok := miu.mutation.InstContactPerson(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstContactPerson,
		})
	}
	if value, ok := miu.mutation.InstPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstPhone,
		})
	}
	if value, ok := miu.mutation.InstEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstEmail,
		})
	}
	if value, ok := miu.mutation.InstMobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstMobile,
		})
	}
	if value, ok := miu.mutation.InstURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstURL,
		})
	}
	if value, ok := miu.mutation.InstBanner1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstBanner1,
		})
	}
	if value, ok := miu.mutation.InstBanner2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstBanner2,
		})
	}
	if value, ok := miu.mutation.InstLogoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstLogoURL,
		})
	}
	if value, ok := miu.mutation.InstIsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mstinst.FieldInstIsActive,
		})
	}
	if value, ok := miu.mutation.InstStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstStatus,
		})
	}
	if value, ok := miu.mutation.InstTimeZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mstinst.FieldInstTimeZone,
		})
	}
	if value, ok := miu.mutation.TestID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: mstinst.FieldTestID,
		})
	}
	if miu.mutation.InstfromCustCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mstinst.InstfromCustTable,
			Columns: []string{mstinst.InstfromCustColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mstcustomer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.InstfromCustIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mstinst.InstfromCustTable,
			Columns: []string{mstinst.InstfromCustColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mstcustomer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mstinst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MstInstUpdateOne is the builder for updating a single MstInst entity.
type MstInstUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MstInstMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (miuo *MstInstUpdateOne) SetUpdatedAt(t time.Time) *MstInstUpdateOne {
	miuo.mutation.SetUpdatedAt(t)
	return miuo
}

// SetInstCode sets the "inst_code" field.
func (miuo *MstInstUpdateOne) SetInstCode(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstCode(s)
	return miuo
}

// SetInstName sets the "inst_name" field.
func (miuo *MstInstUpdateOne) SetInstName(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstName(s)
	return miuo
}

// SetInstShortName sets the "inst_short_name" field.
func (miuo *MstInstUpdateOne) SetInstShortName(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstShortName(s)
	return miuo
}

// SetInstAddress sets the "inst_address" field.
func (miuo *MstInstUpdateOne) SetInstAddress(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstAddress(s)
	return miuo
}

// SetInstPlace sets the "inst_place" field.
func (miuo *MstInstUpdateOne) SetInstPlace(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstPlace(s)
	return miuo
}

// SetInstState sets the "inst_state" field.
func (miuo *MstInstUpdateOne) SetInstState(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstState(s)
	return miuo
}

// SetInstPin sets the "inst_pin" field.
func (miuo *MstInstUpdateOne) SetInstPin(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstPin(s)
	return miuo
}

// SetInstContactPerson sets the "inst_contact_person" field.
func (miuo *MstInstUpdateOne) SetInstContactPerson(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstContactPerson(s)
	return miuo
}

// SetInstPhone sets the "inst_phone" field.
func (miuo *MstInstUpdateOne) SetInstPhone(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstPhone(s)
	return miuo
}

// SetInstEmail sets the "inst_email" field.
func (miuo *MstInstUpdateOne) SetInstEmail(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstEmail(s)
	return miuo
}

// SetInstMobile sets the "inst_mobile" field.
func (miuo *MstInstUpdateOne) SetInstMobile(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstMobile(s)
	return miuo
}

// SetInstURL sets the "inst_url" field.
func (miuo *MstInstUpdateOne) SetInstURL(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstURL(s)
	return miuo
}

// SetInstBanner1 sets the "inst_banner_1" field.
func (miuo *MstInstUpdateOne) SetInstBanner1(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstBanner1(s)
	return miuo
}

// SetInstBanner2 sets the "inst_banner_2" field.
func (miuo *MstInstUpdateOne) SetInstBanner2(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstBanner2(s)
	return miuo
}

// SetInstLogoURL sets the "inst_logo_url" field.
func (miuo *MstInstUpdateOne) SetInstLogoURL(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstLogoURL(s)
	return miuo
}

// SetInstIsActive sets the "inst_is_active" field.
func (miuo *MstInstUpdateOne) SetInstIsActive(ca customtypes.IsActive) *MstInstUpdateOne {
	miuo.mutation.SetInstIsActive(ca)
	return miuo
}

// SetNillableInstIsActive sets the "inst_is_active" field if the given value is not nil.
func (miuo *MstInstUpdateOne) SetNillableInstIsActive(ca *customtypes.IsActive) *MstInstUpdateOne {
	if ca != nil {
		miuo.SetInstIsActive(*ca)
	}
	return miuo
}

// SetInstStatus sets the "inst_status" field.
func (miuo *MstInstUpdateOne) SetInstStatus(s string) *MstInstUpdateOne {
	miuo.mutation.SetInstStatus(s)
	return miuo
}

// SetInstTimeZone sets the "inst_time_zone" field.
func (miuo *MstInstUpdateOne) SetInstTimeZone(t time.Time) *MstInstUpdateOne {
	miuo.mutation.SetInstTimeZone(t)
	return miuo
}

// SetCustomerID sets the "customer_id" field.
func (miuo *MstInstUpdateOne) SetCustomerID(u uuid.UUID) *MstInstUpdateOne {
	miuo.mutation.SetCustomerID(u)
	return miuo
}

// SetTestID sets the "test_id" field.
func (miuo *MstInstUpdateOne) SetTestID(u uuid.UUID) *MstInstUpdateOne {
	miuo.mutation.SetTestID(u)
	return miuo
}

// SetInstfromCustID sets the "InstfromCust" edge to the MstCustomer entity by ID.
func (miuo *MstInstUpdateOne) SetInstfromCustID(id uuid.UUID) *MstInstUpdateOne {
	miuo.mutation.SetInstfromCustID(id)
	return miuo
}

// SetInstfromCust sets the "InstfromCust" edge to the MstCustomer entity.
func (miuo *MstInstUpdateOne) SetInstfromCust(m *MstCustomer) *MstInstUpdateOne {
	return miuo.SetInstfromCustID(m.ID)
}

// Mutation returns the MstInstMutation object of the builder.
func (miuo *MstInstUpdateOne) Mutation() *MstInstMutation {
	return miuo.mutation
}

// ClearInstfromCust clears the "InstfromCust" edge to the MstCustomer entity.
func (miuo *MstInstUpdateOne) ClearInstfromCust() *MstInstUpdateOne {
	miuo.mutation.ClearInstfromCust()
	return miuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *MstInstUpdateOne) Select(field string, fields ...string) *MstInstUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated MstInst entity.
func (miuo *MstInstUpdateOne) Save(ctx context.Context) (*MstInst, error) {
	var (
		err  error
		node *MstInst
	)
	miuo.defaults()
	if len(miuo.hooks) == 0 {
		if err = miuo.check(); err != nil {
			return nil, err
		}
		node, err = miuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstInstMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = miuo.check(); err != nil {
				return nil, err
			}
			miuo.mutation = mutation
			node, err = miuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(miuo.hooks) - 1; i >= 0; i-- {
			if miuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = miuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, miuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *MstInstUpdateOne) SaveX(ctx context.Context) *MstInst {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *MstInstUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *MstInstUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miuo *MstInstUpdateOne) defaults() {
	if _, ok := miuo.mutation.UpdatedAt(); !ok {
		v := mstinst.UpdateDefaultUpdatedAt()
		miuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miuo *MstInstUpdateOne) check() error {
	if v, ok := miuo.mutation.InstCode(); ok {
		if err := mstinst.InstCodeValidator(v); err != nil {
			return &ValidationError{Name: "inst_code", err: fmt.Errorf(`ent: validator failed for field "MstInst.inst_code": %w`, err)}
		}
	}
	if v, ok := miuo.mutation.InstName(); ok {
		if err := mstinst.InstNameValidator(v); err != nil {
			return &ValidationError{Name: "inst_name", err: fmt.Errorf(`ent: validator failed for field "MstInst.inst_name": %w`, err)}
		}
	}
	if v, ok := miuo.mutation.InstIsActive(); ok {
		if err := mstinst.InstIsActiveValidator(v); err != nil {
			return &ValidationError{Name: "inst_is_active", err: fmt.Errorf(`ent: validator failed for field "MstInst.inst_is_active": %w`, err)}
		}
	}
	if _, ok := miuo.mutation.InstfromCustID(); miuo.mutation.InstfromCustCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MstInst.InstfromCust"`)
	}
	return nil
}

func (miuo *MstInstUpdateOne) sqlSave(ctx context.Context) (_node *MstInst, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mstinst.Table,
			Columns: mstinst.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mstinst.FieldID,
			},
		},
	}
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MstInst.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mstinst.FieldID)
		for _, f := range fields {
			if !mstinst.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mstinst.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mstinst.FieldUpdatedAt,
		})
	}
	if value, ok := miuo.mutation.InstCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstCode,
		})
	}
	if value, ok := miuo.mutation.InstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstName,
		})
	}
	if value, ok := miuo.mutation.InstShortName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstShortName,
		})
	}
	if value, ok := miuo.mutation.InstAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstAddress,
		})
	}
	if value, ok := miuo.mutation.InstPlace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstPlace,
		})
	}
	if value, ok := miuo.mutation.InstState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstState,
		})
	}
	if value, ok := miuo.mutation.InstPin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstPin,
		})
	}
	if value, ok := miuo.mutation.InstContactPerson(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstContactPerson,
		})
	}
	if value, ok := miuo.mutation.InstPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstPhone,
		})
	}
	if value, ok := miuo.mutation.InstEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstEmail,
		})
	}
	if value, ok := miuo.mutation.InstMobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstMobile,
		})
	}
	if value, ok := miuo.mutation.InstURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstURL,
		})
	}
	if value, ok := miuo.mutation.InstBanner1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstBanner1,
		})
	}
	if value, ok := miuo.mutation.InstBanner2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstBanner2,
		})
	}
	if value, ok := miuo.mutation.InstLogoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstLogoURL,
		})
	}
	if value, ok := miuo.mutation.InstIsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mstinst.FieldInstIsActive,
		})
	}
	if value, ok := miuo.mutation.InstStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mstinst.FieldInstStatus,
		})
	}
	if value, ok := miuo.mutation.InstTimeZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mstinst.FieldInstTimeZone,
		})
	}
	if value, ok := miuo.mutation.TestID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: mstinst.FieldTestID,
		})
	}
	if miuo.mutation.InstfromCustCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mstinst.InstfromCustTable,
			Columns: []string{mstinst.InstfromCustColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mstcustomer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.InstfromCustIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mstinst.InstfromCustTable,
			Columns: []string{mstinst.InstfromCustColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mstcustomer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MstInst{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mstinst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

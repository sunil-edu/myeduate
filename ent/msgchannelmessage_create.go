// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myeduate/ent/msgchannelmessage"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MsgChannelMessageCreate is the builder for creating a MsgChannelMessage entity.
type MsgChannelMessageCreate struct {
	config
	mutation *MsgChannelMessageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mcmc *MsgChannelMessageCreate) SetCreatedAt(t time.Time) *MsgChannelMessageCreate {
	mcmc.mutation.SetCreatedAt(t)
	return mcmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mcmc *MsgChannelMessageCreate) SetNillableCreatedAt(t *time.Time) *MsgChannelMessageCreate {
	if t != nil {
		mcmc.SetCreatedAt(*t)
	}
	return mcmc
}

// SetUpdatedAt sets the "updated_at" field.
func (mcmc *MsgChannelMessageCreate) SetUpdatedAt(t time.Time) *MsgChannelMessageCreate {
	mcmc.mutation.SetUpdatedAt(t)
	return mcmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mcmc *MsgChannelMessageCreate) SetNillableUpdatedAt(t *time.Time) *MsgChannelMessageCreate {
	if t != nil {
		mcmc.SetUpdatedAt(*t)
	}
	return mcmc
}

// SetMsgDate sets the "msg_date" field.
func (mcmc *MsgChannelMessageCreate) SetMsgDate(t time.Time) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgDate(t)
	return mcmc
}

// SetNillableMsgDate sets the "msg_date" field if the given value is not nil.
func (mcmc *MsgChannelMessageCreate) SetNillableMsgDate(t *time.Time) *MsgChannelMessageCreate {
	if t != nil {
		mcmc.SetMsgDate(*t)
	}
	return mcmc
}

// SetMsgIsExpiry sets the "msg_is_expiry" field.
func (mcmc *MsgChannelMessageCreate) SetMsgIsExpiry(b bool) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgIsExpiry(b)
	return mcmc
}

// SetNillableMsgIsExpiry sets the "msg_is_expiry" field if the given value is not nil.
func (mcmc *MsgChannelMessageCreate) SetNillableMsgIsExpiry(b *bool) *MsgChannelMessageCreate {
	if b != nil {
		mcmc.SetMsgIsExpiry(*b)
	}
	return mcmc
}

// SetMsgExpiryDate sets the "msg_expiry_date" field.
func (mcmc *MsgChannelMessageCreate) SetMsgExpiryDate(t time.Time) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgExpiryDate(t)
	return mcmc
}

// SetNillableMsgExpiryDate sets the "msg_expiry_date" field if the given value is not nil.
func (mcmc *MsgChannelMessageCreate) SetNillableMsgExpiryDate(t *time.Time) *MsgChannelMessageCreate {
	if t != nil {
		mcmc.SetMsgExpiryDate(*t)
	}
	return mcmc
}

// SetMsgIsText sets the "msg_is_text" field.
func (mcmc *MsgChannelMessageCreate) SetMsgIsText(b bool) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgIsText(b)
	return mcmc
}

// SetNillableMsgIsText sets the "msg_is_text" field if the given value is not nil.
func (mcmc *MsgChannelMessageCreate) SetNillableMsgIsText(b *bool) *MsgChannelMessageCreate {
	if b != nil {
		mcmc.SetMsgIsText(*b)
	}
	return mcmc
}

// SetMsgContent sets the "msg_content" field.
func (mcmc *MsgChannelMessageCreate) SetMsgContent(s string) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgContent(s)
	return mcmc
}

// SetMsgMediaType sets the "msg_media_type" field.
func (mcmc *MsgChannelMessageCreate) SetMsgMediaType(s string) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgMediaType(s)
	return mcmc
}

// SetMsgMediaContent sets the "msg_media_content" field.
func (mcmc *MsgChannelMessageCreate) SetMsgMediaContent(s string) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgMediaContent(s)
	return mcmc
}

// SetMsgActive sets the "msg_active" field.
func (mcmc *MsgChannelMessageCreate) SetMsgActive(b bool) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgActive(b)
	return mcmc
}

// SetNillableMsgActive sets the "msg_active" field if the given value is not nil.
func (mcmc *MsgChannelMessageCreate) SetNillableMsgActive(b *bool) *MsgChannelMessageCreate {
	if b != nil {
		mcmc.SetMsgActive(*b)
	}
	return mcmc
}

// SetMsgIsIndividual sets the "msg_is_individual" field.
func (mcmc *MsgChannelMessageCreate) SetMsgIsIndividual(b bool) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgIsIndividual(b)
	return mcmc
}

// SetMsgRecvOrSent sets the "msg_recv_or_sent" field.
func (mcmc *MsgChannelMessageCreate) SetMsgRecvOrSent(s string) *MsgChannelMessageCreate {
	mcmc.mutation.SetMsgRecvOrSent(s)
	return mcmc
}

// Mutation returns the MsgChannelMessageMutation object of the builder.
func (mcmc *MsgChannelMessageCreate) Mutation() *MsgChannelMessageMutation {
	return mcmc.mutation
}

// Save creates the MsgChannelMessage in the database.
func (mcmc *MsgChannelMessageCreate) Save(ctx context.Context) (*MsgChannelMessage, error) {
	var (
		err  error
		node *MsgChannelMessage
	)
	mcmc.defaults()
	if len(mcmc.hooks) == 0 {
		if err = mcmc.check(); err != nil {
			return nil, err
		}
		node, err = mcmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MsgChannelMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mcmc.check(); err != nil {
				return nil, err
			}
			mcmc.mutation = mutation
			if node, err = mcmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mcmc.hooks) - 1; i >= 0; i-- {
			if mcmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mcmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mcmc *MsgChannelMessageCreate) SaveX(ctx context.Context) *MsgChannelMessage {
	v, err := mcmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcmc *MsgChannelMessageCreate) Exec(ctx context.Context) error {
	_, err := mcmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcmc *MsgChannelMessageCreate) ExecX(ctx context.Context) {
	if err := mcmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcmc *MsgChannelMessageCreate) defaults() {
	if _, ok := mcmc.mutation.CreatedAt(); !ok {
		v := msgchannelmessage.DefaultCreatedAt()
		mcmc.mutation.SetCreatedAt(v)
	}
	if _, ok := mcmc.mutation.UpdatedAt(); !ok {
		v := msgchannelmessage.DefaultUpdatedAt()
		mcmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mcmc.mutation.MsgDate(); !ok {
		v := msgchannelmessage.DefaultMsgDate()
		mcmc.mutation.SetMsgDate(v)
	}
	if _, ok := mcmc.mutation.MsgIsExpiry(); !ok {
		v := msgchannelmessage.DefaultMsgIsExpiry
		mcmc.mutation.SetMsgIsExpiry(v)
	}
	if _, ok := mcmc.mutation.MsgExpiryDate(); !ok {
		v := msgchannelmessage.DefaultMsgExpiryDate()
		mcmc.mutation.SetMsgExpiryDate(v)
	}
	if _, ok := mcmc.mutation.MsgIsText(); !ok {
		v := msgchannelmessage.DefaultMsgIsText
		mcmc.mutation.SetMsgIsText(v)
	}
	if _, ok := mcmc.mutation.MsgActive(); !ok {
		v := msgchannelmessage.DefaultMsgActive
		mcmc.mutation.SetMsgActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcmc *MsgChannelMessageCreate) check() error {
	if _, ok := mcmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MsgChannelMessage.created_at"`)}
	}
	if _, ok := mcmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MsgChannelMessage.updated_at"`)}
	}
	if _, ok := mcmc.mutation.MsgIsExpiry(); !ok {
		return &ValidationError{Name: "msg_is_expiry", err: errors.New(`ent: missing required field "MsgChannelMessage.msg_is_expiry"`)}
	}
	if _, ok := mcmc.mutation.MsgIsText(); !ok {
		return &ValidationError{Name: "msg_is_text", err: errors.New(`ent: missing required field "MsgChannelMessage.msg_is_text"`)}
	}
	if _, ok := mcmc.mutation.MsgContent(); !ok {
		return &ValidationError{Name: "msg_content", err: errors.New(`ent: missing required field "MsgChannelMessage.msg_content"`)}
	}
	if _, ok := mcmc.mutation.MsgMediaType(); !ok {
		return &ValidationError{Name: "msg_media_type", err: errors.New(`ent: missing required field "MsgChannelMessage.msg_media_type"`)}
	}
	if _, ok := mcmc.mutation.MsgMediaContent(); !ok {
		return &ValidationError{Name: "msg_media_content", err: errors.New(`ent: missing required field "MsgChannelMessage.msg_media_content"`)}
	}
	if _, ok := mcmc.mutation.MsgActive(); !ok {
		return &ValidationError{Name: "msg_active", err: errors.New(`ent: missing required field "MsgChannelMessage.msg_active"`)}
	}
	if _, ok := mcmc.mutation.MsgIsIndividual(); !ok {
		return &ValidationError{Name: "msg_is_individual", err: errors.New(`ent: missing required field "MsgChannelMessage.msg_is_individual"`)}
	}
	if _, ok := mcmc.mutation.MsgRecvOrSent(); !ok {
		return &ValidationError{Name: "msg_recv_or_sent", err: errors.New(`ent: missing required field "MsgChannelMessage.msg_recv_or_sent"`)}
	}
	return nil
}

func (mcmc *MsgChannelMessageCreate) sqlSave(ctx context.Context) (*MsgChannelMessage, error) {
	_node, _spec := mcmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mcmc *MsgChannelMessageCreate) createSpec() (*MsgChannelMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &MsgChannelMessage{config: mcmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: msgchannelmessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: msgchannelmessage.FieldID,
			},
		}
	)
	if value, ok := mcmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mcmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mcmc.mutation.MsgDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldMsgDate,
		})
		_node.MsgDate = &value
	}
	if value, ok := mcmc.mutation.MsgIsExpiry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgIsExpiry,
		})
		_node.MsgIsExpiry = value
	}
	if value, ok := mcmc.mutation.MsgExpiryDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: msgchannelmessage.FieldMsgExpiryDate,
		})
		_node.MsgExpiryDate = &value
	}
	if value, ok := mcmc.mutation.MsgIsText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgIsText,
		})
		_node.MsgIsText = value
	}
	if value, ok := mcmc.mutation.MsgContent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgContent,
		})
		_node.MsgContent = value
	}
	if value, ok := mcmc.mutation.MsgMediaType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgMediaType,
		})
		_node.MsgMediaType = value
	}
	if value, ok := mcmc.mutation.MsgMediaContent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgMediaContent,
		})
		_node.MsgMediaContent = value
	}
	if value, ok := mcmc.mutation.MsgActive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgActive,
		})
		_node.MsgActive = value
	}
	if value, ok := mcmc.mutation.MsgIsIndividual(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msgchannelmessage.FieldMsgIsIndividual,
		})
		_node.MsgIsIndividual = value
	}
	if value, ok := mcmc.mutation.MsgRecvOrSent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgchannelmessage.FieldMsgRecvOrSent,
		})
		_node.MsgRecvOrSent = value
	}
	return _node, _spec
}

// MsgChannelMessageCreateBulk is the builder for creating many MsgChannelMessage entities in bulk.
type MsgChannelMessageCreateBulk struct {
	config
	builders []*MsgChannelMessageCreate
}

// Save creates the MsgChannelMessage entities in the database.
func (mcmcb *MsgChannelMessageCreateBulk) Save(ctx context.Context) ([]*MsgChannelMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcmcb.builders))
	nodes := make([]*MsgChannelMessage, len(mcmcb.builders))
	mutators := make([]Mutator, len(mcmcb.builders))
	for i := range mcmcb.builders {
		func(i int, root context.Context) {
			builder := mcmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsgChannelMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcmcb *MsgChannelMessageCreateBulk) SaveX(ctx context.Context) []*MsgChannelMessage {
	v, err := mcmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcmcb *MsgChannelMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := mcmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcmcb *MsgChannelMessageCreateBulk) ExecX(ctx context.Context) {
	if err := mcmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"myeduate/ent/customtypes"
	"myeduate/ent/mstcustomer"
	"myeduate/ent/mstinst"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// MstInst is the model entity for the MstInst schema.
type MstInst struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// InstCode holds the value of the "inst_code" field.
	InstCode string `json:"inst_code,omitempty"`
	// InstName holds the value of the "inst_name" field.
	InstName string `json:"inst_name,omitempty"`
	// InstShortName holds the value of the "inst_short_name" field.
	InstShortName string `json:"inst_short_name,omitempty"`
	// InstAddress holds the value of the "inst_address" field.
	InstAddress string `json:"inst_address,omitempty"`
	// InstPlace holds the value of the "inst_place" field.
	InstPlace string `json:"inst_place,omitempty"`
	// InstState holds the value of the "inst_state" field.
	InstState string `json:"inst_state,omitempty"`
	// InstPin holds the value of the "inst_pin" field.
	InstPin string `json:"inst_pin,omitempty"`
	// InstContactPerson holds the value of the "inst_contact_person" field.
	InstContactPerson string `json:"inst_contact_person,omitempty"`
	// InstPhone holds the value of the "inst_phone" field.
	InstPhone string `json:"inst_phone,omitempty"`
	// InstEmail holds the value of the "inst_email" field.
	InstEmail string `json:"inst_email,omitempty"`
	// InstMobile holds the value of the "inst_mobile" field.
	InstMobile string `json:"inst_mobile,omitempty"`
	// InstURL holds the value of the "inst_url" field.
	InstURL string `json:"inst_url,omitempty"`
	// InstBanner1 holds the value of the "inst_banner_1" field.
	InstBanner1 string `json:"inst_banner_1,omitempty"`
	// InstBanner2 holds the value of the "inst_banner_2" field.
	InstBanner2 string `json:"inst_banner_2,omitempty"`
	// InstLogoURL holds the value of the "inst_logo_url" field.
	InstLogoURL string `json:"inst_logo_url,omitempty"`
	// InstIsActive holds the value of the "inst_is_active" field.
	InstIsActive customtypes.IsActive `json:"inst_is_active,omitempty"`
	// InstStatus holds the value of the "inst_status" field.
	InstStatus string `json:"inst_status,omitempty"`
	// InstTimeZone holds the value of the "inst_time_zone" field.
	InstTimeZone time.Time `json:"inst_time_zone,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID int `json:"customer_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MstInstQuery when eager-loading is set.
	Edges MstInstEdges `json:"edges"`
}

// MstInstEdges holds the relations/edges for other nodes in the graph.
type MstInstEdges struct {
	// InstfromCust holds the value of the InstfromCust edge.
	InstfromCust *MstCustomer `json:"InstfromCust,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstfromCustOrErr returns the InstfromCust value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MstInstEdges) InstfromCustOrErr() (*MstCustomer, error) {
	if e.loadedTypes[0] {
		if e.InstfromCust == nil {
			// The edge InstfromCust was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: mstcustomer.Label}
		}
		return e.InstfromCust, nil
	}
	return nil, &NotLoadedError{edge: "InstfromCust"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MstInst) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mstinst.FieldID, mstinst.FieldCustomerID:
			values[i] = new(sql.NullInt64)
		case mstinst.FieldInstCode, mstinst.FieldInstName, mstinst.FieldInstShortName, mstinst.FieldInstAddress, mstinst.FieldInstPlace, mstinst.FieldInstState, mstinst.FieldInstPin, mstinst.FieldInstContactPerson, mstinst.FieldInstPhone, mstinst.FieldInstEmail, mstinst.FieldInstMobile, mstinst.FieldInstURL, mstinst.FieldInstBanner1, mstinst.FieldInstBanner2, mstinst.FieldInstLogoURL, mstinst.FieldInstIsActive, mstinst.FieldInstStatus:
			values[i] = new(sql.NullString)
		case mstinst.FieldCreatedAt, mstinst.FieldUpdatedAt, mstinst.FieldInstTimeZone:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MstInst", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MstInst fields.
func (mi *MstInst) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mstinst.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mi.ID = int(value.Int64)
		case mstinst.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mi.CreatedAt = value.Time
			}
		case mstinst.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mi.UpdatedAt = value.Time
			}
		case mstinst.FieldInstCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_code", values[i])
			} else if value.Valid {
				mi.InstCode = value.String
			}
		case mstinst.FieldInstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_name", values[i])
			} else if value.Valid {
				mi.InstName = value.String
			}
		case mstinst.FieldInstShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_short_name", values[i])
			} else if value.Valid {
				mi.InstShortName = value.String
			}
		case mstinst.FieldInstAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_address", values[i])
			} else if value.Valid {
				mi.InstAddress = value.String
			}
		case mstinst.FieldInstPlace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_place", values[i])
			} else if value.Valid {
				mi.InstPlace = value.String
			}
		case mstinst.FieldInstState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_state", values[i])
			} else if value.Valid {
				mi.InstState = value.String
			}
		case mstinst.FieldInstPin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_pin", values[i])
			} else if value.Valid {
				mi.InstPin = value.String
			}
		case mstinst.FieldInstContactPerson:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_contact_person", values[i])
			} else if value.Valid {
				mi.InstContactPerson = value.String
			}
		case mstinst.FieldInstPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_phone", values[i])
			} else if value.Valid {
				mi.InstPhone = value.String
			}
		case mstinst.FieldInstEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_email", values[i])
			} else if value.Valid {
				mi.InstEmail = value.String
			}
		case mstinst.FieldInstMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_mobile", values[i])
			} else if value.Valid {
				mi.InstMobile = value.String
			}
		case mstinst.FieldInstURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_url", values[i])
			} else if value.Valid {
				mi.InstURL = value.String
			}
		case mstinst.FieldInstBanner1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_banner_1", values[i])
			} else if value.Valid {
				mi.InstBanner1 = value.String
			}
		case mstinst.FieldInstBanner2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_banner_2", values[i])
			} else if value.Valid {
				mi.InstBanner2 = value.String
			}
		case mstinst.FieldInstLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_logo_url", values[i])
			} else if value.Valid {
				mi.InstLogoURL = value.String
			}
		case mstinst.FieldInstIsActive:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_is_active", values[i])
			} else if value.Valid {
				mi.InstIsActive = customtypes.IsActive(value.String)
			}
		case mstinst.FieldInstStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_status", values[i])
			} else if value.Valid {
				mi.InstStatus = value.String
			}
		case mstinst.FieldInstTimeZone:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field inst_time_zone", values[i])
			} else if value.Valid {
				mi.InstTimeZone = value.Time
			}
		case mstinst.FieldCustomerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				mi.CustomerID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryInstfromCust queries the "InstfromCust" edge of the MstInst entity.
func (mi *MstInst) QueryInstfromCust() *MstCustomerQuery {
	return (&MstInstClient{config: mi.config}).QueryInstfromCust(mi)
}

// Update returns a builder for updating this MstInst.
// Note that you need to call MstInst.Unwrap() before calling this method if this MstInst
// was returned from a transaction, and the transaction was committed or rolled back.
func (mi *MstInst) Update() *MstInstUpdateOne {
	return (&MstInstClient{config: mi.config}).UpdateOne(mi)
}

// Unwrap unwraps the MstInst entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mi *MstInst) Unwrap() *MstInst {
	tx, ok := mi.config.driver.(*txDriver)
	if !ok {
		panic("ent: MstInst is not a transactional entity")
	}
	mi.config.driver = tx.drv
	return mi
}

// String implements the fmt.Stringer.
func (mi *MstInst) String() string {
	var builder strings.Builder
	builder.WriteString("MstInst(")
	builder.WriteString(fmt.Sprintf("id=%v", mi.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(mi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", inst_code=")
	builder.WriteString(mi.InstCode)
	builder.WriteString(", inst_name=")
	builder.WriteString(mi.InstName)
	builder.WriteString(", inst_short_name=")
	builder.WriteString(mi.InstShortName)
	builder.WriteString(", inst_address=")
	builder.WriteString(mi.InstAddress)
	builder.WriteString(", inst_place=")
	builder.WriteString(mi.InstPlace)
	builder.WriteString(", inst_state=")
	builder.WriteString(mi.InstState)
	builder.WriteString(", inst_pin=")
	builder.WriteString(mi.InstPin)
	builder.WriteString(", inst_contact_person=")
	builder.WriteString(mi.InstContactPerson)
	builder.WriteString(", inst_phone=")
	builder.WriteString(mi.InstPhone)
	builder.WriteString(", inst_email=")
	builder.WriteString(mi.InstEmail)
	builder.WriteString(", inst_mobile=")
	builder.WriteString(mi.InstMobile)
	builder.WriteString(", inst_url=")
	builder.WriteString(mi.InstURL)
	builder.WriteString(", inst_banner_1=")
	builder.WriteString(mi.InstBanner1)
	builder.WriteString(", inst_banner_2=")
	builder.WriteString(mi.InstBanner2)
	builder.WriteString(", inst_logo_url=")
	builder.WriteString(mi.InstLogoURL)
	builder.WriteString(", inst_is_active=")
	builder.WriteString(fmt.Sprintf("%v", mi.InstIsActive))
	builder.WriteString(", inst_status=")
	builder.WriteString(mi.InstStatus)
	builder.WriteString(", inst_time_zone=")
	builder.WriteString(mi.InstTimeZone.Format(time.ANSIC))
	builder.WriteString(", customer_id=")
	builder.WriteString(fmt.Sprintf("%v", mi.CustomerID))
	builder.WriteByte(')')
	return builder.String()
}

// MstInsts is a parsable slice of MstInst.
type MstInsts []*MstInst

func (mi MstInsts) config(cfg config) {
	for _i := range mi {
		mi[_i].config = cfg
	}
}
